using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using PhoenixProject.Network.GamePackets;
using PhoenixProject.ServerBase;
using PhoenixProject.Client;
using NpcDialogs;
using System.Diagnostics;
using PhoenixProject.Game.Features;
using System.Drawing;
using PhoenixProject.Network.GamePackets.EventAlert;
using KinSocket;

namespace PhoenixProject.Network
{
    public static class PacketHandler
    {

        public static void PrintPacket(byte[] packet)
        {
            foreach (byte D in packet)
            {
                System.Console.Write((Convert.ToString(D, 16)).PadLeft(2, '0') + " ");
            }
            System.Console.Write("\n\n");
        }
        public static byte[] TQ_SERVER = System.Text.Encoding.ASCII.GetBytes("TQServer");
        public static byte[] ReturnFinal(byte[] Data)
        {

            //Replaces "TQClient" with "TQServer" on the end of the packet so it may be looped back to the client.
            Array.Copy(TQ_SERVER, 0, Data, Data.Length - TQ_SERVER.Length, TQ_SERVER.Length);
            return Data;
        }
        public static void HandleBuffer(byte[] buffer, Client.GameState client)
        {

            if (buffer == null)
                return;
            if (client == null)
                return;
        roleAgain:
            ushort Length = BitConverter.ToUInt16(buffer, 0);
            if ((Length + 8) == buffer.Length)
            {
                Network.Writer.WriteString(ServerBase.Constants.ServerKey, (buffer.Length - 8), buffer);
                HandlePacket(buffer, client);
                return;
            }
            else if ((Length + 8) > buffer.Length)
            {
                return;
            }
            else
            {
                byte[] Packet = new byte[(Length + 8)];
                Buffer.BlockCopy(buffer, 0, Packet, 0, (Length + 8));
                byte[] _buffer = new byte[(buffer.Length - (Length + 8))];
                Buffer.BlockCopy(buffer, (Length + 8), _buffer, 0, (buffer.Length - (Length + 8)));
                buffer = _buffer;
                Network.Writer.WriteString(ServerBase.Constants.ServerKey, (Packet.Length - 8), Packet);
                HandlePacket(Packet, client);
                goto roleAgain;
            }
        }
        public static MonsterHunterStats MonsterHunterStats;
        public class WaitDc
        {
            Client.GameState Who;
            System.Timers.Timer T;
            public WaitDc(Client.GameState C)
            {
                this.Who = C;
                T = new System.Timers.Timer();
                T.Interval = 1000;
                T.Elapsed += new System.Timers.ElapsedEventHandler(T_Elapsed);
                T.AutoReset = false;
                T.Start();
            }

            void T_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
            {
                Who.Disconnect();
                T.Dispose();
            }

        }
        public static bool PassLearn(byte ID, Game.Entity Entity)
        {
            Boolean Pass = false;

            switch ((Statement.ClassID)ID)
            {
                case Statement.ClassID.MartialArtist:
                    if (Entity.Owner.Inventory.Contains(721259, 5))
                    {
                        Entity.Owner.Inventory.Remove(721259, 5);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.Warlock:
                    if (Entity.Owner.Inventory.Contains(721261, 10))
                    {
                        Entity.Owner.Inventory.Remove(721261, 10);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.ChiMaster:
                    if (Entity.Owner.Inventory.Contains(711188, 1))
                    {
                        Entity.Owner.Inventory.Remove(711188, 1);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.Sage:
                    if (Entity.Owner.Inventory.Contains(723087, 20))
                    {
                        Entity.Owner.Inventory.Remove(723087, 20);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.Apothecary:
                    if (Entity.Owner.Inventory.Contains(1088001, 10))
                    {
                        Entity.Owner.Inventory.Remove(1088001, 10);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.Performer:
                    if (Entity.Owner.Inventory.Contains(711679, 1))
                    {
                        Entity.Owner.Inventory.Remove(711679, 1);
                        Pass = true;
                    }
                    break;
                case Statement.ClassID.Wrangler:
                    if (Entity.Owner.Inventory.Contains(723903, 40))
                    {
                        Entity.Owner.Inventory.Remove(723903, 40);
                        Pass = true;
                    }
                    break;
            }

            return Pass;
        }
        public static bool PassRequeriments(Statement.SubClass Sc, Game.Entity Entity)
        {
            Boolean Pass = false;
            byte Level = 0;
            byte Reborns = 0;
            #region [Switch Phases]
            switch (Sc.Phase)
            {
                case 0:
                case 1: return true;
                case 2: Level = 90; Reborns = 0; break;
                case 3: Level = 110; Reborns = 0; break;
                case 4: Level = 120; Reborns = 0; break;
                case 5: Level = 90; Reborns = 0; break;
                case 6: Level = 110; Reborns = 0; break;
                case 7: Level = 120; Reborns = 0; break;
                case 8: Level = 120; Reborns = 0; break;
                case 9: Level = 120; Reborns = 0; break;
            }
            #endregion

            if (Sc.Level > Sc.Phase && Entity.Level >= Level && Entity.Reborn >= Reborns)
                Pass = true;

            if (Sc.Level == 9 && Sc.Phase == 9)
                Pass = false;

            return Pass;
        }
        static unsafe void HandlePacket(byte[] packet, Client.GameState client)
        {
            try
            {


                if (packet == null)
                    return;
                if (client == null)
                    return;
                fixed (byte* ptr = packet)
                {
                    var type = *((ushort*)(ptr + 2));
                    ushort Length = BitConverter.ToUInt16(packet, 0);
                    ushort ID = BitConverter.ToUInt16(packet, 2);

                    ushort ID2 = BitConverter.ToUInt16(packet, 4);
                    switch (ID)
                    {
                        #region Packet Spook Mob
                        case 2400:
                            {
                                client.Send(new NpcReply(NpcReply.MessageBox, "The Thrilling Spooks are sealed up, inside here Better speak to the Heavenly Master ,if you want more detalis"));
                                #region
                                client.OnMessageBoxOK =
                                delegate
                                {
                                    client.Entity.Teleport(8892, 28, 26);
                                };
                                client.OnMessageBoxCANCEL =
                                    delegate
                                    {
                                        client.OnMessageBoxEventParams = new object[0];
                                    };
                                #endregion

                                break;
                            }
                        #endregion
                        #region Arsenal [2201][2202][2203]
                        case 2202:
                            {
                                if (packet[16] == 0) packet[16] = 8;
                                client.Send(ArsenalPacket.ArsenalInscribedPage(client, packet, (PhoenixProject.Game.Features.Arsenal_ID)packet[16]));
                                break;
                            }
                        case 2203:
                            {
                                client.Send(ArsenalPacket.GuildArsenal(client));
                                if (client.Guild != null)
                                    if (client.Guild.Arsenal != null)
                                        client.Guild.Arsenal.Update(client.Guild);
                                byte pType = packet[4];
                                byte i_type = packet[8];
                                uint i_Uid = BitConverter.ToUInt32(packet, 12);

                                if (i_type == 0) i_type = 8;
                                switch (pType)
                                {
                                    case 0:
                                        {
                                            if (client.Guild != null)
                                                client.Guild.Arsenal.UnlockArsenal(client, (PhoenixProject.Game.Features.Arsenal_ID)i_type);
                                            break;
                                        }
                                    case 1:
                                        {
                                            PhoenixProject.Interfaces.IConquerItem Item = null;
                                            if (client.Inventory.TryGetItem(i_Uid, out Item))
                                            {
                                                if (client != null)
                                                {
                                                    if (Item != null)
                                                    {
                                                        if (i_type != 0 && i_type <= 8)
                                                        {
                                                            if (client.Guild != null)
                                                            {
                                                                if (client.Guild.Arsenal != null)
                                                                {
                                                                    client.Guild.Arsenal.InscribeItem(client, Item, (PhoenixProject.Game.Features.Arsenal_ID)i_type);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    case 2://Uninscribe
                                        {
                                            PhoenixProject.Game.Features.Arsenal_Client ac = null;
                                            if (client.Guild.Arsenal.Arsenals[(PhoenixProject.Game.Features.Arsenal_ID)i_type].Inscribed.TryGetValue(i_Uid, out ac))
                                                client.Guild.Arsenal.RemoveItem(client, ac.Item, (PhoenixProject.Game.Features.Arsenal_ID)i_type);
                                            break;
                                        }
                                    case 4:
                                        {
                                            client.Send(ArsenalPacket.GuildArsenal(client));
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region EnitityCreate (1001)
                        case 1001:
                            {
                                if (client.Action == 1)
                                {
                                    EnitityCreate EC = new EnitityCreate();
                                    EC.Deserialize(packet);
                                    string Message = "";
                                    Boolean Created = Database.EntityTable.CreateEntity(EC, client, ref Message);
                                    client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.PopUP));
                                    if (Created)
                                        Console.WriteLine(client.Account.Username + " Sucesfully Created a new Character " + EC.Name);
                                    client.JustCreated = true;
                                }
                                break;
                            }
                        #endregion
                        #region Chat/Message (1004)
                        case 1004:
                            {
                                if (client.Action != 2)
                                    return;
                                Message message = new Message();
                                message.Deserialize(packet);
                                if (message.__Message.Split(new string[] { "\\n" }, StringSplitOptions.RemoveEmptyEntries).Length > 0)
                                    message.__Message = message.__Message.Split(new string[] { "\\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                                Chat(message, client);
                                break;
                            }
                        #endregion
                        #region Item/Ping (1009)
                        case 1009:
                            {
                                if (client.Action != 2)
                                    return;
                                ItemUsage usage = new ItemUsage(false);
                                usage.Deserialize(packet);
                                if (!client.Entity.Dead || usage.ID == ItemUsage.Ping)
                                {
                                    switch (usage.ID)
                                    {
                                        case 53:
                                            {
                                                uint ItemAdd = BitConverter.ToUInt32(packet, 8);


                                                Interfaces.IConquerItem item_new = null;
                                                if (client.Inventory.TryGetItem(ItemAdd, out item_new))
                                                {
                                                    uint obtined_points = 0;
                                                    Database.ConquerItemInformation iteminfo = new PhoenixProject.Database.ConquerItemInformation(ItemAdd, 0);
                                                    Dictionary<uint, uint> amount = new Dictionary<uint, uint>();//packet[20]);
                                                    for (ushort i = 84; i < 84 + 4 * packet[20]; i += 4)
                                                    {
                                                        uint item_swap = BitConverter.ToUInt32(packet, i);
                                                        if (client.Inventory.ContainsUID(item_swap))
                                                        {
                                                            Interfaces.IConquerItem item = null;
                                                            if (client.Inventory.TryGetItem(item_swap, out item))
                                                            {
                                                                amount.Add(item_swap, i);
                                                            }
                                                            switch (item.ID)
                                                            {
                                                                case 191505:
                                                                case 191605:
                                                                case 191705:
                                                                case 191805:
                                                                case 191905:
                                                                case 191405:
                                                                case 183325:
                                                                case 183315:
                                                                case 183375:
                                                                case 183305:
                                                                    {
                                                                        obtined_points += 300;
                                                                        break;
                                                                    }
                                                                default:
                                                                    obtined_points += 50;
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    if (iteminfo.BaseInformation.ConquerPointsWorth > obtined_points)
                                                    {
                                                        uint add_cps = 0;
                                                        add_cps = (uint)(iteminfo.BaseInformation.ConquerPointsWorth - obtined_points);
                                                        if (add_cps < client.Entity.ConquerPoints)
                                                        {
                                                            client.Entity.ConquerPoints -= (uint)add_cps;
                                                            foreach (uint key in amount.Keys)
                                                            {
                                                                if (client.Inventory.ContainsUID(key))
                                                                    client.Inventory.Remove(key, PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                            }
                                                            client.Inventory.Add(ItemAdd, 0, 1);

                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (uint key in amount.Keys)
                                                        {
                                                            if (client.Inventory.ContainsUID(key))
                                                                client.Inventory.Remove(key, PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                        }
                                                        client.Inventory.Add(ItemAdd, 0, 1);

                                                    }
                                                }
                                                break;
                                            }
                                        case 52:
                                            {
                                                var item = Database.ConquerItemTable.LoadItem(usage.UID);
                                                item.Mode = PhoenixProject.Game.Enums.ItemMode.ChatItem;
                                                item.Send(client);
                                                break;
                                            }
                                        case 41:
                                            {
                                                // var item = Database.ConquerItemTable.LoadItem(usage.UID);
                                                usage.dwParam = 1;
                                                client.Send(usage);
                                                break;
                                            }
                                        case ItemUsage.SwitchEquipsBack:
                                        case ItemUsage.SwitchEquips:
                                            {
                                                client.AlternateEquipment = usage.ID == ItemUsage.SwitchEquips;
                                                if (usage.ID == 45)
                                                {
                                                    ClientEquip equips = new ClientEquip(client);
                                                    client.Send(equips);
                                                    client.Equipment.UpdateEntityPacket2();

                                                    client.LoadItemStats2(client.Entity);
                                                    client.CalculateStatBonus();
                                                    client.CalculateHPBonus();
                                                    client.Send(WindowStats(client));
                                                }
                                                else
                                                {
                                                    ClientEquip equips = new ClientEquip();
                                                    equips.DoEquips(client);
                                                    client.Send(equips);
                                                    client.Equipment.UpdateEntityPacket();

                                                    client.LoadItemStats(client.Entity);
                                                    client.CalculateStatBonus();
                                                    client.CalculateHPBonus();
                                                    client.Send(WindowStats(client));
                                                }
                                                usage.dwParam = 1;
                                                client.Send(usage);
                                                break;
                                            }
                                        case ItemUsage.ArrowReload:
                                            {
                                                ReloadArrows(client.Equipment.TryGetItem(ConquerItem.LeftWeapon), client);
                                                break;
                                            }
                                        case ItemUsage.ShowBoothItems:
                                            {
                                                ShowBoothItems(usage, client);
                                                break;
                                            }
                                        case ItemUsage.AddItemOnBoothForSilvers:
                                        case ItemUsage.AddItemOnBoothForConquerPoints:
                                            {
                                                AddItemOnBooth(usage, client);
                                                break;
                                            }
                                        case ItemUsage.BuyFromBooth:
                                            {
                                                BuyFromBooth(usage, client);
                                                break;
                                            }
                                        case ItemUsage.RemoveItemFromBooth:
                                            {
                                                RemoveItemFromBooth(usage, client);
                                                break;
                                            }
                                        case ItemUsage.EquipItem:
                                            {

                                                EquipItem(usage, client);

                                                break;
                                            }
                                        case ItemUsage.UnequipItem:
                                            {

                                                UnequipItem(usage, client);

                                                break;
                                            }
                                        case ItemUsage.BuyFromNPC:
                                            {
                                                HandleBuyFromNPC(usage, client);
                                                break;
                                            }
                                        case ItemUsage.SellToNPC:
                                            {
                                                HandleSellToNPC(usage, client);
                                                break;
                                            }
                                        case ItemUsage.Repair:
                                            {
                                                HandleRepair(usage, client);
                                                break;
                                            }
                                        case ItemUsage.MeteorUpgrade:
                                        case ItemUsage.DragonBallUpgrade:
                                            {
                                                UpgradeItem(usage, client);
                                                break;
                                            }
                                        case ItemUsage.Ping:
                                            {
                                                if (Time32.Now < client.LastPing.AddSeconds(2))
                                                {
                                                    client.PingCount++;
                                                    if (client.PingCount == 40)
                                                    {
                                                        client.Send(new Message("Speed hack detected!", System.Drawing.Color.BlanchedAlmond, Message.TopLeft));
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                }



                                                client.LastPingT = client.LastPing;
                                                client.LastPing = Time32.Now;

                                                if (client.LastPing > client.LastPingT.AddSeconds(2))
                                                    client.PingCount = 0;
                                                usage.TimeStamp += 200;
                                                client.Send(ReturnFinal(packet));
                                                client.Send(usage);

                                                break;
                                            }
                                        case ItemUsage.ViewWarehouse:
                                            {
                                                usage.dwParam = client.MoneySave;
                                                client.Send(usage);
                                                break;
                                            }
                                        case ItemUsage.WarehouseDeposit:
                                            {
                                                if (client.Entity.Money >= usage.dwParam)
                                                {
                                                    client.Entity.Money -= usage.dwParam;
                                                    client.MoneySave += usage.dwParam;
                                                }
                                                break;
                                            }
                                        case ItemUsage.WarehouseWithdraw:
                                            {
                                                if (client.MoneySave >= usage.dwParam)
                                                {
                                                    client.Entity.Money += usage.dwParam;
                                                    client.MoneySave -= usage.dwParam;
                                                }
                                                break;
                                            }
                                        case ItemUsage.DropItem:
                                            {
                                                DropItem(usage, client);
                                                break;
                                            }
                                        case ItemUsage.DropMoney:
                                            {
                                                DropMoney(usage, client);
                                                break;
                                            }
                                        case ItemUsage.Enchant:
                                            {
                                                EnchantItem(usage, client);
                                                break;
                                            }
                                        case ItemUsage.SocketTalismanWithItem:
                                            {
                                                SocketTalismanWithItem(usage, client);
                                                break;
                                            }
                                        case ItemUsage.SocketTalismanWithCPs:
                                            {
                                                SocketTalismanWithCPs(usage, client);
                                                break;
                                            }
                                        case ItemUsage.RedeemGear:
                                            {
                                                var item = client.DeatinedItem[usage.UID];
                                                if (item != null)
                                                {
                                                    if (DateTime.Now > item.Date.AddDays(7))
                                                    {
                                                        client.Send(new Message("This item is expired!", System.Drawing.Color.Red, Message.TopLeft));

                                                        return;
                                                    }
                                                    if (client.Entity.ConquerPoints >= item.ConquerPointsCost)
                                                    {
                                                        client.Entity.ConquerPoints -= item.ConquerPointsCost;
                                                        Database.EntityTable.UpdateCps(client);

                                                        usage.dwParam = client.Entity.UID;
                                                        usage.dwExtraInfo3 = item.ConquerPointsCost;
                                                        client.Send(usage);

                                                        client.Inventory.Add(item.Item, PhoenixProject.Game.Enums.ItemUse.Add);

                                                        Database.ClaimItemTable.Redeem(usage.UID, client);
                                                        Database.DetainedItemTable.Claim(usage.UID, client);
                                                        client.DeatinedItem.Remove(item.UID);

                                                        if (ServerBase.Kernel.GamePool.ContainsKey(item.GainerUID))
                                                        {
                                                            GameState pClient;
                                                            if (ServerBase.Kernel.GamePool.TryGetValue(item.GainerUID, out pClient))
                                                            {
                                                                if (pClient.Entity != null)
                                                                {
                                                                    pClient.ClaimableItem[item.UID].OwnerUID = 500;
                                                                    pClient.ClaimableItem[item.UID].MakeItReadyToClaim();
                                                                    usage.dwParam = pClient.Entity.UID;
                                                                    usage.ID = ItemUsage.ClaimGear;
                                                                    pClient.Send(usage);
                                                                    pClient.ClaimableItem[item.UID].Send(pClient);
                                                                }
                                                            }
                                                        }

                                                        Message message = new Message(" " + client.Entity.Name + " has redeemed his Gear and Pay " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                        ServerBase.Kernel.SendWorldMessage(message, ServerBase.Kernel.GamePool.Values);
                                                    }
                                                }
                                                else
                                                {
                                                    client.Send(new Message("The item you want to redeem has already been redeemed.", System.Drawing.Color.Red, Message.TopLeft));
                                                }
                                                break;
                                            }
                                        case ItemUsage.ClaimGear:
                                            {
                                                // Console.WriteLine(" usage " + usage.UID + "");
                                                var item = client.ClaimableItem[usage.UID];
                                                // Console.WriteLine(" usage i  " + item.UID + "");
                                                if (item != null)
                                                {
                                                    if (item.Bound)
                                                    {
                                                        client.Send(new Message("Unnclaimable item!", System.Drawing.Color.Red, Message.TopLeft));
                                                        return;
                                                    }
                                                    if (DateTime.Now < item.Date.AddDays(7) && item.OwnerUID != 500)
                                                    {
                                                        client.Send(new Message("This item is not expired. You cannot claim it yet!", System.Drawing.Color.Red, Message.TopLeft));
                                                        return;
                                                    }
                                                    if (item.OwnerUID == 500)
                                                        client.Entity.ConquerPoints += item.ConquerPointsCost;
                                                    else
                                                    {
                                                        client.Inventory.Add(item.Item, PhoenixProject.Game.Enums.ItemUse.Move);
                                                        Message message = new Message("Thank you for arresting " + item.OwnerName + " , " + item.GainerName + ". The arrested one has redeemed his items and you have received a great deal of ConquerPoints as reward. Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                        ServerBase.Kernel.SendWorldMessage(message, ServerBase.Kernel.GamePool.Values);
                                                    }
                                                    Database.ClaimItemTable.Claim(usage.UID, client);
                                                    client.ClaimableItem.Remove(item.UID);

                                                    usage.dwParam = client.Entity.UID;
                                                    usage.dwExtraInfo3 = item.ConquerPointsCost;
                                                    //Database.EntityTable.UpdateCps(client);
                                                    client.Send(usage);
                                                    Message message2 = new Message("Thank you for arresting red/black name players " + client.Entity.Name + " has recived " + item.ConquerPointsCost + " CPS . Congratulations!", System.Drawing.Color.Wheat, Message.Talk);
                                                    ServerBase.Kernel.SendWorldMessage(message2, ServerBase.Kernel.GamePool.Values);
                                                }
                                                else
                                                {
                                                    client.Send(new Message("The item you want to claim has already been claimed.", System.Drawing.Color.Red, Message.TopLeft));
                                                }
                                                break;
                                            }
                                        case 43:
                                            {
                                                uint UID = BitConverter.ToUInt32(packet, 4);
                                                if (packet[20] == 1)
                                                {
                                                    if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, 84)))//76
                                                    {
                                                        Interfaces.IConquerItem item = null;
                                                        if (client.Inventory.TryGetItem(UID, out item))
                                                        {
                                                            UInt32 iType = item.ID / 1000;
                                                            Positions pos = GetPositionFromID(item.ID);
                                                            if (pos == Positions.Garment)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.RightAccessory)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.LeftAccessory)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.Bottle)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.Steed)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.SteedArmor)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.SteedTalisman)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.AttackTalisman)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (pos == Positions.DefenceTalisman)
                                                            {
                                                                client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                                client.Account.Savekimo();
                                                                client.Disconnect();
                                                                return;
                                                            }
                                                            if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                            {
                                                                if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                {
                                                                    if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                        item.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                                    client.Inventory.Remove(BitConverter.ToUInt32(packet, 84), PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                                    item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                                    item.Send(client);
                                                                    usage.dwParam = 1;
                                                                    client.LoadItemStats(client.Entity);
                                                                    client.CalculateStatBonus();
                                                                    client.CalculateHPBonus();
                                                                    Database.ConquerItemTable.UpdateSockets(item);
                                                                }
                                                            }
                                                            else if (item.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                            {
                                                                uint rand = (uint)PhoenixProject.ServerBase.Kernel.Random.Next(1, 700);
                                                                if (rand > 320)
                                                                // if (PhoenixProject.ServerBase.Kernel.PercentSuccess(30))
                                                                {
                                                                    if (item.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                        item.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                                    client.Inventory.Remove(BitConverter.ToUInt32(packet, 84), PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                                    item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                                    item.Send(client);
                                                                    usage.dwParam = 1;
                                                                    client.LoadItemStats(client.Entity);
                                                                    client.CalculateStatBonus();
                                                                    client.CalculateHPBonus();
                                                                    Database.ConquerItemTable.UpdateSockets(item);
                                                                }
                                                                else
                                                                {
                                                                    usage.dwParam = 0;
                                                                    client.Inventory.Add(1200006, 0, 1);
                                                                    client.Inventory.Remove(BitConverter.ToUInt32(packet, 84), PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                                }
                                                            }
                                                            /*&  }
                                                              else
                                                              {
                                                                  if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                      item.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                                  client.Inventory.Remove(BitConverter.ToUInt32(packet, 80), PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                                  item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                                  item.Send(client);
                                                                  client.LoadItemStats(item);
                                                                  Database.ConquerItemTable.UpdateItem(item, client);
                                                              }*/
                                                        }
                                                    }
                                                }
                                                if (packet[20] == 5)
                                                {
                                                    Interfaces.IConquerItem item = null;
                                                    if (client.Inventory.TryGetItem(UID, out item))
                                                    {
                                                        Dictionary<uint, uint> dbs = new Dictionary<uint, uint>();//packet[20]);
                                                        for (ushort i = 84; i < 84 + 4 * packet[20]; i += 4)
                                                        {
                                                            if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                            {
                                                                dbs.Add(BitConverter.ToUInt32(packet, i), i);
                                                            }
                                                        }

                                                        if (client.Inventory.Contains(1088000, 5))
                                                        {
                                                            if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                return;
                                                            if (item.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                item.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                            foreach (uint key in dbs.Keys)
                                                            {
                                                                if (client.Inventory.ContainsUID(key))
                                                                    client.Inventory.Remove(key, PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                            }
                                                            usage.dwParam = 1;
                                                            item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                            item.Send(client);
                                                            client.LoadItemStats(client.Entity);
                                                            client.CalculateStatBonus();
                                                            client.CalculateHPBonus();
                                                            Database.ConquerItemTable.UpdateSockets(item);
                                                        }
                                                    }
                                                }
                                                if (packet[20] == 7)
                                                {
                                                    Interfaces.IConquerItem item = null;
                                                    if (client.Inventory.TryGetItem(UID, out item))
                                                    {
                                                        if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                            return;

                                                        Dictionary<uint, uint> drill = new Dictionary<uint, uint>();//packet[20]);
                                                        for (ushort i = 84; i < 84 + 4 * packet[20]; i += 4)
                                                        {
                                                            if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                            {
                                                                drill.Add(BitConverter.ToUInt32(packet, i), i);
                                                            }
                                                        }

                                                        if (client.Inventory.Contains(1200006, 7))
                                                        {

                                                            if (item.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                item.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                            foreach (uint key in drill.Keys)
                                                            {
                                                                if (client.Inventory.ContainsUID(key))
                                                                    client.Inventory.Remove(key, PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                            }
                                                            usage.dwParam = 1;
                                                            item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                            item.Send(client);
                                                            client.LoadItemStats(client.Entity);
                                                            client.CalculateStatBonus();
                                                            client.CalculateHPBonus();
                                                            Database.ConquerItemTable.UpdateSockets(item);
                                                        }
                                                    }
                                                }
                                                if (packet[20] == 12)
                                                {
                                                    Interfaces.IConquerItem item = null;
                                                    if (client.Inventory.TryGetItem(UID, out item))
                                                    {
                                                        Dictionary<uint, uint> dbs = new Dictionary<uint, uint>();//packet[20]);
                                                        for (ushort i = 84; i < 84 + 4 * packet[20]; i += 4)
                                                        {
                                                            if (client.Inventory.ContainsUID(BitConverter.ToUInt32(packet, i)))
                                                            {
                                                                dbs.Add(BitConverter.ToUInt32(packet, i), i);
                                                            }
                                                        }

                                                        if (client.Inventory.Contains(1088000, 12))
                                                        {
                                                            if (item.SocketOne != PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                return;
                                                            if (item.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                                                                item.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                            foreach (uint key in dbs.Keys)
                                                            {
                                                                if (client.Inventory.ContainsUID(key))
                                                                    client.Inventory.Remove(key, PhoenixProject.Game.Enums.ItemUse.Remove, true);
                                                            }
                                                            usage.dwParam = 1;
                                                            //client.Inventory.Remove(DragonBall, 12);
                                                            item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                            item.Send(client);
                                                            client.LoadItemStats(client.Entity);
                                                            client.CalculateStatBonus();
                                                            client.CalculateHPBonus();
                                                            Database.ConquerItemTable.UpdateSockets(item);
                                                        }
                                                    }

                                                }
                                                client.Send(packet);
                                                break;
                                            }
                                        case 40:
                                            {
                                                uint ItemAdd = (uint)((packet[4] & 0xFF) | ((packet[5] & 0xFF) << 8) | ((packet[6] & 0xFF) << 16) | ((packet[7] & 0xFF) << 24));

                                                Interfaces.IConquerItem item_new = null;
                                                if (client.Inventory.TryGetItem(ItemAdd, out item_new))
                                                {
                                                    UInt32 iType = item_new.ID / 1000;
                                                    Positions pos = GetPositionFromID(item_new.ID);
                                                    if (pos == Positions.Garment)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.RightAccessory)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.LeftAccessory)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.Bottle)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.Steed)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.SteedArmor)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.SteedTalisman)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.AttackTalisman)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (pos == Positions.DefenceTalisman)
                                                    {
                                                        client.Account.State = Database.AccountTable.AccountState.Cheat;
                                                        client.Account.Savekimo();
                                                        client.Disconnect();
                                                        return;
                                                    }
                                                    if (item_new.Bless == 7)
                                                        return;

                                                    Queue<uint> amount = new Queue<uint>(packet[20]);

                                                    for (ushort i = 84; i < 84 + 4 * packet[20]; i += 4)
                                                    {
                                                        if (client.Inventory.ContainsUID((uint)((packet[i] & 0xFF) | ((packet[(byte)(i + 1)] & 0xFF) << 8) | ((packet[(byte)(i + 2)] & 0xFF) << 16) | ((packet[(byte)(i + 3)] & 0xFF) << 24))))
                                                            amount.Enqueue((uint)((packet[i] & 0xFF) | ((packet[(byte)(i + 1)] & 0xFF) << 8) | ((packet[(byte)(i + 2)] & 0xFF) << 16) | ((packet[(byte)(i + 3)] & 0xFF) << 24)));
                                                        else
                                                            return;
                                                    }


                                                    byte oldbless = item_new.Bless;
                                                    if (item_new.Bless == 0 && amount.Count == 5)
                                                        item_new.Bless = 1;
                                                    else if (item_new.Bless == 1 && amount.Count == 1)
                                                        item_new.Bless = 3;
                                                    else if (item_new.Bless == 3 && amount.Count == 3)
                                                        item_new.Bless = 5;
                                                    else if (item_new.Bless == 5 && amount.Count == 5)
                                                        item_new.Bless = 7;
                                                    if (oldbless == item_new.Bless)
                                                        return;

                                                    while (amount.Count != 0)
                                                        client.Inventory.Remove(amount.Dequeue(), PhoenixProject.Game.Enums.ItemUse.Remove, true);

                                                    item_new.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                    item_new.Send(client);
                                                    usage.dwParam = 1;
                                                    Database.ConquerItemTable.UpdateBless(item_new);
                                                }
                                                client.Send(packet);
                                                break;
                                            }
                                        case ItemUsage.GemCompose:
                                            {
                                                #region GemCompose
                                                UInt32 Ident = usage.UID;
                                                client.Inventory.Remove(Ident, 15);
                                                client.Inventory.Add(Ident + 1, 0, 1);
                                                usage.dwParam = 1;
                                                client.Send(usage);
                                                #endregion
                                                break;
                                            }
                                        case ItemUsage.ToristSuper:
                                            {
                                                #region GemCompose
                                                if (client.Entity.Money >= 100000)
                                                {
                                                    client.Inventory.Remove(700002, 1);
                                                    client.Inventory.Remove(700012, 1);
                                                    client.Inventory.Remove(700022, 1);
                                                    client.Inventory.Remove(700032, 1);
                                                    client.Inventory.Remove(700042, 1);
                                                    client.Inventory.Remove(700052, 1);
                                                    client.Inventory.Remove(700062, 1);
                                                    client.Entity.Money -= 100000;
                                                    client.Inventory.Add(700072, 0, 1);

                                                    usage.dwParam = 1;
                                                    client.Send(usage);
                                                }
                                                usage.dwParam = 0;
                                                client.Send(usage);
                                                #endregion
                                                break;
                                            }
                                        case ItemUsage.SplitStack:
                                            {
                                                Interfaces.IConquerItem mainItem = null;
                                                Interfaces.IConquerItem minorItem = new ConquerItem(true);
                                                Database.ConquerItemInformation infos = null;
                                                minorItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                                if (client.Inventory.TryGetItem(usage.UID, out mainItem))
                                                {
                                                    infos = new PhoenixProject.Database.ConquerItemInformation(mainItem.ID, 0);
                                                    if (mainItem.StackSize > 1 && mainItem.StackSize <= infos.BaseInformation.StackSize)
                                                    {
                                                        if (client.Inventory.Count < 40)
                                                        {
                                                            client.SpiltStack = false;
                                                            ushort Amount = (ushort)usage.dwParam;

                                                            mainItem.StackSize -= Amount;
                                                            mainItem.Mode = Game.Enums.ItemMode.Update;
                                                            mainItem.Send(client);
                                                            mainItem.Mode = Game.Enums.ItemMode.Default;
                                                            Database.ConquerItemTable.UpdateStack(mainItem);
                                                            minorItem.ID = mainItem.ID;
                                                            minorItem.StackSize += Amount;
                                                            minorItem.Durability = mainItem.Durability;
                                                            client.Inventory.Add(minorItem, Game.Enums.ItemUse.CreateAndAdd);

                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                        case ItemUsage.MergeStackableItems:
                                            {
                                                Interfaces.IConquerItem mainItem = null;
                                                Interfaces.IConquerItem minorItem = new ConquerItem(true);
                                                Database.ConquerItemInformation infos = null;
                                                minorItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                                if (client.Inventory.TryGetItem(usage.UID, out mainItem) && client.Inventory.TryGetItem(usage.dwParam, out minorItem))
                                                {
                                                    if (mainItem.ID == minorItem.ID)
                                                    {
                                                        infos = new PhoenixProject.Database.ConquerItemInformation(mainItem.ID, 0);
                                                        if (mainItem.StackSize < 1)
                                                            mainItem.StackSize = 1;
                                                        if (minorItem.StackSize < 1)
                                                            minorItem.StackSize = 1;

                                                        if ((mainItem.StackSize + minorItem.StackSize) <= infos.BaseInformation.StackSize)
                                                        {
                                                            mainItem.StackSize += minorItem.StackSize;
                                                            mainItem.Mode = Game.Enums.ItemMode.Update;
                                                            mainItem.Send(client);
                                                            mainItem.Mode = Game.Enums.ItemMode.Default;
                                                            Database.ConquerItemTable.UpdateStack(mainItem);

                                                            client.Inventory.Remove(minorItem, Game.Enums.ItemUse.Remove);
                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                        case 34:
                                            {
                                                break;
                                            }
                                        case 54://downgrade
                                            {
                                                Interfaces.IConquerItem item = null;
                                                Interfaces.IConquerItem minorItem = new ConquerItem(true);
                                                //Database.ConquerItemInformation infos = null;
                                                // uint newid = infos.LowestID(infos.BaseInformation.Level);

                                                //minorItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                                if (client.Inventory.TryGetItem(usage.UID, out item) && client.Entity.ConquerPoints >= 54)
                                                {
                                                    Database.ConquerItemInformation cii = new PhoenixProject.Database.ConquerItemInformation(item.ID, item.Plus);


                                                    uint kimzz = 0;
                                                    kimzz = item.ID;

                                                Kimozzz:
                                                    uint kimo = kimzz - 10;
                                                    uint kimo2 = kimzz - 20;
                                                    uint kimo3 = kimzz - 30;
                                                    ushort postion = ItemPosition(kimo);
                                                    ushort postion2 = ItemPosition(kimo2);
                                                    ushort postion3 = ItemPosition(kimo3);
                                                    Database.ConquerItemInformation cii1 = new PhoenixProject.Database.ConquerItemInformation(kimo, 0);
                                                    Database.ConquerItemInformation cii2 = new PhoenixProject.Database.ConquerItemInformation(kimo2, 0);
                                                    Database.ConquerItemInformation cii3 = new PhoenixProject.Database.ConquerItemInformation(kimo3, 0);

                                                    if (Database.ConquerItemInformation.BaseInformations.ContainsKey(kimo))
                                                    {
                                                        if (cii1.BaseInformation.Level >= 10 && postion != 4 && postion != 5)
                                                        {
                                                            kimzz = kimo;
                                                            goto Kimozzz;
                                                        }
                                                        else
                                                        {
                                                            if (cii1.BaseInformation.Level > 10)
                                                            {
                                                                kimzz = kimo;
                                                                goto Kimozzz;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (Database.ConquerItemInformation.BaseInformations.ContainsKey(kimo2))
                                                        {
                                                            if (cii2.BaseInformation.Level >= 10 && postion2 != 4 && postion2 != 5)
                                                            {
                                                                kimzz = kimo2;
                                                                goto Kimozzz;
                                                            }
                                                            else
                                                            {
                                                                if (cii2.BaseInformation.Level > 10)
                                                                {
                                                                    kimzz = kimo2;
                                                                    goto Kimozzz;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Database.ConquerItemInformation.BaseInformations.ContainsKey(kimo3))
                                                            {
                                                                if (cii3.BaseInformation.Level >= 10 && postion3 != 4 && postion3 != 5)
                                                                {
                                                                    kimzz = kimo3;
                                                                    goto Kimozzz;
                                                                }
                                                                else
                                                                {
                                                                    if (cii3.BaseInformation.Level > 10)
                                                                    {
                                                                        kimzz = kimo3;
                                                                        goto Kimozzz;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {

                                                                // return;
                                                            }
                                                        }
                                                    }


                                                    item.ID = kimzz;

                                                    PhoenixProject.Database.ConquerItemTable.UpdateItemID(item, client);
                                                    item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                    item.Send(client);
                                                    client.Entity.ConquerPoints -= 54;
                                                }
                                                else
                                                {
                                                    usage.dwParam = 2;
                                                }
                                                break;
                                            }
                                        default:
                                            {
                                                Console.WriteLine("Unhandled item usage type : " + usage.ID);
                                                break;
                                            }
                                    }
                                }
                                break;
                            }
                        #endregion
                        #region String (1015)
                        case 1015:
                            {
                                if (client.Action == 2)
                                {
                                    _String str2 = new _String(false);
                                    str2.Deserialize(packet);
                                    if ((str2.Type == 0x1a) && (str2.Texts.Count > 0))
                                    {
                                        IEnumerator enumerator = Kernel.GamePool.Values.GetEnumerator();
                                        enumerator.MoveNext();
                                        int count = Kernel.GamePool.Count;
                                        for (uint i = 0; i < count; i++)
                                        {
                                            if (i >= count)
                                            {
                                                break;
                                            }
                                            current = enumerator.Current as GameState;
                                            if (current.Entity.Name == str2.Texts[0])
                                            {
                                                string str3 = "";
                                                str3 = ((str3 + current.Entity.UID + " ") + current.Entity.Level + " ") + current.Entity.BattlePower + " #";
                                                if (current.Entity.GuildID != 0)
                                                {
                                                    str3 = str3 + current.Guild.Name + " fNone# ";
                                                }
                                                else
                                                {
                                                    str3 = str3 + "None fNone# ";
                                                }
                                                str3 = (str3 + current.Entity.Spouse + " ") + ((byte)current.Entity.NobilityRank) + " ";
                                                if ((current.Entity.Body % 10) < 3)
                                                {
                                                    str3 = str3 + "1";
                                                }
                                                else
                                                {
                                                    str3 = str3 + "0";
                                                }
                                                str2.Texts.Add(str3);
                                                client.Send(str2);
                                            }
                                            enumerator.MoveNext();
                                        }
                                    }
                                    break;
                                }
                            }
                            break;
                        #endregion
                        #region KnownPersons (1019)
                        case 1019:
                            {
                                KnownPersons knownP = new KnownPersons(false);
                                knownP.Deserialize(packet);
                                switch (knownP.Type)
                                {
                                    case KnownPersons.RequestFriendship:
                                        {
                                            AddFriend(knownP, client);
                                            break;
                                        }
                                    case KnownPersons.RemovePerson:
                                        {
                                            RemoveFriend(knownP, client);
                                            break;
                                        }
                                    case KnownPersons.RemoveEnemy:
                                        {
                                            RemoveEnemy(knownP, client);
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region Vote /Attack
                        case 1022:
                            {

                                if (client.Action != 2)
                                    return;
                                uint dmg = BitConverter.ToUInt32(packet, 24);
                                uint AttackType = BitConverter.ToUInt32(packet, 20);
                                uint AttackType2 = BitConverter.ToUInt32(packet, 26);


                                switch (AttackType)
                                {
                                    case 36:
                                        {
                                            GamePackets.Attack attack2 = new Attack(false);
                                            attack2.Deserialize(packet);
                                            CloudSaintsJar.Execute(client, attack2);
                                            break;
                                        }
                                    case 39:
                                        {
                                            if (!Kernel.VotePool.ContainsKey(client.Account.IP))
                                            {
                                                if (!Kernel.VotePoolUid.ContainsKey(client.Entity.UID))
                                                {
                                                    client.Entity.ConquerPoints += Database.rates.VotePrize;
                                                    PhoenixProject.Game.ConquerStructures.PlayersVot Vot = new PhoenixProject.Game.ConquerStructures.PlayersVot();
                                                    Vot.AdressIp = client.Account.IP;
                                                    Vot.Uid = client.Entity.UID;
                                                    Kernel.VotePool.Add(Vot.AdressIp, Vot);
                                                    Kernel.VotePoolUid.Add(Vot.Uid, Vot);
                                                    Database.EntityTable.SavePlayersVot(Vot);
                                                    client.Send(new Message("" + PhoenixProject.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));
                                                }
                                                else
                                                {
                                                    client.Send(new Message("" + PhoenixProject.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));
                                                }
                                            }
                                            else
                                            {
                                                client.Send(new Message("" + PhoenixProject.Database.rates.VoteUrl + "", System.Drawing.Color.Red, Network.GamePackets.Message.Website));

                                            }
                                            break;
                                        }
                                    default:
                                        {
                                            if (client.Entity.MapID == 8880 || client.Entity.MapID == 8881) return;
                                            GamePackets.Attack attack = new Attack(false);
                                            attack.Deserialize(packet);
                                            Attack(attack, client);
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region ChiSystem
                        case 2533:
                            {



                                ChiSystem2.Handle(packet, client);
                                break;
                            }
                        #endregion
                        #region CountryFlag
                        case 2430:
                            {
                                KimoCountryFlag kimo = new KimoCountryFlag(false);
                                kimo.Deserialize(packet);
                                client.Entity.CountryFlag = kimo.FlagID;
                                kimo.UID = client.Entity.UID;
                                client.SendScreen(kimo, true);
                                break;
                            }
                        #endregion
                        #region Teams (1023)
                        case 1023:
                            {
                                if (client.Action != 2)
                                    return;
                                Team teamPacket = new Team();
                                teamPacket.Deserialize(packet);
                                switch (teamPacket.Type)
                                {
                                    case Team.Create: CreateTeam(teamPacket, client); break;
                                    case Team.AcceptJoinRequest: AcceptRequestToJoinTeam(teamPacket, client); break;
                                    case Team.AcceptInvitation: AcceptInviteToJoinTeam(teamPacket, client); break;
                                    case Team.InviteRequest: SendInviteToJoinTeam(teamPacket, client); break;
                                    case Team.JoinRequest: SendRequestJoinToTeam(teamPacket, client); break;
                                    case Team.ExitTeam: LeaveTeam(teamPacket, client); break;
                                    case Team.Dismiss: DismissTeam(teamPacket, client); break;
                                    case Team.Kick: KickFromTeam(teamPacket, client); break;
                                    case Team.ForbidJoining:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.ForbidJoin = true;
                                                    Teammate.Send(teamPacket);
                                                }

                                            break;
                                        }
                                    case Team.UnforbidJoining:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.ForbidJoin = false;
                                                    Teammate.Send(teamPacket);
                                                }

                                            break;
                                        }
                                    case Team.LootMoneyOff:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.PickupMoney = false;
                                                    Teammate.Send(teamPacket);
                                                }
                                            break;
                                        }
                                    case Team.LootMoneyOn:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.PickupMoney = true;
                                                    Teammate.Send(teamPacket);
                                                }
                                            break;
                                        }
                                    case Team.LootItemsOn:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.PickupItems = true;
                                                    Teammate.Send(teamPacket);
                                                }
                                            break;
                                        }
                                    case Team.LootItemsOff:
                                        {
                                            foreach (Client.GameState Teammate in client.Team.Teammates)
                                                if (Teammate != null)
                                                {
                                                    Teammate.Team.PickupItems = false;
                                                    Teammate.Send(teamPacket);
                                                }
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region Atributes Set (1024)
                        case 1024:
                            {
                                if (client.Action != 2)
                                    return;
                                uint AddStr = BitConverter.ToUInt32(packet, 8);
                                uint AddAgi = BitConverter.ToUInt32(packet, 12);
                                uint AddVit = BitConverter.ToUInt32(packet, 16);
                                uint AddSpi = BitConverter.ToUInt32(packet, 20);
                                if (client.Entity.Atributes == 0)
                                    return;

                                uint TotalStatPoints = AddStr + AddAgi + AddVit + AddSpi;

                                if (client.Entity.Atributes >= TotalStatPoints)
                                {
                                    client.Entity.Strength += (ushort)AddStr;
                                    client.Entity.Agility += (ushort)AddAgi;
                                    client.Entity.Vitality += (ushort)AddVit;
                                    client.Entity.Spirit += (ushort)AddSpi;
                                    client.Entity.Atributes -= (ushort)TotalStatPoints;
                                    client.Send(packet);
                                }
                                client.CalculateStatBonus();
                                client.CalculateHPBonus();
                                client.GemAlgorithm();
                                break;
                            }
                        #endregion
                        #region Socketing (1027)
                        case 1027:
                            {
                                EmbedSocket socket = new EmbedSocket(false);
                                socket.Deserialize(packet);
                                SocketItem(socket, client);
                                break;
                            }
                        #endregion
                        #region Character Statistics (1040)
                        case 1040:
                            {
                                uint UID = BitConverter.ToUInt32(packet, 4);
                                Client.GameState Client;
                                if (ServerBase.Kernel.GamePool.TryGetValue(UID, out Client))
                                {
                                    client.Send(WindowStats(Client));
                                }
                                break;
                            }
                        #endregion
                        #region LoginPacket (1052)
                        case 1052:
                            {
                                if (client.Action == 1)
                                {
                                    Connect connect = new Connect();
                                    connect.Deserialize(packet);
                                    AppendConnect(connect, client);
                                }
                                else
                                {
                                    //Console.WriteLine(" yes");
                                    client.Disconnect();
                                    //DoLogin(client);
                                }
                                break;
                            }
                        #endregion
                        #region Trade (1056)

                        case 1056:
                            {
                                if (client.Action != 2)
                                    return;
                                Trade trade = new Trade(false);
                                trade.Deserialize(packet);
                                switch (trade.Type)
                                {
                                    case Trade.Request:
                                        RequestTrade(trade, client);
                                        break;
                                    case Trade.Close:
                                        CloseTrade(trade, client);
                                        break;
                                    case Trade.AddItem:
                                        AddTradeItem(trade, client);
                                        break;
                                    case Trade.SetMoney:
                                        SetTradeMoney(trade, client);
                                        break;
                                    case Trade.SetConquerPoints:
                                        SetTradeConquerPoints(trade, client);
                                        break;
                                    case Trade.Accept:
                                        AcceptTrade(trade, client);
                                        break;
                                }
                                break;
                            }

                        #endregion Trade (1056)
                        #region Floor items (1101)
                        case 1101:
                            {
                                if (client.Action != 2)
                                    return;
                                FloorItem floorItem = new FloorItem(false);
                                floorItem.Deserialize(packet);
                                client.SpiltStack = true;
                                PickupItem(floorItem, client);
                                client.SpiltStack = false;
                                break;
                            }
                        #endregion
                        #region Warehouses (1102)
                        case 1102:
                            {
                                if (client.Action != 2)
                                    return;

                                Warehouse warehousepacket = new Warehouse(false);
                                warehousepacket.Deserialize(packet);
                                switch (warehousepacket.Type)
                                {
                                    case Warehouse.Entire:
                                        {
                                            Game.ConquerStructures.Warehouse wh = client.Warehouses[(PhoenixProject.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                            if (wh == null) return;
                                            byte count = 0;
                                            warehousepacket.Count = 1;
                                            warehousepacket.Type = Warehouse.AddItem;
                                            for (; count < wh.Count; count++)
                                            {
                                                warehousepacket.Append(wh.Objects[count]);
                                                client.Send(warehousepacket);
                                            }
                                            break;
                                        }
                                    case Warehouse.AddItem:
                                        {
                                            if (client.Booth != null)
                                            {
                                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you cant add items into your warehouse while you in Booth");
                                                npc.OptionID = 255;
                                                client.Send(npc.ToArray());
                                                return;
                                            }
                                            Game.ConquerStructures.Warehouse wh = client.Warehouses[(PhoenixProject.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                            if (wh == null) return;
                                            Interfaces.IConquerItem item = null;
                                            if (client.Inventory.TryGetItem(warehousepacket.UID, out item))
                                            {
                                                if (item.ID >= 729960 && item.ID <= 729970)
                                                    return;
                                                if (item.ID == 750000)
                                                    return;
                                                if (!ConquerItem.isRune(item.UID))
                                                {
                                                    if (wh.Add(item))
                                                    {
                                                        warehousepacket.UID = 0;
                                                        warehousepacket.Count = 1;
                                                        warehousepacket.Append(item);
                                                        client.Send(warehousepacket);
                                                        return;
                                                    }
                                                }
                                                else client.Send(new Message("You can not store Flame Stone Rune's in Warehouse", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            break;
                                        }
                                    case Warehouse.RemoveItem:
                                        {
                                            Game.ConquerStructures.Warehouse wh = client.Warehouses[(PhoenixProject.Game.ConquerStructures.Warehouse.WarehouseID)warehousepacket.NpcID];
                                            if (wh == null) return;
                                            if (wh.ContainsUID(warehousepacket.UID))
                                            {
                                                if (wh.Remove(warehousepacket.UID))
                                                {
                                                    client.Send(warehousepacket);
                                                    return;
                                                }
                                            }
                                            break;
                                        }
                                    default:
                                        {
                                            Console.WriteLine("Unknown type: " + warehousepacket.Type);
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region GuildCommands (1107)
                        case 1107:
                            {
                                GuildCommand command = new GuildCommand(false);
                                command.Deserialize(packet);
                                switch (command.Type)
                                {
                                    case GuildCommand.Neutral1:
                                    case GuildCommand.Neutral2:
                                        {
                                            string name = System.Text.Encoding.UTF7.GetString(packet, 26, packet[25]);
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    client.Guild.RemoveAlly(name);
                                                    foreach (var guild in ServerBase.Kernel.Guilds.Values)
                                                    {
                                                        if (guild.Name == name && client.Guild.Name != name)
                                                        {
                                                            guild.RemoveAlly(client.Guild.Name);
                                                        }
                                                    }
                                                    client.Guild.RemoveEnemy(name);
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.Allied:
                                        {
                                            string name = System.Text.Encoding.UTF8.GetString(packet, 26, packet[25]);
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    AllyGuilds(name, client);
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.Enemied:
                                        {
                                            string name = System.Text.Encoding.UTF7.GetString(packet, 26, packet[25]);
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    client.Guild.AddEnemy(name);
                                                }
                                            }
                                            break;
                                        }
                                    default:
                                        {
                                            client.Send(packet);
                                            break;
                                        }
                                    case GuildCommand.Bulletin:
                                        {
                                            string message = System.Text.Encoding.UTF7.GetString(packet, 26, packet[25]);
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    client.Guild.Bulletin = message;
                                                    client.Guild.SendGuild(client);
                                                    Database.GuildTable.UpdateBulletin(client.Guild, client.Guild.Bulletin);
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.DonateSilvers:
                                        {
                                            if (client.Guild != null)
                                            {
                                                if (client.Entity.Money >= command.dwParam)
                                                {
                                                    client.Guild.SilverFund += command.dwParam;
                                                    Database.GuildTable.SaveFunds(client.Guild);
                                                    client.AsMember.SilverDonation += command.dwParam;
                                                    client.Entity.Money -= command.dwParam;
                                                    client.Guild.SendGuild(client);
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.DonateConquerPoints:
                                        {
                                            if (client.Guild != null)
                                            {
                                                if (client.Entity.ConquerPoints >= command.dwParam)
                                                {
                                                    client.Guild.ConquerPointFund += command.dwParam;
                                                    Database.GuildTable.SaveFunds(client.Guild);
                                                    client.AsMember.ConquerPointDonation += command.dwParam;
                                                    client.Entity.ConquerPoints -= command.dwParam;
                                                    client.Guild.SendGuild(client);
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.Refresh:
                                        {
                                            if (client.AsMember != null)
                                            {
                                                if (client.Guild != null)
                                                    client.Guild.SendGuild(client);
                                            }
                                            break;
                                        }
                                    case GuildCommand.Discharge:
                                        {
                                            string name = System.Text.Encoding.UTF7.GetString(packet, 26, packet[25]);
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    var member = client.Guild.GetMemberByName(name);
                                                    if (member != null)
                                                    {
                                                        if (member.ID != client.Entity.UID)
                                                        {
                                                            if (member.Rank == PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                            {
                                                                client.Guild.DeputyLeaderCount--;
                                                                member.Rank = PhoenixProject.Game.Enums.GuildMemberRank.Member;
                                                                if (member.IsOnline)
                                                                {
                                                                    client.Guild.SendGuild(member.Client);
                                                                    member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                                    member.Client.Screen.FullWipe();
                                                                    member.Client.Screen.Reload(null);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.Promote:
                                        {
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    if (client.Guild.Members.ContainsKey(command.dwParam))
                                                    {
                                                        var member = client.Guild.Members[command.dwParam];
                                                        if (member.Rank == PhoenixProject.Game.Enums.GuildMemberRank.Member)
                                                        {
                                                            member.Rank = PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader;
                                                            if (member.IsOnline)
                                                            {
                                                                client.Guild.SendGuild(member.Client);
                                                                member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                                member.Client.Screen.FullWipe();
                                                                member.Client.Screen.Reload(null);
                                                            }
                                                        }
                                                        else if (member.Rank == PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                        {
                                                            member.Rank = PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader;
                                                            if (member.IsOnline)
                                                            {
                                                                client.Guild.SendGuild(member.Client);
                                                                member.Client.Entity.GuildRank = (ushort)member.Rank;
                                                                member.Client.Screen.FullWipe();
                                                                member.Client.Screen.Reload(null);
                                                            }
                                                            client.AsMember.Rank = PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader;
                                                            client.Guild.SendGuild(client);
                                                            client.Entity.GuildRank = (ushort)client.AsMember.Rank;
                                                            client.Screen.FullWipe();
                                                            client.Screen.Reload(null);
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.JoinRequest:
                                        {
                                            if (ServerBase.Kernel.GamePool.ContainsKey(command.dwParam))
                                            {
                                                var Client = ServerBase.Kernel.GamePool[command.dwParam];
                                                if (Client.OnHoldGuildJoin == client.OnHoldGuildJoin && Client.OnHoldGuildJoin != 0)
                                                {
                                                    if (Client.Guild != null)
                                                    {
                                                        if (Client.AsMember.Rank != PhoenixProject.Game.Enums.GuildMemberRank.Member)
                                                        {
                                                            Client.Guild.AddMember(client);
                                                            Client.OnHoldGuildJoin = 0;
                                                            client.OnHoldGuildJoin = 0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (client.AsMember.Rank != PhoenixProject.Game.Enums.GuildMemberRank.Member)
                                                        {
                                                            client.Guild.AddMember(Client);
                                                            Client.OnHoldGuildJoin = 0;
                                                            client.OnHoldGuildJoin = 0;
                                                        }
                                                    }
                                                    return;
                                                }
                                                if (client.Guild == null)
                                                {
                                                    command.dwParam = client.Entity.UID;
                                                    Client.Send(command);
                                                    Client.OnHoldGuildJoin = (uint)new Random().Next();
                                                    client.OnHoldGuildJoin = Client.OnHoldGuildJoin;
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.InviteRequest:
                                        {
                                            if (ServerBase.Kernel.GamePool.ContainsKey(command.dwParam))
                                            {
                                                var Client = ServerBase.Kernel.GamePool[command.dwParam];
                                                if (Client.OnHoldGuildJoin == client.OnHoldGuildJoin && Client.OnHoldGuildJoin != 0)
                                                {
                                                    if (Client.Guild != null)
                                                    {
                                                        if (Client.AsMember.Rank != PhoenixProject.Game.Enums.GuildMemberRank.Member)
                                                        {
                                                            Client.Guild.AddMember(client);
                                                            Client.OnHoldGuildJoin = 0;
                                                            client.OnHoldGuildJoin = 0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (client.AsMember.Rank != PhoenixProject.Game.Enums.GuildMemberRank.Member)
                                                        {
                                                            client.Guild.AddMember(Client);
                                                            Client.OnHoldGuildJoin = 0;
                                                            client.OnHoldGuildJoin = 0;
                                                        }
                                                    }
                                                    return;
                                                }
                                                if (client.Guild != null)
                                                {
                                                    command.dwParam = client.Entity.UID;
                                                    Client.Send(command);
                                                    Client.OnHoldGuildJoin = 0;
                                                    client.OnHoldGuildJoin = Client.OnHoldGuildJoin;
                                                }
                                            }
                                            break;
                                        }
                                    case GuildCommand.Quit:
                                        {
                                            if (client.Guild != null)
                                            {
                                                if (client.AsMember.Rank != PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                {
                                                    client.Guild.ExpelMember(client.Entity.Name, true);
                                                }
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion

                        #region Enlight (1127)
                        case 1127:
                            {
                                Enlight enlight = new Enlight(false);
                                enlight.Deserialize(packet);
                                if (ServerBase.Kernel.GamePool.ContainsKey(enlight.Enlighted))
                                {
                                    var Client = ServerBase.Kernel.GamePool[enlight.Enlighted];

                                    if (enlight.Enlighter == client.Entity.UID && enlight.Enlighted != enlight.Enlighter)
                                    {
                                        if (Client.Entity.ReceivedEnlightenPoints < 5)
                                        {
                                            if (client.Entity.EnlightenPoints >= 100)
                                            {
                                                if (Client.Entity.EnlightmentTime <= 80)
                                                {
                                                    client.Entity.EnlightenPoints -= 100;
                                                    Client.Entity.EnlightmentStamp = Time32.Now;
                                                    Client.IncreaseExperience(Game.Attacking.Calculate.Percent((int)Client.ExpBall, .10F), false);
                                                    Client.SendScreen(packet, true);
                                                    Client.Entity.ReceivedEnlightenPoints++;
                                                    Client.Entity.EnlightmentTime += 20;
                                                    if (client.Entity.EnlightmentTime > 80)
                                                        client.Entity.EnlightmentTime = 100;
                                                    else if (client.Entity.EnlightmentTime > 60)
                                                        client.Entity.EnlightmentTime = 80;
                                                    else if (client.Entity.EnlightmentTime > 40)
                                                        client.Entity.EnlightmentTime = 60;
                                                    else if (client.Entity.EnlightmentTime > 20)
                                                        client.Entity.EnlightmentTime = 40;
                                                    else if (client.Entity.EnlightmentTime > 0)
                                                        client.Entity.EnlightmentTime = 20;
                                                }
                                                else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " yet because he has to wait a few minutes until he can be enlightened again.", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because you don't have enough enlighten points!", System.Drawing.Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You can't enlighten " + Client.Entity.Name + " because he/she was enlightened today five times already!", System.Drawing.Color.Red, Message.TopLeft));
                                    }
                                }
                                break;
                            }
                        #endregion
                        #region QuizShow (2068)
                        case 2068:
                            {
                                try
                                {

                                    byte Answered = (byte)(packet[8] - 1);

                                    int L = Environment.TickCount;
                                    int Now = (L - client.QuizInfo.LastAnswer) / 1000 + 1;
                                    ushort qn = PhoenixProject.Game.ConquerStructures.QuizShow.QuestionNO;
                                    if ((ushort)((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points) > 0)
                                    {
                                        client.QuizInfo.Time += (ushort)Now;
                                        client.QuizInfo.Score += (ushort)((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points);
                                        client.Entity.QuizPoints += (ushort)((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points);
                                        client.Entity.ConquerPoints += (ushort)((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points * 10);
                                        client.Send(new Message("You have won " + ((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points).ToString() + " quiz points and " + ((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points * 10).ToString() + " ConquerPoints", System.Drawing.Color.Red, Message.TopLeft));
                                        uint exp = 1000;
                                        exp = (uint)(exp * ((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points));
                                        client.IncreaseExperience((ulong)exp, false);
                                        Program.kimo3 = Answered;
                                    }
                                    else
                                    {
                                        client.QuizInfo.Time += (ushort)Now;
                                        client.QuizInfo.Score += (ushort)((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points);
                                        uint exp = 1000;
                                        exp = (uint)(exp * ((30 - Now) * PhoenixProject.Game.ConquerStructures.QuizShow.Questions[(ushort)(qn - 1)].Answers[Answered].Points));
                                        client.IncreaseExperience((ulong)exp, false);
                                        client.Send(new Message("Ops Wrong Answer try Google if you dont know www.Google.com!!", System.Drawing.Color.Red, Message.TopLeft));

                                    }
                                    if (client.QuizInfo.Score >= 0)
                                    {
                                        /* int MyPlace = 0;
                                         for (int i = 0; i < 499; i++)
                                         {
                                             if (client.QuizInfo.Score < PhoenixProject.Game.ConquerStructures.QuizShow.Scores[i].Score)
                                             {
                                                 MyPlace++;
                                             }
                                             else
                                             {
                                                 if (client.Entity.UID == PhoenixProject.Game.ConquerStructures.QuizShow.Scores[i].EntityID)
                                                 {
                                                 }
                                                 else
                                                 {
                                                     if (client.QuizInfo.Score == PhoenixProject.Game.ConquerStructures.QuizShow.Scores[i].Score)
                                                     {
                                                         MyPlace++;
                                                     }
                                                 }
                                             }
                                         }*/
                                        if (client.QuizInfo.Score >= Kernel.MainQuiz.Score[0])
                                        {
                                            Kernel.MainQuiz.Name[0] = client.Entity.Name;
                                            Kernel.MainQuiz.Score[0] = client.QuizInfo.Score;
                                            Kernel.MainQuiz.Time[0] = client.QuizInfo.Time;
                                        }
                                        client.Send(new GamePackets.QuizInfo().InfoBuffer(client.QuizInfo.Score, client.QuizInfo.Time, client.QuizInfo.Rank));


                                    }

                                }
                                catch { }
                                break;
                            }
                        #endregion
                        #region NPC Dialog (2031 + 2032)
                        case 2031:
                        case 2032:
                            {
                                if (client.Action != 2)
                                    return;
                                NpcRequest req = new NpcRequest();
                                req.Deserialize(packet);
                                #region CaptureFlag
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 234 && client.Map.BaseID != 700)//CaptureFlag
                                {
                                    client.Entity.Teleport(1002, 384, 348);
                                }
                                #endregion
                                #region DemonCave
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 235 && client.Map.BaseID != 700)//DemonCave
                                {
                                    if (DateTime.Now.Hour == Game.KimoEvents.DemonHour && DateTime.Now.Minute < 5)
                                    {
                                        if (!client.DemonCave)
                                        {
                                            client.DemonCave = true;
                                            client.Entity.Teleport(1, 77, 69);
                                            client.Entity.DemonCave1 = 0;
                                            client.Entity.DemonCave2 = 0;
                                            client.Entity.DemonCave3 = 0;
                                            Data data = new Data(true);
                                            data.ID = Data.OpenCustom;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = 3378;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);
                                        }
                                    }
                                }
                                #endregion
                                #region SkillTeam
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 236 && client.Map.BaseID != 700)//SkillTeamPK
                                {
                                    client.Entity.Teleport(1002, 460, 367);
                                }
                                #endregion
                                #region DonationWar
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 237 && client.Map.BaseID != 700)//dONATION
                                {
                                    client.Entity.Teleport(1002, 428, 392);
                                }
                                #endregion
                                #region ElitePk
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 249 && client.Map.BaseID != 700)//ElitePk
                                {
                                    if (DateTime.Now.Hour == Game.KimoEvents.EBHour && DateTime.Now.Minute >= 5 && DateTime.Now.Minute < 20)
                                    {
                                        if (!Game.Tournaments.EliteTournament.Top8.ContainsKey(client.Entity.UID))
                                        {
                                            Game.Tournaments.EliteTournament.AddMap(client);
                                            Data data = new Data(true);
                                            data.ID = Data.OpenCustom;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = 3378;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);
                                        }
                                    }
                                }
                                #endregion
                                #region classpk
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 248 && client.Map.BaseID != 700)//ClassPk
                                {
                                    if (DateTime.Now.Hour == Game.KimoEvents.ClassHour && DateTime.Now.Minute < 05)
                                    {
                                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                                        {
                                            client.Entity.Teleport(7001, 25, 40);
                                        }
                                        if (client.Entity.Class >= 20 && client.Entity.Class <= 25)
                                        {
                                            client.Entity.Teleport(4500, 25, 40);
                                        }
                                        if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                                        {
                                            client.Entity.Teleport(4501, 25, 40);
                                        }
                                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                                        {
                                            client.Entity.Teleport(4502, 25, 40);
                                        }
                                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                                        {
                                            client.Entity.Teleport(4503, 25, 40);
                                        }
                                        if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                                        {
                                            client.Entity.Teleport(4504, 25, 40);
                                        }
                                        if (client.Entity.Class >= 132 && client.Entity.Class <= 135)
                                        {
                                            client.Entity.Teleport(4505, 25, 40);
                                        }
                                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                                        {
                                            client.Entity.Teleport(4506, 25, 40);
                                        }
                                        Data data = new Data(true);
                                        data.ID = Data.OpenCustom;
                                        data.UID = client.Entity.UID;
                                        data.TimeStamp = Time32.Now;
                                        data.dwParam = 3378;
                                        data.wParam1 = client.Entity.X;
                                        data.wParam2 = client.Entity.Y;
                                        client.Send(data);

                                    }
                                }
                                #endregion
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 247 && client.Map.BaseID != 700 && client.Entity.invite)//WeeklyPk
                                {
                                    client.Entity.Teleport(1002, 453, 294);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 246 && client.Map.BaseID != 700)//MonthlyPk
                                {
                                    client.Entity.Teleport(1002, 428, 243);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 245 && client.Map.BaseID != 700)//DisCity
                                {
                                    client.Entity.Teleport(1020, 534, 484);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 244 && client.Map.BaseID != 700)//GuildWar
                                {
                                    client.Disconnect();
                                    return;
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 233 && client.Map.BaseID != 700)//ClanWar
                                {
                                    client.Entity.Teleport(1002, 413, 246);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 198 && client.Map.BaseID != 700)//ClanWar
                                {
                                    client.Entity.Teleport(1002, 450, 372);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 196 && client.Map.BaseID != 700)//ClanWar
                                {
                                    client.Entity.Teleport(1002, 425, 385);
                                }
                                #region DailyPk
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 243 && client.Map.BaseID != 700)//DailyPk
                                {
                                    if (DateTime.Now.Minute >= 00 && DateTime.Now.Minute < 05)
                                    {
                                        client.Entity.Teleport(8877, 52, 44);
                                        Data data = new Data(true);
                                        data.ID = Data.OpenCustom;
                                        data.UID = client.Entity.UID;
                                        data.TimeStamp = Time32.Now;
                                        data.dwParam = 3378;
                                        data.wParam1 = client.Entity.X;
                                        data.wParam2 = client.Entity.Y;
                                        client.Send(data);
                                    }
                                }
                                #endregion
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 242 && client.Map.BaseID != 700)//SteedRace
                                {
                                    client.Entity.Teleport(1002, 423, 245);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 241 && client.Map.BaseID != 700)//SpouseWar
                                {
                                    client.Entity.Teleport(1002, 421, 292);
                                }
                                #region LastMan
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 240 && client.Map.BaseID != 700)//LastMan
                                {
                                    if (DateTime.Now.Minute >= 30 && DateTime.Now.Minute <= 32)
                                    {
                                        Random R = new Random();
                                        int Nr = R.Next(1, 10);
                                        if (Nr == 1) client.Entity.Teleport(3333, 51, 73);
                                        if (Nr == 2) client.Entity.Teleport(3333, 33, 34);
                                        if (Nr == 3) client.Entity.Teleport(3333, 67, 34);
                                        if (Nr == 4) client.Entity.Teleport(3333, 51, 73);
                                        if (Nr == 5) client.Entity.Teleport(3333, 33, 34);
                                        if (Nr == 6) client.Entity.Teleport(3333, 67, 34);
                                        if (Nr == 7) client.Entity.Teleport(3333, 51, 73);
                                        if (Nr == 8) client.Entity.Teleport(3333, 33, 34);
                                        if (Nr == 9) client.Entity.Teleport(3333, 67, 34);
                                        if (Nr == 10) client.Entity.Teleport(3333, 68, 57);

                                        Data data = new Data(true);
                                        data.ID = Data.OpenCustom;
                                        data.UID = client.Entity.UID;
                                        data.TimeStamp = Time32.Now;
                                        data.dwParam = 3378;
                                        data.wParam1 = client.Entity.X;
                                        data.wParam2 = client.Entity.Y;
                                        client.Send(data);
                                    }
                                }
                                #endregion
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 239 && client.Map.BaseID != 700)//EliteGW
                                {
                                    client.Entity.Teleport(1002, 414, 259);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 238 && client.Map.BaseID != 700)//TreasueBox
                                {
                                    client.Entity.Teleport(1002, 441, 352);
                                }
                                if (client.Map.BaseID != 6001 && client.Map.BaseID != 6000 && !client.Entity.Dead && req.OptionID == 233 && client.Map.BaseID != 700)//LordsWar
                                {
                                    client.Entity.Teleport(1002, 382, 394);
                                }
                                if (req.InteractType == NpcReply.MessageBox)
                                {
                                    if (client.Entity.ActivePOPUP == 99995)
                                    {
                                        client.Entity.ActivePOPUP = 0;
                                        break;
                                    }
                                    if (req.OptionID == 255)
                                    {
                                        if (client.OnMessageBoxOK != null)
                                        {
                                            client.OnMessageBoxOK.Invoke();
                                            client.OnMessageBoxOK = null;
                                        }
                                    }
                                    else
                                    {
                                        if (client.OnMessageBoxCANCEL != null)
                                        {
                                            client.OnMessageBoxCANCEL.Invoke();
                                            client.OnMessageBoxCANCEL = null;
                                        }
                                    }
                                }
                                else
                                {
                                    if (ID == 2031)
                                        client.ActiveNpc = req.NpcID;
                                    if (req.NpcID == 12)
                                    {
                                        if (client.Entity.VIPLevel > 0)
                                        {
                                            Data data = new Data(true);
                                            data.ID = Data.OpenWindow;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = Data.WindowCommands.VIPWarehouse;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);
                                            break;
                                        }
                                    }
                                    Interfaces.INpc npc = null;
                                    if (req.InteractType == 102)
                                    {
                                        if (client.Guild != null)
                                        {
                                            if (client.AsMember.Rank == PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                            {
                                                client.Guild.ExpelMember(req.Input, false);
                                            }
                                        }
                                        return;
                                    }
                                    if (client.Map.Npcs.TryGetValue(client.ActiveNpc, out npc))
                                    {
                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                                            return;
                                        if (req.OptionID == 255 || (req.OptionID == 0 && ID == 2032))
                                            return;
                                        if (client.Entity.Dead)
                                            return;
                                        req.NpcID = client.ActiveNpc;
                                        //NpcDialogs.Dialogs.GetDialog(req, client);
                                        Dialogs.GetDialog(req, client);
                                    }
                                }
                                break;
                            }
                        #endregion
                        #region Compose (2036)
                        case 2036:
                            {
                                Compose compose = new Compose(false);
                                compose.Deserialize(packet);
                                ComposePlus(compose, client);
                                break;
                            }
                        #endregion
                        #region Offline TG (2044)
                        case 2044:
                            {
                                OfflineTGRequest otgr = new OfflineTGRequest(false);
                                otgr.Deserialize(packet);
                                switch (otgr.ID)
                                {
                                    case OfflineTGRequest.OnTrainingTimeRequested:
                                        {
                                            otgr.Minutes = 900;
                                            client.Send(otgr);
                                            break;
                                        }
                                    case OfflineTGRequest.OnConfirmation:
                                        {
                                            if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Entity.Dead)
                                            {
                                                return;
                                            }
                                            if (client.Entity.MapID == 1036 || client.Entity.MapID == 1039 || ServerBase.Constants.OfflineTG.Contains(client.Entity.MapID))
                                            {
                                                switch (client.Entity.PreviousMapID)
                                                {

                                                    case 1000:
                                                        {
                                                            client.Entity.PreviousMapID = 1000;
                                                            client.Entity.PrevX = 500;
                                                            client.Entity.PrevY = 560;
                                                            break;
                                                        }
                                                    case 1020:
                                                        {
                                                            client.Entity.PreviousMapID = 1020;
                                                            client.Entity.PrevX = 565;
                                                            client.Entity.PrevY = 562;
                                                            //client.Entity.Teleport(1020, 565, 562);
                                                            break;
                                                        }
                                                    case 1011:
                                                        {
                                                            client.Entity.PreviousMapID = 1011;
                                                            client.Entity.PrevX = 188;
                                                            client.Entity.PrevY = 264;
                                                            //client.Entity.Teleport(1011, 188, 264);
                                                            break;
                                                        }
                                                    case 1015:
                                                        {
                                                            client.Entity.PreviousMapID = 1015;
                                                            client.Entity.PrevX = 717;
                                                            client.Entity.PrevY = 571;
                                                            // client.Entity.Teleport(1015, 717, 571);
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            client.Entity.PreviousMapID = 1002;
                                                            client.Entity.PrevX = 429;
                                                            client.Entity.PrevY = 378;
                                                            //client.Entity.Teleport(1002, 429, 378);
                                                            break;
                                                        }
                                                }
                                                client.Entity.PreviousMapID = client.Entity.PreviousMapID;
                                                //client.Entity.PrevX = client.Entity.PrevX;
                                                //client.Entity.PrevY = client.Entity.PrevY;
                                            }
                                            else
                                            {
                                                client.Entity.PreviousMapID = client.Entity.MapID;
                                                client.Entity.PrevX = client.Entity.X;
                                                client.Entity.PrevY = client.Entity.Y;
                                            }

                                            client.Entity.MapID = 601;
                                            client.Entity.X = 64;
                                            client.Entity.Y = 56;
                                            client.OfflineTGEnterTime = DateTime.Now;
                                            client.Disconnect();
                                            break;
                                        }
                                    case OfflineTGRequest.ClaimExperience:
                                        {
                                            var T1 = new TimeSpan(DateTime.Now.Ticks);
                                            var T2 = new TimeSpan(client.OfflineTGEnterTime.Ticks);
                                            ushort minutes = (ushort)(T1.TotalMinutes - T2.TotalMinutes);
                                            minutes = (ushort)Math.Min((ushort)900, minutes);
                                            double expballGain = (double)300 * (double)minutes / (double)900;
                                            while (expballGain >= 100)
                                            {
                                                expballGain -= 100;
                                                client.IncreaseExperience(client.ExpBall, false);
                                            }
                                            if (expballGain != 0)
                                                client.IncreaseExperience((uint)(client.ExpBall * (expballGain / 100)), false);

                                            client.Entity.SetLocation(client.Entity.PreviousMapID, client.Entity.PrevX, client.Entity.PrevY);
                                            if (client.Entity.PreviousMapID == 1036 || client.Entity.PreviousMapID == 1039)
                                                switch (client.Entity.PreviousMapID)
                                                {

                                                    case 1000:
                                                        {
                                                            client.Entity.Teleport(1000, 500, 650);
                                                            break;
                                                        }
                                                    case 1020:
                                                        {
                                                            client.Entity.Teleport(1020, 565, 562);
                                                            break;
                                                        }
                                                    case 1011:
                                                        {
                                                            client.Entity.Teleport(1011, 188, 264);
                                                            break;
                                                        }
                                                    case 1015:
                                                        {
                                                            client.Entity.Teleport(1015, 717, 571);
                                                            break;
                                                        }
                                                    default:
                                                        {
                                                            client.Entity.Teleport(1002, 429, 378);
                                                            break;
                                                        }
                                                }
                                            else
                                            {
                                                client.Entity.Teleport(client.Entity.PreviousMapID, client.Entity.PrevX, client.Entity.PrevY);
                                            }
                                            client.OfflineTGEnterTime = DateTime.Now;
                                            break;
                                        }
                                    default:
                                        client.Send(otgr);
                                        break;
                                }
                                break;
                            }
                        #endregion
                        #region Trade partner (2046)
                        case 2046:
                            {
                                TradePartner partner = new TradePartner(false);
                                partner.Deserialize(packet);
                                switch (partner.Type)
                                {
                                    case TradePartner.RequestPartnership:
                                        RequestTradePartnership(partner, client);
                                        break;
                                    case TradePartner.RejectRequest:
                                        RejectPartnership(partner, client);
                                        break;
                                    case TradePartner.BreakPartnership:
                                        BreakPartnership(partner, client);
                                        break;
                                }
                                break;
                            }
                        #endregion
                        #region ItemLock (2048)
                        case 2048:
                            {
                                if (client.Action != 2)
                                    return;
                                ItemLock itemlock = new ItemLock(false);
                                itemlock.Deserialize(packet);
                                switch (itemlock.ID)
                                {
                                    case ItemLock.RequestLock:
                                        LockItem(itemlock, client);
                                        break;
                                    case ItemLock.RequestUnlock:
                                        UnlockItem(itemlock, client);
                                        break;
                                }
                                break;
                            }
                        #endregion
                        #region Broadcast (2050)
                        case 2050:
                            {
                                Broadcast cast = new Broadcast(false);
                                cast.Deserialize(packet);
                                switch (cast.Type)
                                {
                                    case Broadcast.ReleaseSoonMessages:
                                        {
                                            BroadcastInfoAwaiting(cast, client);
                                            break;
                                        }
                                    case Broadcast.MyMessages:
                                        {
                                            BroadcastClientMessages(cast, client);
                                            break;
                                        }
                                    case Broadcast.BroadcastMessage:
                                        {
                                            if (client.Trade.InTrade)
                                            {
                                                client.Send(new Message("You cannot send any broadcasts While you inTrade.", System.Drawing.Color.Red, Message.TopLeft));
                                                break;
                                            }
                                            if (client.Entity.MapID == 3031)
                                            {
                                                client.Send(new Message("You cannot send any broadcasts while you in LordsWar Tourment.", System.Drawing.Color.Red, Message.TopLeft));
                                                break;
                                            }
                                            if (Game.ConquerStructures.Broadcast.Broadcasts.Count == ServerBase.Constants.MaxBroadcasts)
                                            {
                                                client.Send(new Message("You cannot send any broadcasts for now. The limit has been reached. Wait until a broadcast is chopped down.", System.Drawing.Color.Red, Message.TopLeft));
                                                break;
                                            }
                                            if (client.Entity.ConquerPoints >= 5)
                                            {
                                                client.Entity.ConquerPoints -= 5;
                                                Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new PhoenixProject.Game.ConquerStructures.Broadcast.BroadcastStr();
                                                broadcast.EntityID = client.Entity.UID;
                                                broadcast.EntityName = client.Entity.Name;
                                                broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                                if (cast.List[0].Length > 80)
                                                    cast.List[0] = cast.List[0].Remove(80);
                                                broadcast.Message = cast.List[0];
                                                if (Game.ConquerStructures.Broadcast.Broadcasts.Count == 0)
                                                {
                                                    if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID == 1)
                                                    {
                                                        Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                                        Game.ConquerStructures.Broadcast.LastBroadcast = DateTime.Now;
                                                        ServerBase.Kernel.SendWorldMessage(new Message(cast.List[0], "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, Message.BroadcastMessage), ServerBase.Kernel.GamePool.Values);
                                                        client.Send(cast);
                                                        break;
                                                    }
                                                }
                                                Game.ConquerStructures.Broadcast.Broadcasts.Add(broadcast);
                                                cast.dwParam = (uint)Game.ConquerStructures.Broadcast.Broadcasts.Count;
                                                client.Send(cast);
                                                break;
                                            }
                                            break;
                                        }
                                    case Broadcast.Urgen5CPs:
                                        {
                                            for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                            {
                                                var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                                if (broadcast.ID == cast.dwParam)
                                                {
                                                    if (c != 0)
                                                    {
                                                        if (client.Entity.ConquerPoints > 5)
                                                        {
                                                            broadcast.SpentCPs += 5;
                                                            client.Entity.ConquerPoints -= 5;
                                                            if (Game.ConquerStructures.Broadcast.Broadcasts[c - 1].SpentCPs <= broadcast.SpentCPs)
                                                            {

                                                                Game.ConquerStructures.Broadcast.Broadcasts[c] = Game.ConquerStructures.Broadcast.Broadcasts[c - 1];
                                                                Game.ConquerStructures.Broadcast.Broadcasts[c - 1] = broadcast;
                                                            }
                                                            else
                                                            {
                                                                Game.ConquerStructures.Broadcast.Broadcasts[c] = broadcast;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    case Broadcast.Urgen15CPs:
                                        {
                                            for (int c = 0; c < Game.ConquerStructures.Broadcast.Broadcasts.Count; c++)
                                            {
                                                var broadcast = Game.ConquerStructures.Broadcast.Broadcasts[c];
                                                if (broadcast.ID == cast.dwParam)
                                                {
                                                    if (c != 0)
                                                    {
                                                        if (client.Entity.ConquerPoints > 15)
                                                        {
                                                            broadcast.SpentCPs += 15;
                                                            client.Entity.ConquerPoints -= 15;
                                                            for (int b = c - 1; b > 0; b--)
                                                                Game.ConquerStructures.Broadcast.Broadcasts[b] = Game.ConquerStructures.Broadcast.Broadcasts[b - 1];

                                                            Game.ConquerStructures.Broadcast.Broadcasts[0] = broadcast;
                                                        }
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region Nobility (2064)
                        case 2064:
                            {
                                NobilityInfo nobility = new NobilityInfo(false);
                                nobility.Deserialize(packet);
                                Game.ConquerStructures.Nobility.Handle(nobility, client);
                                break;
                            }
                        #endregion
                        #region TopGuilds
                        case 1058:
                            {
                                if (client.Guild != null && client.AsMember != null)
                                {
                                    if (client.AsMember != null)
                                    {
                                        Writer.WriteUInt32((uint)client.AsMember.SilverDonation, 8, packet);
                                        if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                if (client.AsMember.SilverDonation > client.Guild.SilverFund)
                                                {
                                                    client.Guild.SilverFund = (uint)client.AsMember.SilverDonation;
                                                    client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.OSupervisor;
                                                    client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                }

                                        Writer.WriteUInt32((uint)client.AsMember.ConquerPointDonation, 20, packet);
                                        if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                if (client.AsMember.ConquerPointDonation > client.Guild.ConquerPointFund)
                                                {
                                                    client.Guild.ConquerPointFund = (uint)client.AsMember.ConquerPointDonation;
                                                    client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.CPSupervisor;
                                                    client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                }

                                    }
                                    Writer.WriteUInt32(client.Entity.PKPoints, 12, packet);
                                    if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                            if (client.Entity.PKPoints > client.Guild.pkp_donation)
                                            {
                                                client.Guild.pkp_donation = (uint)client.Entity.PKPoints;
                                                client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.PKSupervisor;
                                                client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }

                                    if (client.ArenaStatistic != null)
                                    {
                                        Writer.WriteUInt32(client.ArenaStatistic.CurrentHonor, 24, packet);
                                        if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                if (client.ArenaStatistic.CurrentHonor > client.Guild.honor_donation)
                                                {
                                                    client.Guild.honor_donation = (uint)client.ArenaStatistic.CurrentHonor;
                                                    client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.HonoraryManager;
                                                    client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                }
                                    }
                                    Writer.WriteUInt32(0, 16, packet);
                                    if (client.Entity != null)
                                        if (client.Entity.Flowers != null)
                                        {
                                            Writer.WriteUInt32((uint)client.Entity.Flowers.RedRoses, 28, packet);
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                    if (client.Entity.Flowers.RedRoses > client.Guild.rose_donation)
                                                    {
                                                        client.Guild.rose_donation = (uint)client.Entity.Flowers.RedRoses;
                                                        client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.RoseSupervisor;
                                                        client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                    }


                                            Writer.WriteUInt32((uint)client.Entity.Flowers.Tulips, 32, packet);
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                    if (client.Entity.Flowers.Tulips > client.Guild.tuil_donation)
                                                    {
                                                        client.Guild.tuil_donation = (uint)client.Entity.Flowers.Tulips;
                                                        client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.TulipFollower;
                                                        client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                    }



                                            Writer.WriteUInt32((uint)client.Entity.Flowers.Lilies, 36, packet);
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                    if (client.Entity.Flowers.Lilies > client.Guild.lilies_donation)
                                                    {
                                                        client.Guild.lilies_donation = (uint)client.Entity.Flowers.Lilies;
                                                        client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.LilySupervisor;
                                                        client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                    }


                                            Writer.WriteUInt32((uint)client.Entity.Flowers.Orchads, 40, packet);
                                            if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                                if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                                    if (client.Entity.Flowers.Orchads > client.Guild.orchid_donation)
                                                    {
                                                        client.Guild.orchid_donation = (uint)client.Entity.Flowers.Orchads;
                                                        client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.OrchidFollower;
                                                        client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                                    }
                                            Writer.WriteUInt32((uint)(client.Entity.Flowers.Orchads
                                                + (uint)client.Entity.Flowers.RedRoses
                                                + (uint)client.Entity.Flowers.Tulips
                                                + (uint)client.Entity.Flowers.Lilies), 44, packet);
                                        }
                                    if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.DeputyLeader)
                                        if (client.Entity.GuildRank != (ushort)PhoenixProject.Game.Enums.GuildMemberRank.GuildLeader)
                                        {
                                            if (client.Entity.Name == client.Guild.LeaderName)
                                            {
                                                client.Entity.GuildRank = (ushort)PhoenixProject.Game.Enums.GuildMemberRank.LeaderSpouse;
                                                client.AsMember.Rank = (PhoenixProject.Game.Enums.GuildMemberRank)client.Entity.GuildRank;
                                            }
                                        }
                                    if (client.Guild != null)
                                        client.Guild.SendGuild(client);
                                    client.Send(packet);
                                }
                                break;
                            }
                        #endregion
                        #region Flowers (1150 & 1151)
                        case 1150:
                            {
                                new Game.Features.Flowers.FlowerSystem(packet, client);
                                break;
                            }
                        #endregion
                        #region Flowers (1150 & 1151)
                        case 1151:
                            {
                                int subtype = packet[4];
                                AddFlowers(client, packet);

                                break;
                            }
                        #endregion
                        #region Mentor prize (2067)
                        case 2067:
                            {
                                MentorPrize prize = new MentorPrize(false);
                                prize.Deserialize(packet);
                                switch (prize.Prize_Type)
                                {
                                    case MentorPrize.ClaimExperience:
                                        {
                                            client.IncreaseExperience((ulong)(((double)client.PrizeExperience / 606) * client.ExpBall), false);
                                            client.PrizeExperience = 0;
                                            foreach (var appr in client.Apprentices.Values)
                                            {
                                                appr.Actual_Experience = 0;
                                                Database.KnownPersons.SaveApprenticeInfo(appr);
                                            }
                                            prize.Mentor_ID = client.Entity.UID;
                                            prize.Prize_Type = MentorPrize.Show;
                                            prize.Prize_Experience = client.PrizeExperience;
                                            prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                            prize.Prize_PlusStone = client.PrizePlusStone;
                                            client.Send(prize);
                                            break;
                                        }
                                    case MentorPrize.ClaimHeavenBlessing:
                                        {
                                            client.AddBless(client.PrizeHeavenBlessing);
                                            client.PrizeHeavenBlessing = 0;
                                            foreach (var appr in client.Apprentices.Values)
                                            {
                                                appr.Actual_HeavenBlessing = 0;
                                                Database.KnownPersons.SaveApprenticeInfo(appr);
                                            }
                                            prize.Mentor_ID = client.Entity.UID;
                                            prize.Prize_Type = MentorPrize.Show;
                                            prize.Prize_Experience = client.PrizeExperience;
                                            prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                            prize.Prize_PlusStone = client.PrizePlusStone;
                                            client.Send(prize);
                                            break;
                                        }
                                    case MentorPrize.ClaimPlus:
                                        {
                                            int stones = client.PrizePlusStone / 100;
                                            int totake = stones;
                                            if (stones > 0)
                                            {
                                                for (; stones > 0; stones--)
                                                {
                                                    client.PrizePlusStone -= 100;
                                                    if (!client.Inventory.Add(730001, 1, 1))
                                                        break;
                                                }
                                            }
                                            foreach (var appr in client.Apprentices.Values)
                                            {
                                                if (appr.Actual_Plus >= totake)
                                                {
                                                    appr.Actual_Plus -= (ushort)totake;
                                                    totake = 0;
                                                }
                                                else
                                                {
                                                    totake -= appr.Actual_Plus;
                                                    appr.Actual_Plus = 0;
                                                }
                                                Database.KnownPersons.SaveApprenticeInfo(appr);
                                            }
                                            prize.Mentor_ID = client.Entity.UID;
                                            prize.Prize_Type = MentorPrize.Show;
                                            prize.Prize_Experience = client.PrizeExperience;
                                            prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                            prize.Prize_PlusStone = client.PrizePlusStone;
                                            client.Send(prize);
                                            break;
                                        }
                                    case MentorPrize.Show:
                                        {
                                            prize.Mentor_ID = client.Entity.UID;
                                            prize.Prize_Type = MentorPrize.Show;
                                            prize.Prize_Experience = client.PrizeExperience;
                                            prize.Prize_HeavensBlessing = client.PrizeHeavenBlessing;
                                            prize.Prize_PlusStone = client.PrizePlusStone;
                                            client.Send(prize);
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region ElitePk Tournament 2223 | 2219
                        case 2223:
                            {
                                if (client.Entity.MapID == 6002)
                                    break;

                                if (Game.Tournaments.EliteTournament.Start)
                                    break;

                                GamePackets.Elite_Pk pk = new Elite_Pk(client.Entity.UID);
                                pk.Send(client);
                                break;
                            }
                        case 2219:
                            {
                                if (client.Entity.MapID == 6002)
                                    break;
                                byte[] sed = new byte[36]
                        {
                        0x1C ,0x00 ,0xAB ,0x08 ,0x04 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 ,0x00    //  ; «          
,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x54 ,0x51 ,0x53 ,0x65     // ;            TQSe
,0x72 ,0x76 ,0x65 ,0x72                                         // ;rver
                        };
                                client.Send(sed);
                                break;


                            }
                        case 1063:
                            {
                                GamePackets.Guild_Pk pk = new Guild_Pk(client.Entity.UID);
                                pk.Send(client);
                                break;
                            }
                        /* case 2224:
                             {
                                 client.Send(packet);
                                 break;
                             }
                         case 2232:
                             {
                                 client.Send(packet);
                                 break;
                             }
                         case 2242:
                             {
                                 client.Send(packet);
                                 break;
                             }
                         case 2243:
                             {
                                 client.Send(packet);
                                 break;
                             }*/
                        /*case 2242://Request Arena ranking List 2245 2242 2244
                            {
                                //Code snippet that belongs to Ultimation
                                Game.ConquerStructures.TeamArena.Statistics.ShowWiners(client);
                                break;
                            }
                        case 2245:
                            {
                                client.TeamArenaStatistic.Send(client);
                                break;
                            }*/
                        /*case 2245:
                            {
                                client.Send(packet);
                                break;
                            }*/
                        /* case 2233:
                             {
                                 GamePackets.Team_Pk pk = new Team_Pk(client.Entity.UID);
                                 pk.Send(client);
                                 break;
                             }*/
                        /* case 2252:
                             {
                                 client.Send(packet);
                                 break;
                             }*/
                        /* case 2253:
                             {
                                 GamePackets.Team_PkComun pk = new Team_PkComun(client.Entity.UID);
                                 pk.Send(client);
                                 break;
                             }*/
                        case 1130:
                            {
                                if (client.Entity.TitlePacket != null)
                                {
                                    if (packet[9] == 4)
                                    {
                                        if (client.Entity.TitlePacket.dwParam2 != 0)
                                            client.Entity.TitlePacket.Send(client);
                                    }
                                    if (packet[9] == 3)
                                    {
                                        client.Entity.TitleActivated = packet[8];
                                        client.Send(packet);
                                        client.SendScreen(client.Entity.SpawnPacket, false);
                                    }
                                }
                                break;
                            }
                        #endregion


                        #region vipteleport
                        case 1128:
                            {
                                p1128 vp = new p1128(false);
                                vp.Deserialize(packet);
                                if (ServerBase.Constants.VipNo.Contains(client.Entity.MapID))
                                    return;
                                if (client.Entity.ContainsFlag(Network.GamePackets.Update.Flags.Ghost))
                                    return;
                                switch (vp.UID)
                                {
                                    case 0://player city teleport
                                        {
                                            switch (vp.UID2)
                                            {
                                                ////////////////////////////////////////////////////////////////////////////////////////////////////
                                                case 1://tc
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1002, 429, 378);
                                                    break;
                                                case 2://pc
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1011, 188, 264);
                                                    break;
                                                case 3://ac
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1020, 565, 562);
                                                    break;
                                                case 4://dc
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1000, 500, 650);
                                                    break;
                                                case 5://bc
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1015, 717, 571);
                                                    break;
                                                    ////////////////////////////////////////////////////////////////////////////////////////
                                                    {


                                                    }
                                                default: Console.WriteLine("Unknown 1128 portal subtype 1 : " + vp.UID2); break;
                                            }
                                            break;
                                        }
                                    case 1://Team city teleport
                                        {
                                            switch (vp.UID2)
                                            {
                                                ////////////////////////////////////////////////////////////////////////////////////////////////////
                                                case 1://tc
                                                    foreach (Client.GameState teammate in client.Entity.Owner.Team.Teammates)
                                                    {
                                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, teammate.Entity.X, teammate.Entity.Y) <= 18)
                                                        {
                                                            if (client.Map.BaseID != 700)
                                                            {
                                                                teammate.Entity.Teleport(1002, 429, 378);
                                                            }
                                                        }
                                                    }
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1002, 429, 378);
                                                    break;
                                                case 2://pc
                                                    foreach (Client.GameState teammate in client.Entity.Owner.Team.Teammates)
                                                    {
                                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, teammate.Entity.X, teammate.Entity.Y) <= 18)
                                                        {
                                                            if (client.Map.BaseID != 700)
                                                            {
                                                                teammate.Entity.Teleport(1011, 188, 264);
                                                            }
                                                        }
                                                    }
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1011, 188, 264);
                                                    break;
                                                case 3://ac
                                                    foreach (Client.GameState teammate in client.Entity.Owner.Team.Teammates)
                                                    {
                                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, teammate.Entity.X, teammate.Entity.Y) <= 18)
                                                        {
                                                            if (client.Map.BaseID != 700)
                                                            {
                                                                teammate.Entity.Teleport(1020, 565, 562);
                                                            }
                                                        }
                                                    }
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1020, 565, 562);
                                                    break;
                                                case 4://dc
                                                    foreach (Client.GameState teammate in client.Entity.Owner.Team.Teammates)
                                                    {
                                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, teammate.Entity.X, teammate.Entity.Y) <= 18)
                                                        {
                                                            if (client.Map.BaseID != 700)
                                                            {
                                                                teammate.Entity.Teleport(1000, 500, 650);
                                                            }
                                                        }
                                                    }
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1000, 500, 650);
                                                    break;
                                                case 5://bc
                                                    foreach (Client.GameState teammate in client.Entity.Owner.Team.Teammates)
                                                    {
                                                        if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, teammate.Entity.X, teammate.Entity.Y) <= 18)
                                                        {
                                                            if (client.Map.BaseID != 700)
                                                            {
                                                                teammate.Entity.Teleport(1015, 717, 571);
                                                            }
                                                        }
                                                    }
                                                    if (client.Map.BaseID != 700)
                                                        client.Entity.Teleport(1015, 717, 571);
                                                    break;
                                                    ////////////////////////////////////////////////////////////////////////////////////////
                                                    {


                                                    }
                                                default: Console.WriteLine("Unknown 1128 portal subtype 2 : " + vp.UID2); break;
                                            }
                                            break;
                                        }

                                    default:
                                        Console.WriteLine("Unknown 1128 subtype: " + vp.UID); break;
                                }
                                break;
                            }
                        #endregion
                        #region MentorApprentice (2065)
                        case 2065:
                            {
                                MentorApprentice ma = new MentorApprentice(false);
                                ma.Deserialize(packet);
                                switch (ma.Type)
                                {
                                    case MentorApprentice.LeaveMentor:
                                        {
                                            LeaveMentor(ma, client);
                                            break;
                                        }
                                    case MentorApprentice.ExpellApprentice:
                                        {
                                            ExpelApprentice(ma, client);
                                            break;
                                        }
                                    case MentorApprentice.RequestApprentice:
                                        {
                                            AddApprentice(ma, client);
                                            break;
                                        }
                                    case MentorApprentice.RequestMentor:
                                        {
                                            AddMentor(ma, client);
                                            break;
                                        }
                                    case MentorApprentice.AcceptRequestApprentice:
                                        {
                                            AcceptRequestApprentice(ma, client);
                                            break;
                                        }
                                    case MentorApprentice.AcceptRequestMentor:
                                        {
                                            AcceptRequestMentor(ma, client);
                                            break;
                                        }
                                }
                                break;
                            }
                        case 2066:
                            {
                                MentorInformation info = new MentorInformation(false);
                                info.Deserialize(packet);
                                if (info.Mentor_Type == 1)
                                {
                                    client.ReviewMentor();
                                }
                                break;
                            }
                        #endregion
                        #region Guild members (2102)
                        case 2102:
                            {
                                ushort Page = BitConverter.ToUInt16(packet, 8);
                                if (client.Guild != null)
                                {
                                    if (client.AsMember != null)
                                        client.Guild.SendMembers(client, Page);
                                }
                                break;
                            }
                        #endregion
                        #region Arena (2207<->2211)
                        case 2207://Request Arena ranking List 2245 2242 2244
                            {
                                //Code snippet that belongs to Ultimation
                                ushort PageIndex = BitConverter.ToUInt16(packet, 6);
                                Game.ConquerStructures.Arena.Statistics.ShowRankingPage(packet[4], PageIndex, client);
                                break;
                            }
                        case 2206:
                            {
                                //Code snippet that belongs to Ultimation
                                ushort PageIndex = BitConverter.ToUInt16(packet, 4);
                                Game.ConquerStructures.Arena.QualifyEngine.RequestGroupList(client, PageIndex);
                                break;
                            }
                        case 2205://Arena Signup!
                            {
                                //Code snippet that belongs to Ultimation
                                uint DialogID = BitConverter.ToUInt32(packet, 4);
                                uint ButtonID = BitConverter.ToUInt32(packet, 8);
                                switch (DialogID)
                                {
                                    case 4:
                                        {
                                            switch (ButtonID)
                                            {
                                                case 0:
                                                    {
                                                        Game.ConquerStructures.Arena.QualifyEngine.DoQuit(client);
                                                        break;
                                                    }
                                            }
                                            break;
                                        }
                                    case 0: Game.ConquerStructures.Arena.QualifyEngine.DoSignup(client); client.Send(packet); break;
                                    case 1: Game.ConquerStructures.Arena.QualifyEngine.DoQuit(client); client.Send(packet); break;
                                    case 3:
                                        {
                                            switch (ButtonID)
                                            {
                                                case 2: Game.ConquerStructures.Arena.QualifyEngine.DoGiveUp(client); break;
                                                case 1: Game.ConquerStructures.Arena.QualifyEngine.DoAccept(client); break;
                                            }
                                            break;
                                        }
                                    case 5:
                                        {
                                            if (client.ArenaStatistic.ArenaPoints <= 1500)
                                                if (client.Entity.Money >= 9000000)
                                                {
                                                    client.Entity.Money -= 9000000;
                                                    client.ArenaStatistic.ArenaPoints += 1500;
                                                    client.Send(client.ArenaStatistic);
                                                }
                                            break;
                                        }
                                    case 11://Win/Lose Dialog
                                        {
                                            switch (ButtonID)
                                            {
                                                case 0: Game.ConquerStructures.Arena.QualifyEngine.DoSignup(client); break;
                                            }
                                            break;
                                        }

                                }
                                break;
                            }
                        case 2208://Request Arena Winner List
                            {
                                //Code snippet that belongs to Ultimation
                                Game.ConquerStructures.Arena.Statistics.ShowWiners(client);
                                break;
                            }
                        case 2209:
                            {//bug in console
                                client.ArenaStatistic.Send(client);
                                break;
                            }
                        case 2211:
                            {
                                if (client.Map.BaseID == 6001 || client.Map.BaseID == 6000)
                                    return;
                                ushort Type = BitConverter.ToUInt16(packet, 4);
                                uint Fighter = BitConverter.ToUInt32(packet, 10);
                                if (Type == 0)
                                {
                                    if (ServerBase.Kernel.GamePool.ContainsKey(Fighter))
                                    {
                                        Client.GameState Client = ServerBase.Kernel.GamePool[Fighter];
                                        if (Client.QualifierGroup != null)
                                        {
                                            if (Client.QualifierGroup.Inside)
                                            {
                                                if (!Client.QualifierGroup.Done)
                                                {
                                                    Client.QualifierGroup.BeginWatching(client);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (Type == 1)
                                {
                                    Game.ConquerStructures.Arena.QualifyEngine.DoLeave(client);
                                }
                                else if (Type == 4)
                                {
                                    string name = "";
                                    for (int c = 22; c < packet.Length; c++)
                                    {
                                        if (packet[c] != 0)
                                            name += (char)packet[c];
                                        else
                                            break;
                                    }
                                    Game.ConquerStructures.Arena.QualifyEngine.DoCheer(client, name);
                                }
                                break;
                            }
                        #endregion
                        #region Movement/Walk (10005)
                        case 10005:
                            {
                                if (client.Action != 2)
                                    return;
                                GroundMovement groundMovement = new GroundMovement(false);
                                groundMovement.Deserialize(packet);
                                PlayerGroundMovment(groundMovement, client);

                                break;
                            }
                        #endregion
                        //24 2533 53 152 1 0 0 0 84
                        //60 0 229 9 50 151 152 0 1 0 0 0 0 0 0 0 84 81 83 101 114 118 101 114
                        //3c 00 e5 09 32 97 98 00 01 00 00 00 00 00 00 00 54 51 53 65 72 76 65 72
                        /* case 2533:
                             {
                                 KimoChi prize = new KimoChi(false);
                                 prize.Deserialize(packet);
                                 client.Send(packet);
                                 client.Send(prize);
                                 break;


                             }*/
                        #region Lottery2
                        case 1314://1314
                            {

                                Game.Lottery.Handle(packet, client);
                                break;
                            }
                        #endregion
                        #region New AutoInvite
                        case 1126://1314
                            {

                                EventAlert2.Handle(packet, client);
                                break;
                            }
                        #endregion
                        #region ClanWar inv (1313)
                        case 1313://1313
                            {
                                if (packet[4] == 8)
                                {
                                    client.Entity.Teleport(1002, 413, 246);
                                }

                                return;
                            }
                        #endregion //packet[8] = 1;

                        #region ChangeName (2080)
                        case 2080:
                            {
                                NameChange prize = new NameChange(false);
                                //prize.EditAllowed = 1;
                                //prize.EditCount = 1;
                                prize.Deserialize(packet);

                                switch (prize.Action)//string name = System.Text.Encoding.UTF7.GetString(packet, 26, packet[25]);
                                {

                                    case PhoenixProject.Network.GamePackets.NameChange.NameChangeAction.Request:
                                        {
                                            string newname = System.Text.Encoding.UTF7.GetString(packet, 10, 16).TrimEnd('\0');

                                            packet[6] = (byte)client.Entity.EditeName;
                                            packet[8] = (byte)(5 - client.Entity.EditeName);
                                            prize.Send(client);
                                            client.Send(prize);
                                            if (newname != "")
                                            {
                                                if (newname == "")
                                                    return;
                                                if (newname.Contains("[") && newname.Contains("]"))
                                                    return;
                                                if (Dialogs.InvalidCharacters(newname) && Dialogs.InvalidCharacters3(newname) && !newname.Contains("[") && !newname.Contains("]"))
                                                {
                                                    PhoenixProject.Database.MySqlCommand cmd2 = new PhoenixProject.Database.MySqlCommand(PhoenixProject.Database.MySqlCommandType.SELECT).Select("entities").Where("name", newname);//debug and test!
                                                    PhoenixProject.Database.MySqlReader r = new PhoenixProject.Database.MySqlReader(cmd2);
                                                    if (!r.Read())//wait
                                                    {
                                                        if (client.Entity.ConquerPoints >= PhoenixProject.Database.rates.ChangeName)
                                                        {
                                                            client.Entity.ConquerPoints -= PhoenixProject.Database.rates.ChangeName;

                                                            // PhoenixProject.Database.MySqlCommand cmd = new PhoenixProject.Database.MySqlCommand(PhoenixProject.Database.MySqlCommandType.UPDATE);
                                                            //  cmd.Update("entities").Set("namechange", newname).Where("UID", client.Entity.UID).Execute();
                                                            r.Close();
                                                            r.Dispose();
                                                            client.Entity.NewName = newname;

                                                            // Console.WriteLine(client.Entity.Name + ", Changed hes Name to : " + newname);
                                                            ServerBase.Kernel.SendWorldMessage(new Message(client.Entity.Name + ", Changed He's/Hers Name to " + newname + ", Will be affected after  Relogin.",
                                                                System.Drawing.Color.Red, Message.Talk), ServerBase.Kernel.GamePool.Values);

                                                            // client.Edita = 0;
                                                            // client.Edite = 1;
                                                            client.Entity.EditeName += 1;
                                                            packet[4] = 1;
                                                            prize.Send(client);
                                                            client.Send(prize);
                                                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Your new name is : " + newname + ", After relog You will get your new name, Want to Relog?");
                                                            npc.OptionID = 244;
                                                            client.Send(npc.ToArray());
                                                        }
                                                        else
                                                        {
                                                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Come back when you have " + PhoenixProject.Database.rates.ChangeName + " CPS.");
                                                            npc.OptionID = 255;
                                                            client.Send(npc.ToArray());
                                                            r.Close();
                                                            r.Dispose();

                                                        }
                                                    }
                                                    else
                                                    {
                                                        packet[4] = 2;
                                                        prize.Send(client);
                                                        client.Send(prize);
                                                        r.Close();
                                                        r.Dispose();

                                                    }
                                                }
                                                else
                                                {
                                                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "im sorry not allowed now close the dialog and try again");
                                                    npc.OptionID = 255;
                                                    client.Send(npc.ToArray());
                                                    //r.Close();
                                                    //r.Dispose();

                                                }
                                            }
                                            break;
                                        }
                                }
                                //packet[8] = 1;
                                //byte NewClass = packet[4];
                                //ushort NewBody = packet[8];

                                break;
                            }
                        #endregion

                        #region Reincarnation (1066)
                        case 1066:
                            {
                                if (client.Entity.Reborn != 2) return;
                                if (ServerBase.Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                                    return;
                                byte NewClass = packet[4];
                                ushort NewBody = packet[8];
                                if (client.Entity.Body.ToString().EndsWith("1") || client.Entity.Body.ToString().EndsWith("2"))
                                    NewBody += 2000;
                                else NewBody += 1000;

                                if (client.Inventory.Contains(711083, 1) && client.Entity.ConquerPoints >= PhoenixProject.Database.rates.Riencration)
                                {
                                    client.Entity.Body = NewBody;
                                    new PacketHandler.Reincarnation(client, NewClass);
                                    client.Inventory.Remove(711083, 1);
                                    client.Entity.ConquerPoints -= PhoenixProject.Database.rates.Riencration;
                                }
                                break;
                            }
                        #endregion
                        #region PurifyItem (2076)
                        case 2076:
                            {
                                Purification ps = new Purification(false);
                                ps.Deserialize(packet);
                                switch (ps.Mode)
                                {
                                    case Purification.Purify:
                                        PurifyItem(ps, client); break;
                                    case Purification.ItemArtifact:
                                        PurifyRefinery(ps, client); break;
                                    //case Purification.Stabilaze:
                                    //new Game.Features.Refinery.Handle(packet, client); break;
                                }
                                break;
                            }
                        #endregion
                        #region KimoClans
                        case 1312:
                            {
                                //GameState targets;
                                switch (packet[4])
                                {
                                    case 21:
                                        {

                                            if (client.Entity.Myclan != null)
                                            {
                                                try
                                                {
                                                    uint lider = 0;
                                                    string name_receive = System.Text.Encoding.UTF7.GetString(packet, 18, packet[17]);



                                                    foreach (Client.GameState clien in ServerBase.Kernel.GamePool.Values)
                                                    {

                                                        if (clien.Entity.Name == name_receive)
                                                        {
                                                            lider = clien.Entity.UID;
                                                        }
                                                    }

                                                    if (lider == client.Entity.UID) return;
                                                    Client.GameState aClient = null;
                                                    if (PhoenixProject.ServerBase.Kernel.GamePool.TryGetValue(lider, out aClient))
                                                    {

                                                        if (PhoenixProject.ServerBase.Kernel.ServerClans.ContainsKey(client.Entity.Myclan.ClanId))
                                                        {
                                                            if (PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId].Members.ContainsKey(aClient.Entity.UID))
                                                            {
                                                                PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId].ClanLider = aClient.Entity.Name;
                                                                aClient.Entity.ClanRank = 100;
                                                                aClient.Entity.Myclan.Members[aClient.Entity.UID].Rank = 100;
                                                                //if (aClient.Entity.Myclan.Members.ContainsKey(client.Entity.UID))
                                                                //aClient.Entity.Myclan.Members[client.Entity.UID].Rank = 0;
                                                                client.Entity.ClanRank = 10;
                                                                client.Entity.Myclan.Members[client.Entity.UID].Rank = 10;
                                                                Database.Clans.SaveClan(aClient.Entity.Myclan);
                                                                //Database.Clans.JoinClan(client);
                                                                Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                                                                client.Send(cl.ToArray());
                                                                ClanMembers clan = new ClanMembers(client);
                                                                client.Send(clan.ToArray());
                                                                Network.GamePackets.Clan cls = new PhoenixProject.Network.GamePackets.Clan(aClient, 1);
                                                                aClient.Send(cls.ToArray());
                                                                ClanMembers clans = new ClanMembers(aClient);
                                                                aClient.Send(clans.ToArray());
                                                                ServerBase.Kernel.GamePool[aClient.Entity.UID].Screen.FullWipe();
                                                                ServerBase.Kernel.GamePool[aClient.Entity.UID].Screen.Reload(null);
                                                                ServerBase.Kernel.GamePool[client.Entity.UID].Screen.FullWipe();
                                                                ServerBase.Kernel.GamePool[client.Entity.UID].Screen.Reload(null);
                                                            }
                                                        }

                                                    }
                                                    else
                                                    {
                                                        PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId].ClanLider = name_receive;
                                                        client.Entity.ClanRank = 10;
                                                        client.Entity.Myclan.Members[client.Entity.UID].Rank = 10;
                                                        Database.Clans.SaveClan(client.Entity.Myclan);
                                                        Database.Clans.TransferClan(name_receive);
                                                        Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                                                        client.Send(cl.ToArray());
                                                        ClanMembers clan = new ClanMembers(client);
                                                        client.Send(clan.ToArray());
                                                        ServerBase.Kernel.GamePool[client.Entity.UID].Screen.FullWipe();
                                                        ServerBase.Kernel.GamePool[client.Entity.UID].Screen.Reload(null);
                                                        //Console.WriteLine("gggf");

                                                    }
                                                }
                                                catch (Exception e)
                                                {
                                                    Program.SaveException(e);
                                                }
                                            }
                                            break;
                                        }

                                    case (byte)Game.Clan_Typ.Quit:
                                        {
                                            if (client.Entity.Myclan != null)
                                            {
                                                if (client.Entity.ClanRank != 100)
                                                {
                                                    client.Entity.Myclan.ExpelMember(client.Entity.Name, true);
                                                }
                                            }

                                            break;
                                        }
                                    case 25:
                                        {
                                            if (client.Entity.Myclan == null) return;
                                            string buletin = System.Text.Encoding.UTF7.GetString(packet, 18, packet[17]);
                                            if (PhoenixProject.ServerBase.Kernel.ServerClans.ContainsKey(client.Entity.Myclan.ClanId))
                                                PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId].ClanBuletion = buletin;
                                            Database.Clans.SaveClan(PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId]);
                                            client.Send(packet);
                                            break;
                                        }
                                    case 22:
                                        {
                                            if (client.Entity.Myclan != null)
                                            {
                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    string name = System.Text.Encoding.UTF7.GetString(packet, 18, packet[17]);
                                                    if (client.Entity.Myclan != null)
                                                    {
                                                        if (client.Entity.ClanRank == 100)
                                                        {
                                                            client.Entity.Myclan.ExpelMember(name, false);
                                                            Database.Clans.KickClan(name);
                                                        }
                                                    }

                                                }
                                            }

                                            break;
                                        }

                                    case 26:
                                        {
                                            uint money = BitConverter.ToUInt32(packet, 8);
                                            if (client.Entity.Money >= money && client.Entity.Myclan != null)
                                            {
                                                client.Entity.Myclan.Members[client.Entity.UID].Donation += money;
                                                client.Entity.Money -= money;
                                                if (PhoenixProject.ServerBase.Kernel.ServerClans.ContainsKey(client.Entity.Myclan.ClanId))
                                                    PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId].ClanDonation += money;
                                                Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                                                client.Send(cl.ToArray());
                                                Database.Clans.SaveClientDonation(client);
                                                Database.Clans.SaveClan(PhoenixProject.ServerBase.Kernel.ServerClans[client.Entity.Myclan.ClanId]);
                                            }
                                            break;
                                        }
                                    case 11:
                                        {

                                            uint lider = BitConverter.ToUInt32(packet, 8);
                                            if (PhoenixProject.ServerBase.Kernel.GamePool.ContainsKey(lider))
                                            {
                                                packet[4] = 11;
                                                Network.Writer.WriteUInt32(client.Entity.UID, 8, packet);
                                                packet[16] = 1;
                                                packet[17] = (byte)client.Entity.Name.Length;
                                                for (int i = 0; i < client.Entity.Name.Length; i++)
                                                {
                                                    try
                                                    {
                                                        packet[18 + i] = Convert.ToByte(client.Entity.Name[i]);

                                                    }
                                                    catch { }
                                                }
                                                if (PhoenixProject.ServerBase.Kernel.GamePool[lider].Entity.Myclan != null)
                                                    PhoenixProject.ServerBase.Kernel.GamePool[lider].Send(packet);
                                            }
                                            break;
                                        }
                                    case 12:
                                        {
                                            if (packet[16] == 1)
                                            {
                                                if (client.Entity.Myclan != null)
                                                    if (client.Entity.Myclan.Members[client.Entity.UID].Rank == 100)
                                                    {
                                                        {
                                                            if (client.Entity.Myclan.Members.Count < 7)
                                                            {

                                                                uint memeber = BitConverter.ToUInt32(packet, 8);
                                                                if (ServerBase.Kernel.GamePool.ContainsKey(memeber))
                                                                {
                                                                    Game.ClanMembers member = new PhoenixProject.Game.ClanMembers();
                                                                    member.UID = ServerBase.Kernel.GamePool[memeber].Entity.UID;
                                                                    member.Donation = 0;
                                                                    member.Rank = 10;
                                                                    member.Class = ServerBase.Kernel.GamePool[memeber].Entity.Class;
                                                                    member.Level = ServerBase.Kernel.GamePool[memeber].Entity.Level;
                                                                    member.Name = ServerBase.Kernel.GamePool[memeber].Entity.Name;
                                                                    if (!client.Entity.Myclan.Members.ContainsKey(memeber))
                                                                        client.Entity.Myclan.Members.Add(member.UID, member);

                                                                    ServerBase.Kernel.GamePool[memeber].Entity.ClanRank = 10;
                                                                    ServerBase.Kernel.GamePool[memeber].Entity.ClanId = client.Entity.ClanId;
                                                                    ServerBase.Kernel.GamePool[memeber].Entity.Myclan = client.Entity.Myclan;
                                                                    ServerBase.Kernel.GamePool[memeber].Entity.ClanName = client.Entity.ClanName;
                                                                    Database.Clans.JoinClan(ServerBase.Kernel.GamePool[memeber]);
                                                                    ServerBase.Kernel.GamePool[memeber].Screen.FullWipe();
                                                                    ServerBase.Kernel.GamePool[memeber].Screen.Reload(null);
                                                                    Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                                                                    client.Send(cl.ToArray());
                                                                    ClanMembers clan = new ClanMembers(client);
                                                                    client.Send(clan.ToArray());
                                                                }
                                                            }
                                                        }
                                                    }
                                            }
                                            break;
                                        }
                                    case 4:
                                        {
                                            ClanMembers clan = new ClanMembers(client);
                                            client.Send(clan.ToArray());
                                            break;
                                        }
                                    case 0x1d:
                                        {
                                            if (client.Entity.Myclan != null)
                                            {
                                                Network.Writer.WriteUInt32(client.Entity.Myclan.ClanId, 8, packet);
                                                Network.Writer.WriteByte(1, 16, packet);
                                                Network.Writer.WriteByte(0x0d, 17, packet);
                                                Network.Writer.WriteString("0 0 0 0 0 0 0", 18, packet);
                                                client.Send(packet);
                                                Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                                                client.Send(cl.ToArray());
                                                client.Send(packet);

                                                if (client.Entity.Myclan.ClanBuletion != "")
                                                    client.Send(cl.UpgradeBuletin(client.Entity.Myclan.ClanBuletion));
                                            }
                                            else
                                            {
                                                client.Send(packet);
                                                packet[4] = 23;
                                            }


                                            break;
                                        }
                                    case 0x18:
                                        {
                                            client.Send(packet);
                                            break;
                                        }
                                    case (byte)Game.Clan_Typ.AddAlly:
                                        {
                                            Game.Clans clan = client.Entity.Myclan;
                                            if (clan != null)
                                            {
                                                Client.GameState target;
                                                UInt32 Identifier = BitConverter.ToUInt32(packet, 8);

                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    if (clan.Allies.Count >= 5)
                                                    { client.Send(new Message("The Amount of Allies You can Have is exceeded", System.Drawing.Color.Red, Message.TopLeft)); break; }

                                                    if (ServerBase.Kernel.GamePool.TryGetValue(Identifier, out target))
                                                    {
                                                        Game.Clans tclan = target.Entity.Myclan;
                                                        if (tclan != null)
                                                        {
                                                            if (target.Entity.ClanRank == 100)
                                                            {
                                                                if (tclan.Allies.Count >= 5)
                                                                { client.Send(new Message("The Amount of Allies the Target Clan can Have is exceeded", System.Drawing.Color.Red, Message.TopLeft)); break; }

                                                                if (!clan.Allies.ContainsKey(tclan.ClanId))
                                                                {
                                                                    if (!clan.Enemies.ContainsKey(tclan.ClanId))
                                                                    {
                                                                        String clanName = client.Entity.ClanName;

                                                                        Clan2 clanp = new Clan2();

                                                                        clanp.Deserialize(packet);

                                                                        clanp.Offset16 = 2;
                                                                        clanp.Identifier = client.Entity.UID;

                                                                        Writer.WriteByte((Byte)clanName.Length, 17, clanp.ToArray());
                                                                        Writer.WriteString(clanName, 18, clanp.ToArray());

                                                                        tclan.AllyRequest = clan.ClanId;

                                                                        target.Send(clanp);
                                                                    }
                                                                    else client.Send(new Message("The clan is Your Enemy.", System.Drawing.Color.Red, Message.TopLeft));
                                                                }
                                                            }
                                                            else client.Send(new Message("This target is not the clan leader.", System.Drawing.Color.Red, Message.TopLeft));
                                                        }
                                                    }
                                                    else client.Send(new Message("Can not find target.", System.Drawing.Color.Red, Message.TopLeft));
                                                }
                                                else client.Send(new Message("You are not the clan leader.", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            break;
                                        }
                                    case (byte)Game.Clan_Typ.AcceptAlliance:
                                        {
                                            Game.Clans clan = client.Entity.Myclan;
                                            if (clan != null)
                                            {
                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    Game.Clans tclan;
                                                    if (ServerBase.Kernel.ServerClans.TryGetValue(clan.AllyRequest, out tclan))
                                                    {
                                                        if (tclan != null)
                                                        {
                                                            if (!tclan.Enemies.ContainsKey(clan.ClanId))
                                                            {
                                                                if (!clan.Enemies.ContainsKey(tclan.ClanId))
                                                                {
                                                                    if (!clan.Allies.ContainsKey(tclan.ClanId))
                                                                        clan.Allies.Add(tclan.ClanId, tclan);

                                                                    tclan.Allies.Add(clan.ClanId, clan);

                                                                    clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                                    tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                                    clan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", tclan.ClanName), System.Drawing.Color.Red, Message.Clan));
                                                                    tclan.SendMessage(new Message(String.Format("Our Clan has Allianced with {0}", clan.ClanName), System.Drawing.Color.Red, Message.Clan));

                                                                    clan.AddRelation(tclan.ClanId, ClanRelations.RelationTypes.Allies);
                                                                    tclan.AddRelation(clan.ClanId, ClanRelations.RelationTypes.Allies);

                                                                    clan.AllyRequest = tclan.AllyRequest = 0;
                                                                }
                                                                else client.Send(new Message("This Clan is Your Enemy.", System.Drawing.Color.Red, Message.TopLeft));
                                                            }
                                                            client.Send(new Message("This Clan Has Enemied You!.", System.Drawing.Color.Red, Message.TopLeft));
                                                        }
                                                    }
                                                    else client.Send(new Message("Can not find target", System.Drawing.Color.Red, Message.TopLeft));
                                                }
                                                else client.Send(new Message("You are not the clan leader.", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            break;
                                        }
                                    case (byte)Game.Clan_Typ.DeleteEnemy:
                                        {
                                            Game.Clans clan = client.Entity.Myclan;
                                            if (clan != null)
                                            {
                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    Clan2 clanp = new Clan2();
                                                    clanp.Deserialize(packet);

                                                    String EnemyTarget = clanp.Offset18String;
                                                    UInt32 ClanId = clanp.GetClanId(EnemyTarget);

                                                    Game.Clans tclan;
                                                    if (ServerBase.Kernel.ServerClans.TryGetValue(ClanId, out tclan))
                                                    {
                                                        clan.Enemies.Remove(ClanId);

                                                        clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                        clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                        clan.SendMessage(new Message(String.Format("We are no longer Enemies With {0}", clan.ClanId), System.Drawing.Color.Red, Message.Clan));

                                                        client.Send(clanp);
                                                    }
                                                }
                                                else client.Send(new Message("You are not authorized to continue with this action", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            break;
                                        }
                                    case (byte)Game.Clan_Typ.DeleteAlly:
                                        {
                                            Game.Clans clan = client.Entity.Myclan;
                                            if (clan != null)
                                            {
                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    Clan2 clanp = new Clan2();
                                                    clanp.Deserialize(packet);

                                                    String AlliedTarget = clanp.Offset18String;
                                                    UInt32 ClanId = clanp.GetClanId(AlliedTarget);

                                                    Game.Clans tclan;
                                                    if (clan.Allies.TryGetValue(ClanId, out tclan))
                                                    {
                                                        clan.Allies.Remove(ClanId);
                                                        tclan.Allies.Remove(clan.ClanId);

                                                        clan.DeleteRelation(ClanId, ClanRelations.RelationTypes.Allies);
                                                        tclan.DeleteRelation(clan.ClanId, ClanRelations.RelationTypes.Allies);

                                                        clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                                                        tclan.SendMessage(new ClanRelations(tclan, ClanRelations.RelationTypes.Allies));

                                                        clan.SendMessage(new Message(String.Format("We are no longer allied with {0}", tclan.ClanName), System.Drawing.Color.Red, Message.Clan));
                                                        tclan.SendMessage(new Message(String.Format("We are no longer allied with {0}", clan.ClanName), System.Drawing.Color.Red, Message.Clan));

                                                        client.Send(clanp);
                                                    }
                                                }
                                                else client.Send(new Message("You are not authorized to continue with this action", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                            break;
                                        }
                                    case (byte)Game.Clan_Typ.AddEnemy:
                                        {
                                            Game.Clans clan = client.Entity.Myclan;
                                            if (clan != null)
                                            {
                                                if (client.Entity.ClanRank == 100)
                                                {
                                                    String Enemy = System.Text.Encoding.UTF7.GetString(packet, 18, packet[17]).Trim(new Char[] { '\0' });
                                                    UInt32 ClanId = 0;
                                                    var AllCland = ServerBase.Kernel.ServerClans.Values.ToArray();
                                                    foreach (Game.Clans c_clan in AllCland)
                                                    {
                                                        if (Enemy == c_clan.ClanName)
                                                        {
                                                            ClanId = c_clan.ClanId;
                                                            break;
                                                        }
                                                    }
                                                    if (ClanId == 0) break;
                                                    if (!clan.Enemies.ContainsKey(ClanId))
                                                    {
                                                        if (!clan.Allies.ContainsKey(ClanId))
                                                        {
                                                            if (clan.Enemies.Count >= 5)
                                                            { client.Send(new Message("The Ammount of Enemies You can Have is exceeded", System.Drawing.Color.Red, Message.TopLeft)); break; }

                                                            Game.Clans tclan;
                                                            if (ServerBase.Kernel.ServerClans.TryGetValue(ClanId, out tclan))
                                                            {
                                                                if (!clan.Enemies.ContainsKey(tclan.ClanId))
                                                                    clan.Enemies.Add(tclan.ClanId, tclan);

                                                                clan.AddRelation(ClanId, ClanRelations.RelationTypes.Enemies);

                                                                clan.SendMessage(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));

                                                                clan.SendMessage(new Message(String.Format("We Have Enemied the clan {0}", tclan.ClanName), System.Drawing.Color.Red, Message.Clan));
                                                                tclan.SendMessage(new Message(String.Format("The Clan {0} Has Made us their Enemy!", clan.ClanName), System.Drawing.Color.Red, Message.Clan));
                                                            }
                                                        }
                                                        else client.Send(new Message("This clan is one of your alliance, What has gone wrong?", System.Drawing.Color.Red, Message.TopLeft));
                                                    }
                                                    else client.Send(new Message("This clan is Already One of Your Enemies", System.Drawing.Color.Red, Message.TopLeft));
                                                }
                                            }
                                            break;
                                        }
                                    default:
                                        Console.WriteLine("Clan Type " + packet[4]);
                                        break;

                                }
                                break;
                            }
                        #endregion
                        #region SubClass (2320)
                        case 2320:
                            {
                                byte[] Packet = null;
                                switch (packet[4])
                                {
                                    //9 = learn 10= upgrade pro
                                    #region [Restore/Switch]
                                    case 0:
                                        byte To = packet[6];
                                        Packet = new byte[0];
                                        client.Send(packet);
                                        if (To > 0)//Switch
                                        {
                                            /*switch ((Game.ClassID)To)
                                            {
                                                case Game.ClassID.Wrangler:
                                                    {
                                                        switch (client.Entity.SubClasses.Classes[To].Level)
                                                        {
                                                            case 9:
                                                                {
                                                                    //client.Entity.Hitpoints += 1200;
                                                                    //client.Entity.MaxHitpoints += 1200;
                                                                    break;
                                                                }
                                                        }
                                                        break;
                                                    }
                                            }*/
                                            Packet = new byte[0];
                                            Packet = new SubClassShowFull(true) { ID = 1, Class = To, Level = client.Entity.SubClasses.Classes[To].Phase }.ToArray();//client.Entity.SubClasses.Classes[To].Phase
                                            client.Send(Packet);
                                            //Packet = new SubClass(client.Entity).ToArray();
                                            //client.Send(Packet);
                                            client.Entity.SubClass = To;
                                            /// client.Entity.SubClassLevel = client.Entity.SubClasses.Classes[To].Level;
                                            client.Entity.SubClasses.Active = To;
                                            client.Entity.SubClassesActive = To;
                                            // Console.WriteLine("s " + To + "");
                                        }
                                        else//Restore
                                        {
                                            client.Entity.SubClass = 0;
                                            //client.Entity.SubClassLevel = 0;
                                            client.Entity.SubClasses.Active = 0;
                                            client.Entity.SubClassesActive = 0;
                                            Packet = new SubClassShowFull(true) { ID = 1 }.ToArray();
                                            client.Send(Packet);
                                        }
                                        client.SendScreen(client.Entity.SpawnPacket, false);
                                        break;
                                    #endregion
                                    #region [Upgrade]
                                    case 2:
                                        {
                                            byte Class = packet[6];
                                            ushort Required = 0;
                                            Statement.SubClass Sc = client.Entity.SubClasses.Classes[Class];
                                            #region [Set Required]
                                            switch ((Statement.ClassID)Sc.ID)
                                            {
                                                case Statement.ClassID.MartialArtist:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 300; break;
                                                        case 2: Required = 900; break;
                                                        case 3: Required = 1800; break;
                                                        case 4: Required = 2700; break;
                                                        case 5: Required = 3600; break;
                                                        case 6: Required = 5100; break;
                                                        case 7: Required = 6900; break;
                                                        case 8: Required = 8700; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                                case Statement.ClassID.Warlock:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 300; break;
                                                        case 2: Required = 900; break;
                                                        case 3: Required = 1800; break;
                                                        case 4: Required = 2700; break;
                                                        case 5: Required = 3600; break;
                                                        case 6: Required = 5100; break;
                                                        case 7: Required = 6900; break;
                                                        case 8: Required = 8700; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                                case Statement.ClassID.ChiMaster:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 600; break;
                                                        case 2: Required = 1800; break;
                                                        case 3: Required = 3600; break;
                                                        case 4: Required = 5400; break;
                                                        case 5: Required = 7200; break;
                                                        case 6: Required = 10200; break;
                                                        case 7: Required = 13800; break;
                                                        case 8: Required = 17400; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                                case Statement.ClassID.Sage:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 400; break;
                                                        case 2: Required = 1200; break;
                                                        case 3: Required = 2400; break;
                                                        case 4: Required = 3600; break;
                                                        case 5: Required = 4800; break;
                                                        case 6: Required = 6800; break;
                                                        case 7: Required = 9200; break;
                                                        case 8: Required = 11600; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                                case Statement.ClassID.Apothecary:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 100; break;
                                                        case 2: Required = 200; break;
                                                        case 3: Required = 300; break;
                                                        case 4: Required = 400; break;
                                                        case 5: Required = 500; break;
                                                        case 6: Required = 1000; break;
                                                        case 7: Required = 4000; break;
                                                        case 8: Required = 9000; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                                case Statement.ClassID.Wrangler:
                                                case Statement.ClassID.Performer:
                                                    switch (Sc.Level)
                                                    {
                                                        case 1: Required = 400; break;
                                                        case 2: Required = 1200; break;
                                                        case 3: Required = 2400; break;
                                                        case 4: Required = 3600; break;
                                                        case 5: Required = 4800; break;
                                                        case 6: Required = 6800; break;
                                                        case 7: Required = 9200; break;
                                                        case 8: Required = 11600; break;
                                                        case 9: Required = ushort.MaxValue; break;
                                                    }
                                                    break;
                                            }
                                            #endregion
                                            if (client.Entity.SubClasses.StudyPoints >= Required)
                                            {
                                                client.Entity.SubClasses.StudyPoints -= Required;
                                                client.Entity.SubClasses.Classes[Class].Level++;
                                                Packet = new byte[0];
                                                Packet = new SubClassShowFull(true) { ID = 1, Class = Class, Level = client.Entity.SubClasses.Classes[Class].Level }.ToArray();
                                                client.Send(Packet);
                                                Packet = new SubClass(client.Entity).ToArray();
                                                client.Send(Packet);
                                                Database.SubClassTable.Update(client.Entity, client.Entity.SubClasses.Classes[Class]);
                                                //Database.SubClassTable.Update(client);
                                            }
                                            break;
                                        }
                                    #endregion
                                    #region [Info]
                                    case 6:
                                        Game.Entity Owner = client.Entity;
                                        if (Owner.SubClasses.Classes.Count > 0)
                                        {
                                            Statement.SubClass[] Classes = new Statement.SubClass[Owner.SubClasses.Classes.Count];
                                            Owner.SubClasses.Classes.Values.CopyTo(Classes, 0);
                                            foreach (Statement.SubClass Class in Classes)
                                            {
                                                if (Class.ID == 9)
                                                {
                                                    for (byte i = 0; i < Class.Phase; i++)
                                                    {
                                                        Packet = new byte[0];
                                                        Packet = new SubClassShowFull(true) { ID = 4, Class = Class.ID, Level = Class.Level }.ToArray();
                                                        client.Send(Packet);
                                                    }
                                                    continue;
                                                }
                                                Packet = new byte[0];
                                                Packet = new SubClassShowFull(true) { ID = 4, Class = Class.ID, Level = Class.Level }.ToArray();
                                                client.Send(Packet);
                                            }
                                        }
                                        Packet = new SubClass(client.Entity).ToArray();
                                        client.Send(Packet);
                                        break;
                                    #endregion
                                    #region [Learn]
                                    case 9://class type packet6
                                        byte Class1 = packet[6];
                                        if (PacketHandler.PassLearn((byte)packet[6], client.Entity))
                                        {
                                            if (!client.Entity.SubClasses.Classes.ContainsKey((byte)packet[6]))
                                            {
                                                {
                                                    client.Entity.SubClasses.Classes.Add((byte)packet[6], new PhoenixProject.Statement.SubClass() { ID = (byte)packet[6], Level = 1, Phase = 1 });
                                                    PhoenixProject.Database.SubClassTable.Insert(client.Entity, (byte)packet[6]);
                                                    Packet = new byte[0];
                                                    Packet = new SubClassShowFull(true) { ID = 1, Class = Class1, Level = client.Entity.SubClasses.Classes[Class1].Level }.ToArray();
                                                    client.Send(Packet);
                                                    Packet = new SubClass(client.Entity).ToArray();
                                                    client.Send(Packet);
                                                }
                                            }
                                        }

                                        break;
                                    #endregion
                                    #region [UpgradePro]
                                    case 10:
                                        byte Class2 = packet[6];

                                        if (client.Entity.SubClasses.Classes[(byte)Class2].Phase < client.Entity.SubClasses.Classes[(byte)Class2].Level)
                                        {
                                            client.Entity.SubClasses.Classes[(byte)Class2].Phase++;
                                            Database.SubClassTable.Update(client.Entity, client.Entity.SubClasses.Classes[(byte)Class2]);
                                            Packet = new byte[0];
                                            Packet = new SubClassShowFull(true) { ID = 1, Class = Class2, Level = client.Entity.SubClasses.Classes[Class2].Level }.ToArray();
                                            client.Send(Packet);
                                            Packet = new SubClass(client.Entity).ToArray();
                                            client.Send(Packet);
                                        }

                                        break;
                                    #endregion
                                    default:
                                        Console.WriteLine("Unknown 2320 packet type " + packet[4]);
                                        break;
                                }
                                break;
                            }
                        #endregion
                        #region ItemAdding Stabilization
                        case 1038:
                            {
                                ItemAddingStabilization stabilization = new ItemAddingStabilization(false);
                                stabilization.Deserialize(packet);
                                StabilazeArtifact(stabilization, client);
                                break;
                            }
                        #endregion
                        #region Data (10010)
                        case 10010:
                            {

                                if (client.Action != 2)
                                    return;
                                Data gData = new Data(false);
                                gData.Deserialize(packet);
                                if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                                {
                                    client.Send(new Message("Data ID: " + gData.ID, System.Drawing.Color.CadetBlue, Message.Talk));
                                }
                                switch (gData.ID)
                                {
                                    /*case Data.AllowAnimation:
                                        {
                                            LoginMessages(client);
                                            client.Send(new FlowerPacket(client.Entity.Flowers));
                                            //Database.SubClassTable.Load(client.Entity);
                                            ClientEquip equips = new ClientEquip();
                                            equips.DoEquips(client);
                                            client.Send(equips);
                                            client.Send(packet);
                                        }
                                        break;*/
                                    #region Appearance
                                    case 0xb2:
                                        {
                                            byte appearance = (byte)gData.dwParam;
                                            Data app = new Data(true)
                                            {
                                                ID = 0xb2,
                                                UID = client.Entity.UID,
                                                dwParam = appearance,
                                                wParam1 = client.Entity.X,
                                                wParam2 = client.Entity.Y
                                            };
                                            client.Send(gData);
                                            client.Send(app);
                                            client.SendScreen(gData, true);
                                            client.SendScreen(app, true);
                                            return;
                                        }
                                    #endregion
                                    case 132:
                                        {
                                            // Console.WriteLine(" this ");
                                            client.Disconnect();
                                            break;
                                        }
                                    /* case Data.KimoGearDis:
                                         {
                                             Console.WriteLine("data " + gData.dwParam + "");
                                             break;
                                         }*/
                                    case Data.UpdateProf:
                                        if (client != null)
                                        {
                                            ushort UplevelProficiency;
                                            UplevelProficiency = (ushort)gData.dwParam;

                                            var prof = client.Proficiencies[UplevelProficiency];

                                            if ((prof.Level >= 1) && (prof.Level <= 19))
                                            {
                                                if (prof.Level == 19 && client.Entity.ConquerPoints >= 1420)
                                                {
                                                    client.Entity.ConquerPoints -= 1420;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 18 && client.Entity.ConquerPoints >= 1154)
                                                {
                                                    client.Entity.ConquerPoints -= 1154;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 17 && client.Entity.ConquerPoints >= 799)
                                                {
                                                    client.Entity.ConquerPoints -= 799;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 16 && client.Entity.ConquerPoints >= 548)
                                                {
                                                    client.Entity.ConquerPoints -= 548;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 15 && client.Entity.ConquerPoints >= 375)
                                                {
                                                    client.Entity.ConquerPoints -= 375;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level >= 11 && prof.Level <= 14 && client.Entity.ConquerPoints >= 324)
                                                {
                                                    client.Entity.ConquerPoints -= 324;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 10 && client.Entity.ConquerPoints >= 270)
                                                {
                                                    client.Entity.ConquerPoints -= 270;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 9 && client.Entity.ConquerPoints >= 162)
                                                {
                                                    client.Entity.ConquerPoints -= 162;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 8 && client.Entity.ConquerPoints >= 135)
                                                {
                                                    client.Entity.ConquerPoints -= 135;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 7 && client.Entity.ConquerPoints >= 81)
                                                {
                                                    client.Entity.ConquerPoints -= 81;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 6 && client.Entity.ConquerPoints >= 54)
                                                {
                                                    client.Entity.ConquerPoints -= 54;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level >= 2 && prof.Level <= 5 && client.Entity.ConquerPoints >= 27)
                                                {
                                                    client.Entity.ConquerPoints -= 27;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                                if (prof.Level == 1)
                                                {
                                                    client.Entity.ConquerPoints -= 22;

                                                    prof.Level++;
                                                    prof.Experience = 0;
                                                    prof.Send(client);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //break;
                                        }
                                        break;
                                    case Data.UpdateSpell:
                                        if (client != null)
                                        {
                                            ushort UplevelProficiency;
                                            UplevelProficiency = (ushort)gData.dwParam;
                                            if (client.Spells.ContainsKey(UplevelProficiency))
                                            {
                                                var prof = client.Spells[UplevelProficiency];
                                                if (prof != null)
                                                {
                                                    int num2 = (int)Database.SpellTable.SpellInformations[UplevelProficiency][prof.Level].CPUpgradeRatio;
                                                    int num3 = Math.Max((int)prof.Experience, 1);
                                                    int num4 = 100 - ((int)(((ulong)num3) / ((ulong)Math.Max((uint)(Database.SpellTable.SpellInformations[UplevelProficiency][prof.Level].NeedExperience / 100), (uint)1))));
                                                    uint num = (uint)(((double)((num2 * num4) / 100)) / 22.2);
                                                    if (client.Entity.ConquerPoints >= num)
                                                    {


                                                        client.Entity.ConquerPoints -= num;
                                                        // Console.WriteLine(" " + num + "");
                                                        prof.Level++;
                                                        prof.Experience = 0;
                                                        prof.Send(client);
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you dont have " + num + " cps i cant help you!");
                                                        npc.OptionID = 255;
                                                        client.Send(npc.ToArray());
                                                        break;
                                                        //sorry you dont have 100 cps 
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            //break;
                                        }
                                        break;
                                    case Data.SwingPickaxe:
                                        client.Mining = true;
                                        break;
                                    case Data.Revive:
                                        Revive(gData, client);
                                        break;
                                    case Data.UsePortal:
                                        UsePortal(gData, client);
                                        break;
                                    case Data.ChangePKMode:
                                        ChangePKMode(gData, client);
                                        break;
                                    case Data.ChangeAction:
                                        ChangeAction(gData, client);
                                        break;
                                    case Data.ChangeDirection:
                                        ChangeDirection(gData, client);
                                        break;
                                    case Data.Hotkeys:
                                        client.Send(packet);
                                        break;
                                    case Data.ConfirmSpells:
                                        if (client.Spells != null)
                                            foreach (Interfaces.ISkill spell in client.Spells.Values)
                                                if (spell.ID != 3060)
                                                    spell.Send(client);
                                        client.Send(packet);
                                        break;
                                    case Data.ConfirmProficiencies:
                                        if (client.Proficiencies != null)
                                            foreach (Interfaces.IProf proficiency in client.Proficiencies.Values)
                                                proficiency.Send(client);
                                        client.Send(packet);
                                        break;
                                    case Data.ConfirmGuild:
                                        client.Send(packet);
                                        break;
                                    case Data.ConfirmFriends:
                                        #region Friends/Enemy/TradePartners/Apprentices
                                        Message msg2 = new Message("Your friend, " + client.Entity.Name + ", has logged on.", System.Drawing.Color.Red, Message.TopLeft);

                                        foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                                        {
                                            if (friend.IsOnline)
                                            {
                                                var pckt = new KnownPersons(true)
                                                {
                                                    UID = client.Entity.UID,
                                                    Type = KnownPersons.RemovePerson,
                                                    Name = client.Entity.Name,
                                                    Online = true
                                                };
                                                friend.Client.Send(pckt);
                                                pckt.Type = KnownPersons.AddFriend;
                                                friend.Client.Send(pckt);
                                                friend.Client.Send(msg2);
                                            }
                                            client.Send(new KnownPersons(true)
                                            {
                                                UID = friend.ID,
                                                Type = KnownPersons.AddFriend,
                                                Name = friend.Name,
                                                Online = friend.IsOnline
                                            });
                                            if (friend.Message != "")
                                            {
                                                client.Send(new Message(friend.Message, client.Entity.Name, friend.Name, System.Drawing.Color.Red, Message.Whisper));
                                                Database.KnownPersons.UpdateMessageOnFriend(friend.ID, client.Entity.UID, "");
                                            }
                                        }

                                        foreach (Game.ConquerStructures.Society.Enemy enemy in client.Enemy.Values)
                                        {
                                            client.Send(new KnownPersons(true)
                                            {
                                                UID = enemy.ID,
                                                Type = KnownPersons.AddEnemy,
                                                Name = enemy.Name,
                                                Online = enemy.IsOnline
                                            });
                                        }
                                        Message msg3 = new Message("Your partner, " + client.Entity.Name + ", has logged in.", System.Drawing.Color.Red, Message.TopLeft);

                                        foreach (Game.ConquerStructures.Society.TradePartner partner in client.Partners.Values)
                                        {
                                            if (partner.IsOnline)
                                            {
                                                var packet3 = new TradePartner(true)
                                                {
                                                    UID = client.Entity.UID,
                                                    Type = TradePartner.BreakPartnership,
                                                    Name = client.Entity.Name,
                                                    HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                                                    Online = true
                                                };
                                                partner.Client.Send(packet3);
                                                packet3.Type = TradePartner.AddPartner;
                                                partner.Client.Send(packet3);
                                                partner.Client.Send(msg3);
                                            }
                                            var packet4 = new TradePartner(true)
                                            {
                                                UID = partner.ID,
                                                Type = TradePartner.AddPartner,
                                                Name = partner.Name,
                                                HoursLeft = (int)(new TimeSpan(partner.ProbationStartedOn.AddDays(3).Ticks).TotalHours - new TimeSpan(DateTime.Now.Ticks).TotalHours),
                                                Online = partner.IsOnline
                                            };
                                            client.Send(packet4);
                                        }

                                        foreach (Game.ConquerStructures.Society.Apprentice appr in client.Apprentices.Values)
                                        {
                                            if (appr.IsOnline)
                                            {
                                                ApprenticeInformation AppInfo = new ApprenticeInformation();
                                                AppInfo.Apprentice_ID = appr.ID;
                                                AppInfo.Apprentice_Level = appr.Client.Entity.Level;
                                                AppInfo.Apprentice_Class = appr.Client.Entity.Class;
                                                AppInfo.Apprentice_PkPoints = appr.Client.Entity.PKPoints;
                                                AppInfo.Apprentice_Experience = appr.Actual_Experience;
                                                AppInfo.Apprentice_Composing = appr.Actual_Plus;
                                                AppInfo.Apprentice_Blessing = appr.Actual_HeavenBlessing;
                                                AppInfo.Apprentice_Name = appr.Name;
                                                AppInfo.Apprentice_Online = true;
                                                AppInfo.Apprentice_Spouse_Name = appr.Client.Entity.Spouse;
                                                AppInfo.Enrole_date = appr.EnroleDate;
                                                AppInfo.Mentor_ID = client.Entity.UID;
                                                AppInfo.Mentor_Mesh = client.Entity.Mesh;
                                                AppInfo.Mentor_Name = client.Entity.Name;
                                                AppInfo.Type = 2;
                                                client.Send(AppInfo);

                                                MentorInformation Information = new MentorInformation(true);
                                                Information.Mentor_Type = 1;
                                                Information.Mentor_ID = client.Entity.UID;
                                                Information.Apprentice_ID = appr.ID;
                                                Information.Enrole_Date = appr.EnroleDate;
                                                Information.Mentor_Level = client.Entity.Level;
                                                Information.Mentor_Class = client.Entity.Class;
                                                Information.Mentor_PkPoints = client.Entity.PKPoints;
                                                Information.Mentor_Mesh = client.Entity.Mesh;
                                                Information.Mentor_Online = true;
                                                Information.Shared_Battle_Power = (uint)(((client.Entity.BattlePower - client.Entity.ExtraBattlePower) - (appr.Client.Entity.BattlePower - appr.Client.Entity.ExtraBattlePower)) / 3.3F);
                                                Information.String_Count = 3;
                                                Information.Mentor_Name = client.Entity.Name;
                                                Information.Apprentice_Name = appr.Name;
                                                Information.Mentor_Spouse_Name = client.Entity.Spouse;
                                                appr.Client.ReviewMentor();
                                                appr.Client.Send(Information);
                                            }
                                            else
                                            {
                                                ApprenticeInformation AppInfo = new ApprenticeInformation();
                                                AppInfo.Apprentice_ID = appr.ID;
                                                AppInfo.Apprentice_Name = appr.Name;
                                                AppInfo.Apprentice_Online = false;
                                                AppInfo.Enrole_date = appr.EnroleDate;
                                                AppInfo.Mentor_ID = client.Entity.UID;
                                                AppInfo.Mentor_Mesh = client.Entity.Mesh;
                                                AppInfo.Mentor_Name = client.Entity.Name;
                                                AppInfo.Type = 2;
                                                client.Send(AppInfo);
                                            }
                                        }
                                        #endregion
                                        client.Send(packet);
                                        break;
                                    case Data.EndTeleport:
                                        break;
                                    case Data.GetSurroundings:
                                        if (client.Booth != null)
                                        {
                                            client.Entity.TransformationID = 0;
                                            client.Booth.Remove();
                                            client.Booth = null;
                                        }
                                        GetSurroundings(client);
                                        client.Send(new MapStatus() { BaseID = (ushort)client.Map.BaseID, ID = (uint)client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status });
                                        Game.Weather.CurrentWeatherBase.Send(client);
                                        client.Send(gData);
                                        break;
                                    case Data.SetLocation:
                                        SetLocation(gData, client);
                                        client.Entity.MapRegion = Region.Region.FindRegion((uint)client.Map.BaseID, client.Entity.X, client.Entity.Y);
                                        break;
                                    case Data.Jump:
                                        {
                                            PlayerJump(gData, client);

                                            break;
                                        }
                                    case Data.BlueCountdown:
                                        {
                                            // PlayerJump(gData, client);

                                            break;
                                        }
                                    case Data.UnknownEntity:
                                        {
                                            #region UnknownEntity
                                            Client.GameState pClient = null;
                                            if (ServerBase.Kernel.GamePool.TryGetValue(gData.dwParam, out pClient))
                                            {
                                                if (ServerBase.Kernel.GetDistance(pClient.Entity.X, pClient.Entity.Y, client.Entity.X, client.Entity.Y) <= ServerBase.Constants.pScreenDistance && client.Map.ID == pClient.Map.ID)
                                                {
                                                    if (pClient.Guild != null)
                                                        pClient.Guild.SendName(client);
                                                    if (client.Guild != null)
                                                        client.Guild.SendName(pClient);
                                                    if (pClient.Entity.UID != client.Entity.UID)
                                                    {
                                                        if (pClient.Map.ID == client.Map.ID)
                                                        {
                                                            if (pClient.Map.BaseID == 700)
                                                            {
                                                                if (client.QualifierGroup != null)
                                                                {
                                                                    if (pClient.QualifierGroup != null)
                                                                    {
                                                                        client.Entity.SendSpawn(pClient, false);
                                                                        pClient.Entity.SendSpawn(client, false);
                                                                    }
                                                                    else
                                                                    {
                                                                        client.Entity.SendSpawn(pClient, false);
                                                                        client.Screen.Add(pClient.Entity);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (pClient.QualifierGroup != null)
                                                                    {
                                                                        pClient.Entity.SendSpawn(client, false);
                                                                        pClient.Screen.Add(client.Entity);
                                                                    }
                                                                    else
                                                                    {
                                                                        client.Entity.SendSpawn(pClient, false);
                                                                        pClient.Entity.SendSpawn(client, false);
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                client.Entity.SendSpawn(pClient, false);
                                                                pClient.Entity.SendSpawn(client, false);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                Game.Entity monster = null;
                                                for (int x = 0; x < client.Map.Entities.Count; x++)
                                                {
                                                    if (x >= client.Map.Entities.Count)
                                                        break;
                                                    if (client.Map.Entities[x] != null)
                                                    {
                                                        if (client.Map.Entities[x].UID == gData.dwParam)
                                                        {
                                                            monster = client.Map.Entities[x];
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (monster != null)
                                                {
                                                    if (ServerBase.Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= ServerBase.Constants.pScreenDistance)
                                                    {
                                                        monster.SendSpawn(client, false);
                                                    }
                                                }
                                                for (int x = 0; x < client.Map.Companions.Count; x++)
                                                {
                                                    if (x >= client.Map.Companions.Count)
                                                        break;
                                                    if (client.Map.Companions[x] != null)
                                                    {
                                                        if (client.Map.Companions[x].UID == gData.dwParam)
                                                        {
                                                            monster = client.Map.Companions[x];
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (monster != null)
                                                {
                                                    if (ServerBase.Kernel.GetDistance(monster.X, monster.Y, client.Entity.X, client.Entity.Y) <= ServerBase.Constants.pScreenDistance)
                                                    {
                                                        monster.SendSpawn(client, false);
                                                    }
                                                }
                                            }
                                            #endregion
                                            break;
                                        }
                                    case Data.CompleteLogin:
                                        {
                                            client.MonsterHunterStats = new MonsterHunterStats(client);
                                            //client.MonsterHunterStats.Kills = (ushort)client.Entity.Status4;
                                            // client.MonsterHunterStats.Load(client);
                                            LoginMessages(client);
                                            Network.GamePackets.Weather weather = new Network.GamePackets.Weather(true);
                                            weather.WeatherType = (uint)Program.WeatherType;
                                            weather.Intensity = 100;
                                            weather.Appearence = 2;
                                            weather.Direction = 4;

                                            client.Send(new FlowerPacket(client.Entity.Flowers));
                                            client.Send(new FlowerPacket3(client));
                                            /*ClientEquip equips = new ClientEquip();
                                            equips.DoEquips(client);
                                            client.Send(equips);*/
                                            client.Send(packet);
                                            client.Send(weather);
                                            break;
                                        }
                                    case Data.ChangeFace:
                                        ChangeFace(gData, client);
                                        break;
                                    case Data.ObserveEquipment:
                                        ObserveEquipment2(gData, client);
                                        break;
                                    case Data.ObserveEquipment2:
                                        ObserveEquipment(gData, client);
                                        break;
                                    case 408:
                                        {
                                            /* if (!client.ChangeGear)
                                             {
                                                 Game.KimoChangeGear.Load(client);
                                             }
                                             else
                                             {

                                                 Game.KimoChangeGear.Load2(client);
                                             }
                                             client.ChangeGear = true;*/
                                            break;
                                        }

                                    case Data.ObserveKnownPerson:
                                        ObserveEquipment(gData, client);
                                        break;
                                    case Data.ViewEnemyInfo:
                                        {
                                            if (client.Enemy.ContainsKey(gData.dwParam))
                                            {
                                                if (client.Enemy[gData.dwParam].IsOnline)
                                                {
                                                    KnownPersonInfo info = new KnownPersonInfo(true);
                                                    info.Fill(client.Enemy[gData.dwParam], true, false);
                                                    if (client.Enemy[gData.dwParam].Client.Guild != null)
                                                        client.Enemy[gData.dwParam].Client.Guild.SendName(client);
                                                    client.Send(info);
                                                }
                                            }
                                            break;
                                        }
                                    case Data.ViewFriendInfo:
                                        {
                                            if (client.Friends.ContainsKey(gData.dwParam))
                                            {
                                                if (client.Friends[gData.dwParam].IsOnline)
                                                {
                                                    KnownPersonInfo info = new KnownPersonInfo(true);
                                                    info.Fill(client.Friends[gData.dwParam], false, false);
                                                    if (client.Friends[gData.dwParam].Client.Guild != null)
                                                        client.Friends[gData.dwParam].Client.Guild.SendName(client);
                                                    client.Send(info);
                                                }
                                            }
                                            break;
                                        }
                                    case Data.ViewPartnerInfo:
                                        {
                                            if (client.Partners.ContainsKey(gData.dwParam))
                                            {
                                                if (client.Partners[gData.dwParam].IsOnline)
                                                {
                                                    TradePartnerInfo info = new TradePartnerInfo(true);
                                                    info.Fill(client.Partners[gData.dwParam]);
                                                    if (client.Partners[gData.dwParam].Client.Guild != null)
                                                        client.Partners[gData.dwParam].Client.Guild.SendName(client);
                                                    client.Send(info);
                                                }
                                            }
                                            break;
                                        }
                                    case Data.EndFly:
                                        client.Entity.RemoveFlag(Update.Flags.Fly);
                                        break;
                                    case Data.EndTransformation:
                                        client.Entity.Untransform();
                                        break;
                                    case Data.XPListEnd:
                                    case Data.Die:
                                        break;
                                    case Data.Confiscator:
                                        client.Send(packet);
                                        break;
                                    case Data.OwnBooth:
                                        {
                                            client.Booth = new PhoenixProject.Game.ConquerStructures.Booth(client, gData);
                                            client.Send(new Data(true) { ID = Data.ChangeAction, UID = client.Entity.UID, dwParam = 0 });
                                            break;
                                        }

                                    case Data.Away:
                                        {
                                            if (client.Entity.Away == 0)
                                                client.Entity.Away = 1;
                                            else
                                                client.Entity.Away = 0;
                                            client.SendScreenSpawn(client.Entity, false);
                                            break;
                                        }
                                    case Data.DeleteCharacter:
                                        {
                                            if ((client.WarehousePW == null || client.WarehousePW == "" || client.WarehousePW == "0" && gData.dwParam == 0) || (client.WarehousePW == gData.dwParam.ToString()))
                                            {
                                                client.Account.TempID = 400;

                                                client.Disconnect();
                                            }
                                            break;
                                        }

                                    case Data.TeamSearchForMember:
                                        {
                                            if (client.Team != null)
                                            {
                                                Client.GameState Client = null;
                                                if (!client.Team.IsTeammate(gData.UID))
                                                    return;
                                                if (Kernel.GamePool.TryGetValue(gData.UID, out Client))
                                                {
                                                    // Console.WriteLine(" " + gData.dwParam + "");
                                                    gData.wParam1 = Client.Entity.X;
                                                    gData.wParam2 = Client.Entity.Y;
                                                    gData.Send(client);
                                                }
                                            }
                                            break;
                                        }
                                    default:
                                        if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.ProjectManager || client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                                            client.Send(new Message("Unknown generaldata id: " + gData.ID, System.Drawing.Color.CadetBlue, Message.Talk));
                                        break;
                                }
                                break;
                            }
                        #endregion
                        #region TimePacket (1033)
                        case 1033:
                            {
                                ServerTime time = new ServerTime();
                                time.Year = (uint)DateTime.Now.Year;
                                time.Month = (uint)DateTime.Now.Month;
                                time.DayOfYear = (uint)DateTime.Now.DayOfYear;
                                time.DayOfMonth = (uint)DateTime.Now.Day;
                                time.Hour = (uint)DateTime.Now.Hour;
                                time.Minute = (uint)DateTime.Now.Minute;
                                time.Second = (uint)DateTime.Now.Second;
                                client.Send(time);
                                break;
                            }
                        #endregion
                        #region MemoryAgate
                        case 2110:
                            {
                                uint ItemUID = BitConverter.ToUInt32(packet, 8);
                                switch (packet[4])
                                {
                                    case 1:
                                        {
                                            if (client.Map.IsDynamic()) return;
                                            if (ServerBase.Constants.revnomap.Contains(client.Entity.MapID))
                                                return;
                                            Interfaces.IConquerItem Item = null;

                                            if (client.Inventory.TryGetItem(ItemUID, out Item))
                                            {
                                                if (Item.Agate_map.ContainsKey(packet[12]))
                                                {
                                                    Item.Agate_map[(uint)packet[12]] = client.Entity.MapID
                                                       + "~" + client.Entity.X
                                                       + "~" + client.Entity.Y;
                                                    Database.ConquerItemTable.UpdateItemAgate(Item);
                                                    Item.SendAgate(client);
                                                    break;
                                                }
                                                if (packet[12] > Item.Agate_map.Count)
                                                {
                                                    Item.Agate_map.Add((byte)(Item.Agate_map.Count), client.Entity.MapID
                                                       + "~" + client.Entity.X
                                                       + "~" + client.Entity.Y);
                                                    Database.ConquerItemTable.UpdateItemAgate(Item);
                                                    Item.SendAgate(client);
                                                    break;
                                                }
                                                else
                                                {
                                                    if (!Item.Agate_map.ContainsKey(packet[12]))
                                                    {

                                                        Item.Agate_map.Add(packet[12], client.Entity.MapID
                                                            + "~" + client.Entity.X

                                                           + "~" + client.Entity.Y);
                                                        Database.ConquerItemTable.UpdateItemAgate(Item);
                                                        Item.SendAgate(client);
                                                    }
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    case 3:
                                        {
                                            if (client.Map.IsDynamic()) return;
                                            if (ServerBase.Constants.revnomap.Contains(client.Entity.MapID))
                                                return;
                                            Interfaces.IConquerItem Item = null;
                                            if (client.Inventory.TryGetItem(ItemUID, out Item))
                                            {

                                                if (Item.Agate_map.ContainsKey(packet[12]))
                                                {
                                                    if (ServerBase.Constants.MemoryAgateNotAllowedMap.Contains(ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString())))
                                                    {
                                                        return;
                                                    }
                                                    /*if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 1038)
                                                        return;
                                                    if (ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString()) == 6001)
                                                        return;*/
                                                    client.Entity.Teleport(ushort.Parse(Item.Agate_map[packet[12]].Split('~')[0].ToString())
                                                        , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[1].ToString())
                                                        , ushort.Parse(Item.Agate_map[packet[12]].Split('~')[2].ToString()));
                                                    Item.Durability--;
                                                    Item.SendAgate(client);
                                                    Database.ConquerItemTable.UpdateItemAgate(Item);
                                                }
                                            }
                                            break;
                                        }
                                    case 4:
                                        {
                                            if (ServerBase.Constants.MemoryAgateNotAllowedMap.Contains(client.Entity.MapID))
                                                return;
                                            Interfaces.IConquerItem Item = null;
                                            if (client.Inventory.TryGetItem(ItemUID, out Item))
                                            {
                                                uint cost = (uint)(Item.MaximDurability - Item.Durability) / 2;
                                                if (cost == 0)
                                                    cost = 1;
                                                if (client.Entity.ConquerPoints > cost)
                                                {
                                                    client.Entity.ConquerPoints -= cost;
                                                    Item.Durability = Item.MaximDurability;
                                                    Item.SendAgate(client);
                                                    Database.ConquerItemTable.UpdateItemAgate(Item);
                                                }
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                        #endregion
                        #region Ayudante
                        case 1321:
                        case 1322:
                        case 1136:
                        case 1320:

                            client.Send(packet);
                            break;
                        case 2261:
                            {
                                client.Send(packet);
                            }
                            break;
                        #endregion
                        #region Advertise
                        case 2226:
                            {
                                byte[] firstpacket = new byte[724]{0xCC,0x02,0xB2,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00//;Ì²0x,0x0x0x
,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x67,0x01,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x,0xg0x0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x75,0x83,0x83,0x50//;0x0x0x,0x,0xPuP
,0x75,0x83,0x83,0x50,0x61,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;uPa$$0x0x0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44//;0x0x0x0x0xD
,0x65,0x76,0x69,0x6C,0x5F,0x44,0x6F,0x67,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;evil_Dogg0x0x,0x
,0x01,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x81,0xC3,0x15,0x00,0x00,0x00,0x00,0x00//;0x0xÃ0x,0x,0x
,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;,0x0x0x0x0x,0x
,0x7E,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;~0x0x0x0x,0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x41,0x4F,0x57,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0xAOW0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;0x0x0x0x0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0x61,0x61,0x6E,0x00,0x00,0x00,0x00,0x00//;0x0x,0xsaan0x,0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0D,0x00,0x00,0x00//;0x0x,0x,0x0x0x
,0xA5,0x0C,0x0E,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00//;¥0x,0x,0x,0x0x,0x,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x51,0x53,0x65//;0x0x0x0xTQSe
,0x72,0x76,0x65,0x72};//;rver
                                client.Send(firstpacket);
                                byte[] secondpacket = new byte[724]{0xCC,0x02,0xB2,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00//;Ì²//////,0x//,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x01,0x00,0x00,0x00,0x00,0x00,0x00//;//////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x2A,0x41,0x75,0x74//;//////,0x`*Aut
,0x68,0x65,0x6E,0x74,0x69,0x63,0x2A,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;hentic*`////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4E//;//////,0xN
,0x61,0x72,0x72,0x63,0x6F,0x74,0x69,0x63,0x7A,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;arrcoticz//,0x
,0x01,0x00,0x00,0x00,0x59,0x00,0x00,0x00,0xDF,0xA3,0x59,0x00,0x00,0x00,0x00,0x00//;//,0xY//,0xß£Y////,0x
,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;,0x////,0x
,0x7B,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;{//////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x7E,0x2A,0x44,0x65,0x5F,0x41,0x5F,0x74,0x68,0x2A,0x7E,0x00,0x00//;//,0x~*De_A_th*~//
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00//;////////
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5E,0x5E,0x5E,0x5E,0x5E,0x32,0x5E,0x5E,0x5E//;//,0x^^^^^2^^^
,0x5E,0x5E,0x5E,0x5E,0x5E,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00//;^^^^^//,0x//,0x//,0x
,0x10,0x27,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00//;'//,0x////,0x
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x51,0x53,0x65//;////TQSe
,0x72,0x76,0x65,0x72};//////////////;rver
                                client.Send(secondpacket);
                                break;
                            }
                        #endregion
                        #region OneArmedBandit 1351 AboRagab/Kimo/Amro kan bys2f
                        case 1351:
                            {
                                if (packet[4] == 0)
                                {
                                    if (client.Entity.ConquerPoints >= 100 * packet[5])
                                    {
                                        client.Send(packet);
                                        Sendonearmed(client);
                                        //PrintPacket(packet);
                                        client.Entity.ConquerPoints -= (uint)(100 * packet[5]);
                                        //Console.WriteLine("cps " +(uint)(100 * packet[5]));
                                    }
                                }
                                else
                                {
                                    Sendonearmed2(client);
                                    Prize3X(client);
                                    client.Entity.ConquerPoints += client.Entity.CPSS * packet[5];
                                    //Console.WriteLine("Win " + (uint)(client.Entity.CPSS * packet[5]));
                                    //PrintPacket(packet);
                                }
                                break;
                            }


                        #endregion
                        /*case 1044:
                            PrintPacket(packet);
                            client.Send(packet);
                            break;*/
                        /*#region PK Explorer (2220)
                         case 2220:
                             {
                                 PkExplorer pk = new PkExplorer(packet, client);
                                 pk.SubType = 1;
                                 client.Send(pk.Build());
                                 break;
                             }
                         #endregion*/
                        /* #region Cases de Packs
                         case 1034:
                         case 1037:
                             {
                                 client.Send(packet);
                                 break;
                             }
                         case 1135:
                             client.Send(packet);
                             break;
                         case 1134:
                             {
                                 switch (ID2)
                                 {
                                     case 1:
                                         client.Send(packet);
                                         break;
                                     case 2:
                                         client.Send(packet);
                                         break;
                                     case 3:
                                         client.Send(packet);
                                         break;
                                     case 4:
                                         client.Send(packet);
                                         break;
                                     case 5:
                                         client.Send(packet);
                                         break;
                                     case 6:
                                         client.Send(packet);
                                         break;
                                     case 7:
                                         client.Send(packet);
                                         break;
                                     case 8:
                                         client.Send(packet);
                                         break;
                                     case 9:
                                         client.Send(packet);
                                         break;
                                     case 10:
                                         client.Send(packet);
                                         break;
                                 }
                                 break;
                             }
                         #endregion*/
                        /*case 1134:
                            {
                                PhoenixProject.Network.GamePackets.Quest.QuestInfo.Handle(packet, client);
                                break;
                            }
                        case 1135:
                            {
                                PhoenixProject.Network.GamePackets.Quest.QuestQuery2.Handle(packet, client);
                                break;
                            }*/
                        /* case 1136:
                             {
                                 //PrintPacket(packet);
                                 client.Send(packet);
                                // PrintPacket(packet);
                                 break;
                             }*/
                        default:
                            {
                                if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                                {
                                    ushort key = BitConverter.ToUInt16(packet, 2);
                                    //PrintPacket(packet);
                                    Console.WriteLine("[Kimo]=> Unknown Packet: " + key + "");
                                    // Console.WriteLine("[Kimo]=> Unknown Packet: " + key + " " + PacketConstructor.Dump(packet) + "");

                                }

                                break;
                            }
                    }
                }
            }
            catch (Exception e)
            {
                Program.SaveException(e);
            }
        }
        #region OneArmedBandit
        public static void Prize3X(Client.GameState client)
        {
            client.Entity.CPSS = 0;
            client.Entity.METCHANCE = 0;
            client.Entity.SwordChance = 0;

            if (client.Entity.A == 2 || client.Entity.A == 3 || client.Entity.A == 4)
            {
                client.Entity.SwordChance += 1;
            }
            if (client.Entity.B == 2 || client.Entity.B == 3 || client.Entity.B == 4)
            {
                client.Entity.SwordChance += 1;
            }
            if (client.Entity.C == 2 || client.Entity.C == 3 || client.Entity.C == 4)
            {
                client.Entity.SwordChance += 1;
            }


            if (client.Entity.A == 1)
            {
                client.Entity.METCHANCE += 1;
            }
            if (client.Entity.B == 1)
            {
                client.Entity.METCHANCE += 1;
            }
            if (client.Entity.C == 1)
            {
                client.Entity.METCHANCE += 1;
            }

            if (client.Entity.A == 6 && client.Entity.B == 6 && client.Entity.C == 6)
            {
                client.Entity.CPSS = 5000;
                return;
            }
            if (client.Entity.A == 5 && client.Entity.B == 5 && client.Entity.C == 5)
            {
                client.Entity.CPSS = 3000;
                return;
            }
            if (client.Entity.A == 4 && client.Entity.B == 4 && client.Entity.C == 4)
            {
                client.Entity.CPSS = 2000;
                return;
            }
            if (client.Entity.A == 3 && client.Entity.B == 3 && client.Entity.C == 3)
            {
                client.Entity.CPSS = 1000;
                return;
            }
            if (client.Entity.A == 2 && client.Entity.B == 2 && client.Entity.C == 2)
            {
                client.Entity.CPSS = 500;
                return;
            }
            if (client.Entity.A == 1 && client.Entity.B == 1 && client.Entity.C == 1)
            {
                client.Entity.CPSS = 500;
                return;
            }
            if (client.Entity.METCHANCE == 2)
            {
                client.Entity.CPSS = 300;
                return;
            }
            if (client.Entity.METCHANCE == 1)
            {
                client.Entity.CPSS = 200;
                return;
            }
            if (client.Entity.SwordChance == 3)
            {
                client.Entity.CPSS = 300;
                return;
            }

            //if (client.Entity.A == 6 && client.Entity.B == 6 && client.Entity.C == 6)
            //{
            //    client.Entity.CPSS = 30000;
            //    return;
            //}
            //if (client.Entity.A == 5 && client.Entity.B == 5 && client.Entity.C == 5)
            //{
            //    client.Entity.CPSS = 6000;
            //    return;
            //}
            //if (client.Entity.A == 4 && client.Entity.B == 4 && client.Entity.C == 4)
            //{
            //    client.Entity.CPSS = 4000;
            //    return;
            //}
            //if (client.Entity.A == 3 && client.Entity.B == 3 && client.Entity.C == 3)
            //{
            //    client.Entity.CPSS = 2000;
            //    return;
            //}
            //if (client.Entity.A == 2 && client.Entity.B == 2 && client.Entity.C == 2)
            //{
            //    client.Entity.CPSS = 1000;
            //    return;
            //}
            //if (client.Entity.A == 1 && client.Entity.B == 1 && client.Entity.C == 1)
            //{
            //    client.Entity.CPSS = 1000;
            //    return;
            //}
            //if (client.Entity.METCHANCE == 2)
            //{
            //    client.Entity.CPSS = 500;
            //    return;
            //}
            //if (client.Entity.METCHANCE == 1)
            //{
            //    client.Entity.CPSS = 200;
            //    return;
            //}
            //if (client.Entity.SwordChance == 3)
            //{
            //    client.Entity.CPSS = 500;
            //    return;
            //}
        }
        public static void Sendonearmed(Client.GameState client)
        {
            uint A = (uint)ServerBase.Kernel.Random.Next(0, 6);
            uint B = (uint)ServerBase.Kernel.Random.Next(0, 6);
            uint C = (uint)ServerBase.Kernel.Random.Next(0, 6);
            client.Entity.A = A;
            client.Entity.B = B;
            client.Entity.C = C;
            byte[] data = new byte[16 + 8];
            Writer.WriteUInt32(16, 0, data);
            Writer.WriteUInt32(1352, 2, data);

            Writer.WriteUInt32(A, 5, data);
            Writer.WriteUInt32(B, 6, data);
            Writer.WriteUInt32(C, 7, data);

            Writer.WriteUInt32(9828, 12, data);
            client.Send(data);

        }
        public static void send1136(Client.GameState client)
        {

            byte[] data = new byte[20 + 8];
            Writer.WriteUInt32(20, 0, data);
            Writer.WriteUInt32(1136, 2, data);
            Writer.WriteUInt32(client.Entity.UID, 8, data);
            client.Send(data);

        }
        public static void Sendonearmed2(Client.GameState client)
        {


            byte[] data = new byte[16 + 8];
            Writer.WriteUInt32(16, 0, data);
            Writer.WriteUInt32(1352, 2, data);
            Writer.WriteUInt32(1, 4, data);
            Writer.WriteUInt32(client.Entity.A, 5, data);
            Writer.WriteUInt32(client.Entity.B, 6, data);
            Writer.WriteUInt32(client.Entity.C, 7, data);

            Writer.WriteUInt32(9828, 12, data);
            client.Send(data);
            //PrintPacket(data);
        }
        #endregion OneArmedBandit
        public static void ReincarnationHash(Client.GameState client)
        {
            if (ServerBase.Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
            {
                if (client.Entity.Level >= 110 && client.Entity.Reborn == 2)
                {
                    // ushort stats = 0;
                    //uint lev1 = client.Entity.Level;
                    Game.Features.Reincarnation.ReincarnateInfo info = ServerBase.Kernel.ReincarnatedCharacters[client.Entity.UID];
                    client.Entity.Level = info.Level;
                    client.Entity.Experience = info.Experience;
                    ServerBase.Kernel.ReincarnatedCharacters.Remove(info.UID);
                    Database.ReincarnationTable.RemoveReincarnated(client.Entity);
                    //stats = (ushort)(((client.Entity.Level - lev1) * 3) - 3);
                    //client.Entity.Atributes += stats;
                }
            }
        }


        #region Reincarnation
        public class Reincarnation
        {
            private Client.GameState _client;
            public Reincarnation(Client.GameState client, byte new_class)
            {
                if (client.Entity.Level < 120)
                    return;
                if (ServerBase.Kernel.ReincarnatedCharacters.ContainsKey(client.Entity.UID))
                    return;
                _client = client;
                Database.ReincarnationTable.NewReincarnated(client.Entity);
                Game.Features.Reincarnation.ReincarnateInfo info = new Game.Features.Reincarnation.ReincarnateInfo();
                info.UID = client.Entity.UID;
                info.Level = client.Entity.Level;
                info.Experience = client.Entity.Experience;
                ServerBase.Kernel.ReincarnatedCharacters.Add(info.UID, info);
                client.Entity.FirstRebornClass = client.Entity.SecondRebornClass;
                client.Entity.SecondRebornClass = client.Entity.Class;
                client.Entity.Class = new_class;
                client.Entity.SecondRebornLevel = client.Entity.Level;
                //client.Entity.ReincarnationLev = client.Entity.Level;//kikoz
                client.Entity.Level = 15;
                client.Entity.Experience = 0;
                client.Entity.Atributes =
     (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornClass, client.Entity.FirstRebornLevel) +
      client.ExtraAtributePoints(client.Entity.SecondRebornClass, client.Entity.SecondRebornLevel) + 62);
                #region RemoveAllSpells
                Interfaces.ISkill[] spells = client.Spells.Values.ToArray();
                foreach (Interfaces.ISkill spell in spells)
                {
                    if (!ServerBase.Constants.AvaibleSpells.Contains(spell.ID))
                    {
                        client.RemoveSpell(spell);
                    }
                    //spell.Send(client);
                }
                #endregion
                #region Blessed
                if (client.Entity.Reborn == 2)
                {
                    if (client.Entity.Reborn == 2)
                    {

                        client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                    }
                }
                #endregion

                #region SeconedClassTrojan
                if (client.Entity.SecondRebornClass == 15)
                {
                    if (client.Entity.SecondRebornClass == 15)
                    {
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accury
                    }
                }
                #endregion
                #region SeconedClassWarrior
                if (client.Entity.SecondRebornClass == 25)
                {
                    if (client.Entity.SecondRebornClass == 25)
                    {
                        client.AddSpell(new Spell(true) { ID = 1040 });//Raor
                        client.AddSpell(new Spell(true) { ID = 1051 });//Dash
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 1025 });//Superman
                    }
                }
                #endregion
                #region SeconedClassArcher
                if (client.Entity.SecondRebornClass == 45)
                {
                    if (client.Entity.SecondRebornClass == 45)
                    {

                    }
                }
                #endregion
                #region SeconedClassNinja
                if (client.Entity.SecondRebornClass == 55)
                {
                    if (client.Entity.SecondRebornClass == 55)
                    {
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                        client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                    }
                }
                #endregion
                #region SeconedClassMonk
                if (client.Entity.SecondRebornClass == 65)
                {
                    if (client.Entity.SecondRebornClass == 65)
                    {
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 10425 });//Tranquality
                    }
                }
                #endregion
                #region SeconedClassWater
                if (client.Entity.SecondRebornClass == 135)
                {
                    if (client.Entity.SecondRebornClass == 135)
                    {
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        //client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1195 });//Medation
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        //client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        //client.AddSpell(new Spell(true) { ID = 1170 });//Nectar
                    }
                }
                #endregion
                #region SeconedClassFire
                if (client.Entity.SecondRebornClass == 145)
                {
                    if (client.Entity.SecondRebornClass == 145)
                    {
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        //client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1195 });//Medation
                    }
                }
                #endregion
                #region SeconedClassPirate
                if (client.Entity.SecondRebornClass == 75)
                {
                    if (client.Entity.SecondRebornClass == 75)
                    {
                        client.AddSpell(new Spell(true) { ID = 11070 });//ScurvyBomb
                    }
                }
                #endregion

                #region FirstClassTrojan
                if (client.Entity.FirstRebornClass == 15)
                {
                    if (client.Entity.FirstRebornClass == 15)
                    {
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1270 });//Robot
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accury
                    }
                }
                #endregion
                #region FirstClassWarrior
                if (client.Entity.FirstRebornClass == 25)
                {
                    if (client.Entity.FirstRebornClass == 25)
                    {
                        client.AddSpell(new Spell(true) { ID = 1040 });//Raor
                        client.AddSpell(new Spell(true) { ID = 1051 });//Dash
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 1025 });//Superman
                    }
                }
                #endregion
                #region FirstClassArcher
                if (client.Entity.FirstRebornClass == 45)
                {
                    if (client.Entity.FirstRebornClass == 45)
                    {

                    }
                }
                #endregion
                #region FirstClassNinja
                if (client.Entity.FirstRebornClass == 55)
                {
                    if (client.Entity.FirstRebornClass == 55)
                    {
                        client.AddSpell(new Spell(true) { ID = 6001 });//ToxicFog
                        client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                    }
                }
                #endregion
                #region FirstClassMonk
                if (client.Entity.FirstRebornClass == 65)
                {
                    if (client.Entity.FirstRebornClass == 65)
                    {
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serenity
                        client.AddSpell(new Spell(true) { ID = 10425 });//Tranquality
                    }
                }
                #endregion
                #region FirstClassWater
                if (client.Entity.FirstRebornClass == 135)
                {
                    if (client.Entity.FirstRebornClass == 135)
                    {
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        //client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1195 });//Medation
                        client.AddSpell(new Spell(true) { ID = 1085 });//StarOfAccuracy
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1075 });//Invisibility
                        //client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        //client.AddSpell(new Spell(true) { ID = 1170 });//Nectar
                    }
                }
                #endregion
                #region FirstClassFire
                if (client.Entity.FirstRebornClass == 145)
                {
                    if (client.Entity.FirstRebornClass == 145)
                    {
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        //client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1195 });//Medation
                    }
                }
                #endregion
                #region FirstClassPirate
                if (client.Entity.FirstRebornClass == 75)
                {
                    if (client.Entity.FirstRebornClass == 75)
                    {
                        client.AddSpell(new Spell(true) { ID = 11070 });//GaleBomb
                    }
                }
                #endregion


                #region AddPureTrojanSpell
                if (client.Entity.FirstRebornClass == 15 && client.Entity.SecondRebornClass == 15)
                {
                    if (client.Entity.Class == 11)
                    {
                        client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 1115 });//Hercules
                        client.AddSpell(new Spell(true) { ID = 1015 });//Accury
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        client.AddSpell(new Spell(true) { ID = 10315 });//DragonWhirl
                        client.AddSpell(new Spell(true) { ID = 3050 });//CruelShade
                    }
                }
                #endregion
                #region AddPureWarSpell
                if (client.Entity.FirstRebornClass == 25 && client.Entity.SecondRebornClass == 25)
                {
                    if (client.Entity.Class == 21)
                    {
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10311 });//Perseverance
                        client.AddSpell(new Spell(true) { ID = 7020 });//Rage
                        client.AddSpell(new Spell(true) { ID = 1051 });//Dash
                        client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                        client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                        client.AddSpell(new Spell(true) { ID = 1025 });//SuperMan
                        client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                }
                #endregion
                #region AddPureArcherSpell
                if (client.Entity.FirstRebornClass == 45 && client.Entity.SecondRebornClass == 45)
                {
                    if (client.Entity.Class == 41)
                    {
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10313 });//StarArrow
                        client.AddSpell(new Spell(true) { ID = 8030 });//ArrowRain
                        client.AddSpell(new Spell(true) { ID = 8002 });//XpFly
                        client.AddSpell(new Spell(true) { ID = 9000 });//INTE
                        client.AddSpell(new Spell(true) { ID = 8003 });//AdvanceFly
                        client.AddSpell(new Spell(true) { ID = 8000 });//RapidFire
                        client.AddSpell(new Spell(true) { ID = 8001 });//Scatter
                        //client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                }
                #endregion
                #region AddPureNinjaSpell
                if (client.Entity.FirstRebornClass == 55 && client.Entity.SecondRebornClass == 55)
                {
                    if (client.Entity.Class == 51)
                    {
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 6003 });//CounterKill
                        client.AddSpell(new Spell(true) { ID = 6000 });//TwoFold
                        client.AddSpell(new Spell(true) { ID = 6001 });//Toxic
                        client.AddSpell(new Spell(true) { ID = 6002 });//PoisnStar
                        client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                        client.AddSpell(new Spell(true) { ID = 6010 });//ShurikenVortex
                        client.AddSpell(new Spell(true) { ID = 6011 });//FatalStrike
                        //client.AddSpell(new Spell(true) { ID = 3060 });//Reflect
                    }
                }
                #endregion
                #region AddPureMonkSpell
                if (client.Entity.FirstRebornClass == 65 && client.Entity.SecondRebornClass == 65)
                {
                    if (client.Entity.Class == 61)
                    {
                        ////client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10405 });//SoulShakle
                        client.AddSpell(new Spell(true) { ID = 10381 });//Radiant
                        client.AddSpell(new Spell(true) { ID = 10390 });//Oblivion
                        client.AddSpell(new Spell(true) { ID = 10400 });//Serinity
                        client.AddSpell(new Spell(true) { ID = 10415 });//Whirld
                        client.AddSpell(new Spell(true) { ID = 10425 });//Tranquilty
                        client.AddSpell(new Spell(true) { ID = 10490 });//TripleAttack
                        client.AddSpell(new Spell(true) { ID = 10430 });//Compassion
                    }
                }
                #endregion
                #region AddPureWaterSpell
                if (client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 135)
                {
                    if (client.Entity.Class == 132)
                    {
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 30000 });//AzureShield
                        client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                        client.AddSpell(new Spell(true) { ID = 1050 });//XpReveve
                        client.AddSpell(new Spell(true) { ID = 1170 });//Nectar
                        client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                        client.AddSpell(new Spell(true) { ID = 1100 });//Pray
                        client.AddSpell(new Spell(true) { ID = 1075 });//inv
                        client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                        client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                        client.AddSpell(new Spell(true) { ID = 1085 });//Star
                        client.AddSpell(new Spell(true) { ID = 1055 });//HealingRain
                        client.AddSpell(new Spell(true) { ID = 1195 });//Mediation
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                    }
                }
                #endregion
                #region AddPureFireSpell
                if (client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 145)
                {
                    if (client.Entity.Class == 142)
                    {
                        //client.AddSpell(new Spell(true) { ID = 7001 });//Riding
                        //client.AddSpell(new Spell(true) { ID = 9876 });//Bless
                        client.AddSpell(new Spell(true) { ID = 10310 });//HeavenBlade
                        client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                        client.AddSpell(new Spell(true) { ID = 1195 });//Mediation
                        client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                        client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                        client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                        client.AddSpell(new Spell(true) { ID = 1002 });//Tornado
                        client.AddSpell(new Spell(true) { ID = 1150 });//FireRing
                        client.AddSpell(new Spell(true) { ID = 1180 });//FireMeteor
                        client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                        client.AddSpell(new Spell(true) { ID = 1160 });//Bomb
                        client.AddSpell(new Spell(true) { ID = 1165 });//FireOfHell
                        client.AddSpell(new Spell(true) { ID = 1125 });//Volcano
                    }
                }
                #endregion
                #region AddPurePirate
                if (client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 75)
                {
                    if (client.Entity.Class == 71)
                    {
                        client.AddSpell(new Spell(true) { ID = 11110 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 11040 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 11050 });//Hercules
                        client.AddSpell(new Spell(true) { ID = 11060 });//Accury
                        client.AddSpell(new Spell(true) { ID = 11070 });//Scatter
                        client.AddSpell(new Spell(true) { ID = 11100 });//SpiritHealing
                        client.AddSpell(new Spell(true) { ID = 11120 });//Cyclone
                        client.AddSpell(new Spell(true) { ID = 11130 });//Hercules//11140
                        client.AddSpell(new Spell(true) { ID = 11140 });//Hercules//11140
                    }
                }
                #endregion

                if (client.Entity.Reborn == 2)
                {
                    #region if water
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 132 && client.Entity.Class <= 135)
                        {
                            //client.AddSpell(new Spell(true) { ID = 30000 });//AzureShield
                            client.AddSpell(new Spell(true) { ID = 1280 });//WaterElf
                            client.AddSpell(new Spell(true) { ID = 1050 });//XpReveve
                            client.AddSpell(new Spell(true) { ID = 1170 });//Nectar
                            client.AddSpell(new Spell(true) { ID = 1175 });//AdvancedCure
                            client.AddSpell(new Spell(true) { ID = 1100 });//Pray
                            client.AddSpell(new Spell(true) { ID = 1075 });//inv
                            client.AddSpell(new Spell(true) { ID = 1095 });//Stigma
                            client.AddSpell(new Spell(true) { ID = 1090 });//MagicShield
                            client.AddSpell(new Spell(true) { ID = 1085 });//Star
                            client.AddSpell(new Spell(true) { ID = 1055 });//HealingRain
                            client.AddSpell(new Spell(true) { ID = 1195 });//Mediation
                            client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                            client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                            client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                            client.AddSpell(new Spell(true) { ID = 1350 });//DivenHere
                        }
                    }
                    #endregion
                    #region if Fire
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
                        {
                            //client.AddSpell(new Spell(true) { ID = 3080 });//Dodge
                            client.AddSpell(new Spell(true) { ID = 1195 });//Mediation
                            client.AddSpell(new Spell(true) { ID = 1001 });//Fire
                            client.AddSpell(new Spell(true) { ID = 1000 });//Thunder
                            client.AddSpell(new Spell(true) { ID = 1005 });//Cure
                            client.AddSpell(new Spell(true) { ID = 1002 });//Tornado
                            client.AddSpell(new Spell(true) { ID = 1150 });//FireRing
                            client.AddSpell(new Spell(true) { ID = 1180 });//FireMeteor
                            client.AddSpell(new Spell(true) { ID = 1120 });//FireCircle
                            client.AddSpell(new Spell(true) { ID = 1160 });//Bomb
                            client.AddSpell(new Spell(true) { ID = 1165 });//FireOfHell
                            client.AddSpell(new Spell(true) { ID = 1125 });//Volcano
                        }
                    }
                    #endregion
                    #region if Monk
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 60 && client.Entity.Class <= 65)
                        {
                            client.AddSpell(new Spell(true) { ID = 10381 });//Radiant
                            client.AddSpell(new Spell(true) { ID = 10390 });//Oblivion
                            client.AddSpell(new Spell(true) { ID = 10400 });//Serinity
                            client.AddSpell(new Spell(true) { ID = 10415 });//Whirld
                            client.AddSpell(new Spell(true) { ID = 10425 });//Tranquilty
                            client.AddSpell(new Spell(true) { ID = 10490 });//TripleAttack
                            client.AddSpell(new Spell(true) { ID = 10430 });//Compassion

                            client.AddSpell(new Spell(true) { ID = 10420 });//Whirld
                            client.AddSpell(new Spell(true) { ID = 10421 });//Tranquilty
                            client.AddSpell(new Spell(true) { ID = 10422 });//TripleAttack
                            client.AddSpell(new Spell(true) { ID = 10423 });//Compassion
                            client.AddSpell(new Spell(true) { ID = 10424 });//Compassion

                            client.AddSpell(new Spell(true) { ID = 10410 });//Compassion
                            client.AddSpell(new Spell(true) { ID = 10395 });//Compassion
                        }
                    }
                    #endregion
                    #region if Ninja
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
                        {
                            client.AddSpell(new Spell(true) { ID = 6000 });//TwoFold
                            client.AddSpell(new Spell(true) { ID = 6001 });//Toxic
                            //client.AddSpell(new Spell(true) { ID = 6002 });//PoisnStar
                            client.AddSpell(new Spell(true) { ID = 6004 });//ArcherBane
                            client.AddSpell(new Spell(true) { ID = 6010 });//ShurikenVortex
                            client.AddSpell(new Spell(true) { ID = 6011 });//FatalStrike
                        }
                    }
                    #endregion
                    #region if Warrior
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 20 && client.Entity.Class <= 21)
                        {
                            client.AddSpell(new Spell(true) { ID = 1051 });//Dash
                            client.AddSpell(new Spell(true) { ID = 1320 });//FlyingMoon
                            client.AddSpell(new Spell(true) { ID = 1040 });//Roar
                            client.AddSpell(new Spell(true) { ID = 1025 });//SuperMan
                            client.AddSpell(new Spell(true) { ID = 1020 });//Shield
                        }
                    }
                    #endregion
                    #region if Archer
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
                        {
                            client.AddSpell(new Spell(true) { ID = 8030 });//ArrowRain
                            client.AddSpell(new Spell(true) { ID = 8002 });//XpFly
                            client.AddSpell(new Spell(true) { ID = 9000 });//INTE
                            client.AddSpell(new Spell(true) { ID = 8003 });//AdvanceFly
                            client.AddSpell(new Spell(true) { ID = 8000 });//RapidFire
                            client.AddSpell(new Spell(true) { ID = 8001 });//Scatter
                        }
                    }
                    #endregion
                    #region if Trojan
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            client.AddSpell(new Spell(true) { ID = 1190 });//SpiritHealing
                            client.AddSpell(new Spell(true) { ID = 1110 });//Cyclone
                            client.AddSpell(new Spell(true) { ID = 1115 });//Hercules
                            client.AddSpell(new Spell(true) { ID = 1015 });//Accury
                            client.AddSpell(new Spell(true) { ID = 1270 });//Scatter
                        }
                    }
                    #endregion
                    #region if Pirate
                    if (client.Entity.Reborn == 2)
                    {
                        if (client.Entity.Class >= 70 && client.Entity.Class <= 75)
                        {
                            client.AddSpell(new Spell(true) { ID = 11110 });//SpiritHealing
                            // client.AddSpell(new Spell(true) { ID = 11040 });//Cyclone
                            client.AddSpell(new Spell(true) { ID = 11050 });//Hercules
                            client.AddSpell(new Spell(true) { ID = 11060 });//Accury
                            client.AddSpell(new Spell(true) { ID = 11070 });//Scatter
                            //client.AddSpell(new Spell(true) { ID = 11100 });//SpiritHealing
                            client.AddSpell(new Spell(true) { ID = 11120 });//Cyclone
                            client.AddSpell(new Spell(true) { ID = 11130 });//Hercules//11140
                            client.AddSpell(new Spell(true) { ID = 11140 });//Hercules//11140
                            //client.AddSpell(new Spell(true) { ID = 11060 });//Accury
                            //client.AddSpell(new Spell(true) { ID = 11070 });//Scatter
                        }
                    }
                    #endregion
                }

                #region Adding earned skills
                if (client.Entity.SecondRebornClass == 15 && client.Entity.Class == 11)
                {
                    client.AddSpell(new Spell(true) { ID = 3050 });
                }
                if (client.Entity.SecondRebornClass == 75 && client.Entity.Class == 71)
                {
                    client.AddSpell(new Spell(true) { ID = 11100 });
                }
                if (client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 11230 });
                }
                if (client.Entity.SecondRebornClass == 55 && client.Entity.Class == 51)
                {
                    client.AddSpell(new Spell(true) { ID = 6002 });
                }
                if (client.Entity.SecondRebornClass == 145 && client.Entity.Class == 142)
                {
                    client.AddSpell(new Spell(true) { ID = 3080 });
                }
                if (client.Entity.SecondRebornClass == 135 && client.Entity.Class == 132)
                {
                    client.AddSpell(new Spell(true) { ID = 3090 });
                }
                if (client.Entity.SecondRebornClass == 55 && client.Entity.FirstRebornClass == 55)
                {
                    client.AddSpell(new Spell(true) { ID = 6002 });
                }
                if (client.Entity.SecondRebornClass == 15 && client.Entity.FirstRebornClass == 15)
                {
                    client.AddSpell(new Spell(true) { ID = 3050 });
                }
                if (client.Entity.SecondRebornClass == 75 && client.Entity.FirstRebornClass == 75)
                {
                    client.AddSpell(new Spell(true) { ID = 11100 });
                }
                if (client.Entity.SecondRebornClass == 25)
                {
                    client.AddSpell(new Spell(true) { ID = 3060 });
                }
                if (client.Entity.SecondRebornClass == 145 && client.Entity.FirstRebornClass == 145)
                {
                    client.AddSpell(new Spell(true) { ID = 3080 });
                }
                if (client.Entity.SecondRebornClass == 135 && client.Entity.FirstRebornClass == 135)
                {
                    client.AddSpell(new Spell(true) { ID = 3090 });
                }
                #endregion

                #region Remove unallow skills skills
                if (client.Entity.Class == 11)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });
                    client.RemoveSpell(new Spell(true) { ID = 1020 });
                }
                if (client.Entity.Class == 71)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });
                    client.RemoveSpell(new Spell(true) { ID = 1020 });
                }
                if (client.Entity.Class == 41)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });

                }
                if (client.Entity.Class == 51)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });
                    client.RemoveSpell(new Spell(true) { ID = 1020 });
                }
                if (client.Entity.Class == 61)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });
                    client.RemoveSpell(new Spell(true) { ID = 1020 });
                }
                if (client.Entity.Class == 142)
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });
                }
                if (client.Entity.Class == 142)
                {
                    client.RemoveSpell(new Spell(true) { ID = 6002 });
                }
                if (client.Entity.Class == 132)
                {
                    client.RemoveSpell(new Spell(true) { ID = 6002 });
                }
                #endregion

                #region Proficiencies
                foreach (Interfaces.ISkill proficiency in client.Proficiencies.Values)
                {
                    proficiency.PreviousLevel = proficiency.Level;
                    proficiency.Level = 0;
                    proficiency.Experience = 0;
                    proficiency.Send(client);
                }
                #endregion
                #region Low level items
                for (byte i = 1; i < 9; i++)
                {
                    if (i != 7)
                    {
                        Interfaces.IConquerItem item = client.Equipment.TryGetItem(i);
                        if (item != null && item.ID != 0)
                        {
                            try
                            {
                                //client.UnloadItemStats(item, false);
                                Database.ConquerItemInformation cii = new PhoenixProject.Database.ConquerItemInformation(item.ID, item.Plus);
                                item.ID = cii.LowestID(Network.PacketHandler.ItemMinLevel(Network.PacketHandler.ItemPosition(item.ID)));
                                item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                item.Send(client);
                                client.LoadItemStats(client.Entity);
                                client.CalculateStatBonus();
                                client.CalculateHPBonus();
                                Database.ConquerItemTable.UpdateItemID(item, client);
                            }
                            catch
                            {
                                Console.WriteLine("Reborn item problem: " + item.ID);
                            }
                        }
                    }
                }
                #region Alt Fix By Amjad
                Interfaces.IConquerItem AltRing = client.Equipment.TryGetItem(26);
                if (AltRing != null)
                {
                    client.Equipment.Remove(26);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltRightHand = client.Equipment.TryGetItem(24);
                if (AltRightHand != null)
                {
                    client.Equipment.Remove(24);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltNecklace = client.Equipment.TryGetItem(22);
                if (AltNecklace != null)
                {
                    client.Equipment.Remove(22);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltHead = client.Equipment.TryGetItem(21);
                if (AltHead != null)
                {
                    client.Equipment.Remove(21);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltLeftHand = client.Equipment.TryGetItem(25);
                if (AltLeftHand != null)
                {
                    client.Equipment.Remove(25);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltBoots = client.Equipment.TryGetItem(28);
                if (AltBoots != null)
                {
                    client.Equipment.Remove(28);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                Interfaces.IConquerItem AltArmor = client.Equipment.TryGetItem(23);
                if (AltArmor != null)
                {
                    client.Equipment.Remove(23);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);

                #endregion
                Interfaces.IConquerItem hand = client.Equipment.TryGetItem(5);
                if (hand != null)
                {
                    client.Equipment.Remove(5);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                    client.SendStatMessage();
                }
                else
                    client.SendScreen(client.Entity.SpawnPacket, false);
                #endregion
                Database.DataHolder.GetStats(client.Entity.Class, client.Entity.Level, client);
                // client.loadi
                client.CalculateStatBonus();
                client.CalculateHPBonus();
                client.GemAlgorithm();
                client.SendStatMessage();
                client.Equipment.UpdateEntityPacket();
                //Database.ReincarnationTable.NewReincarnated(client.Entity);
                Network.PacketHandler.WorldMessage(client.Entity.Name + " has got Reincarnation! Congratulations!");

            }
        }
        #endregion
        #region Guilds
        static void AllyGuilds(string name, Client.GameState client)
        {

            foreach (var guild in ServerBase.Kernel.Guilds.Values)
            {
                if (guild.Name == name && client.Guild.Name != name)
                {
                    if (guild.Leader != null)
                    {
                        if (guild.Leader.IsOnline)
                        {
                            guild.Leader.Client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            client.OnMessageBoxEventParams = new object[]
                                                            {
                                                                guild,
                                                                client.Guild
                                                            };
                            Client.GameState Leader = guild.Leader.Client;
                            Leader.OnMessageBoxOK = delegate
                            {
                                Game.ConquerStructures.Society.Guild Guild1 =
                                    Leader.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;
                                Game.ConquerStructures.Society.Guild Guild2 =
                                    Leader.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;

                                Guild1.AddAlly(Guild2.Name);
                                Guild2.AddAlly(Guild1.Name);

                                if (Guild1.Leader.Client != null)
                                {
                                    if (Guild1.Leader.Client.Socket != null)
                                    {
                                        if (Guild1.Leader.Client.Socket.Connected)
                                        {
                                            if (client != null)
                                            {
                                                if (client.Socket != null)
                                                {
                                                    if (client.Socket.Connected)
                                                    {
                                                        client.Send(new Message(Guild1.Leader.Name + " has accepted your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            };
                            guild.Leader.Client.OnMessageBoxCANCEL = delegate
                            {
                                try
                                {
                                    if (guild.Leader.Client != null)
                                    {
                                        if (guild.Leader.Client.Socket != null)
                                        {
                                            if (guild.Leader.Client.Socket.Connected)
                                            {
                                                if (guild.Leader.Client.OnMessageBoxEventParams != null)
                                                {
                                                    Game.ConquerStructures.Society.Guild Guild2 =
                                                        guild.Leader.Client.OnMessageBoxEventParams[1] as Game.ConquerStructures.Society.Guild;
                                                    Game.ConquerStructures.Society.Guild Guild1 =
                                                        guild.Leader.Client.OnMessageBoxEventParams[0] as Game.ConquerStructures.Society.Guild;

                                                    if (client != null)
                                                    {
                                                        if (client.Entity.FullyLoaded)
                                                        {
                                                            client.Send(new Message(Guild1.Leader.Name + " has declined your ally request.", System.Drawing.Color.Blue, Message.TopLeft));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception e)
                                {
                                    Program.SaveException(e);
                                }
                            };
                            guild.Leader.Client.Send(new NpcReply(NpcReply.MessageBox, client.Entity.Name + " , GuildLeader of " + client.Guild.Name + " wants to make with you an alliance."));
                        }
                    }
                }
            }
        }
        #endregion
        #region Broadcast
        public static void BroadcastInfoAwaiting(Broadcast broadcast, Client.GameState client)
        {
            byte[] buffer = new byte[500];
            Writer.WriteUInt16(2051, 2, buffer);
            int test = 0;
            ushort total = 0;
            if (broadcast.dwParam * 10 + 10 >= ServerBase.Constants.MaxBroadcasts)
                test = ServerBase.Constants.MaxBroadcasts;
            else
                test = (int)broadcast.dwParam * 10 + 10;
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    Writer.WriteUInt32((ushort)broadcast.dwParam, 4, buffer);
                    Writer.WriteUInt16(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.WriteUInt32(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.WriteUInt32(i, offset, buffer); offset += 4;
                    Writer.WriteUInt32(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.WriteUInt32(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.WriteUInt16(2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        public static void BroadcastClientMessages(Broadcast broadcast, Client.GameState client)
        {
            byte[] buffer = new byte[500];
            Writer.WriteUInt16(2051, 2, buffer);
            int test = 0;
            ushort total = 0;
            for (int i = 0; i < Game.ConquerStructures.Broadcast.Broadcasts.Count; i++)
                if (Game.ConquerStructures.Broadcast.Broadcasts[i].EntityID == client.Entity.UID)
                    test++;
            if ((10 * broadcast.dwParam + 10) >= Game.ConquerStructures.Broadcast.Broadcasts.Count)
            {
                return;
            }
            for (uint i = broadcast.dwParam * 10; i < test; i++)
            {
                if (Game.ConquerStructures.Broadcast.Broadcasts.Count > i)
                {
                    var Broadcast = Game.ConquerStructures.Broadcast.Broadcasts[(int)i];
                    if (Broadcast.EntityID != client.Entity.UID)
                        continue;
                    Writer.WriteUInt32((ushort)broadcast.dwParam, 4, buffer);
                    Writer.WriteUInt16(total, 8, buffer);
                    int offset = 12 + buffer[10] * 112;
                    buffer[10]++;
                    Writer.WriteUInt32(Broadcast.ID, offset, buffer); offset += 4;
                    Writer.WriteUInt32(i, offset, buffer); offset += 4;
                    Writer.WriteUInt32(Broadcast.EntityID, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.EntityName, offset, buffer); offset += 16;
                    Writer.WriteUInt32(Broadcast.SpentCPs, offset, buffer); offset += 4;
                    Writer.WriteString(Broadcast.Message, offset, buffer);
                    if (buffer[10] % 4 == 0)
                    {
                        total++;
                        Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                        byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                        System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                        client.Send(Buffer);
                        buffer = new byte[500];
                        Writer.WriteUInt16(2051, 2, buffer);
                    }
                }
                else
                {
                    Writer.WriteUInt16((ushort)(12 + buffer[10] * 112 + 6 + 2), 0, buffer);
                    byte[] Buffer = new byte[12 + buffer[10] * 112 + 6 + 2 + 8];
                    System.Buffer.BlockCopy(buffer, 0, Buffer, 0, Buffer.Length);
                    if (buffer[10] != 0 || buffer[10] == 0 && total == 0)
                        client.Send(Buffer);
                    break;
                }
            }
        }
        #endregion
        #region Booth
        static void ShowBoothItems(ItemUsage usage, Client.GameState client)
        {
            Client.GameState Owner = null;
            Game.Entity entity = null;

            if (usage.UID > 1000000)
            {
                //Console.WriteLine("Sk: " + usage.UID + "");//1000176
                //Console.WriteLine("Sv: " + (uint)((usage.UID - 1000000) + 10000000) + "");
                if (client.Screen.TryGetValue((uint)((usage.UID - 1000000) + 10000000), out entity))
                {
                    Owner = entity.Owner;
                    if (Owner != null)
                    {
                        if (Owner.Entity.UID != client.Entity.UID)
                        {
                            BoothItem Item = new BoothItem(true);
                            if (Owner.Booth != null)
                            {
                                foreach (Game.ConquerStructures.BoothItem item in Owner.Booth.ItemList.Values)
                                {
                                    Item.Fill(item, Owner.Booth.Base.UID);
                                    client.Send(Item);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                // Console.WriteLine("Methods: " + usage.UID + "");//10000176
                //Console.WriteLine("Method: " + (uint)((usage.UID - 100000) + 1000000) + "");
                if (client.Screen.TryGetValue((uint)((usage.UID - 100000) + 1000000), out entity))
                {
                    Owner = entity.Owner;
                    if (Owner != null)
                    {
                        if (Owner.Entity.UID != client.Entity.UID)
                        {
                            BoothItem Item = new BoothItem(true);
                            if (Owner.Booth != null)
                            {
                                foreach (Game.ConquerStructures.BoothItem item in Owner.Booth.ItemList.Values)
                                {
                                    Item.Fill(item, Owner.Booth.Base.UID);
                                    client.Send(Item);
                                }
                            }
                        }
                    }
                }
            }
        }
        static void AddItemOnBooth(ItemUsage usage, Client.GameState client)
        {
            if (client.Booth != null && !client.Trade.InTrade)
            {
                if (!client.Booth.ItemList.ContainsKey(usage.UID))
                {
                    if (client.Inventory.ContainsUID(usage.UID))
                    {
                        Game.ConquerStructures.BoothItem item = new PhoenixProject.Game.ConquerStructures.BoothItem();
                        item.Cost = usage.dwParam;
                        client.Inventory.TryGetItem(usage.UID, out item.Item);
                        Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                        if (item.Item.Lock != 0 || item.Item.Suspicious || item.Item.Bound || infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable)
                        {
                            return;
                        }

                        item.Cost_Type = usage.ID == ItemUsage.AddItemOnBoothForSilvers ? PhoenixProject.Game.ConquerStructures.BoothItem.CostType.Silvers : PhoenixProject.Game.ConquerStructures.BoothItem.CostType.ConquerPoints;
                        client.Booth.ItemList.Add(item.Item.UID, item);
                        client.Send(usage);
                        BoothItem Item = new BoothItem(true);
                        Item.Fill(item, client.Booth.Base.UID);
                        client.SendScreen(Item, false);
                    }
                }
            }
        }
        static void BuyFromBooth(ItemUsage usage, Client.GameState client)
        {
            if (client.Trade.InTrade)
                return;
            Client.GameState Owner = null;
            Game.Entity entity = null;
            if (usage.dwParam > 1000000)
            {
                if (client.Screen.TryGetValue((uint)((usage.dwParam - 1000000) + 10000000), out entity))
                {
                    if (entity.Owner == null)
                        return;
                    Owner = entity.Owner;
                    if (Owner.Booth == null)
                    {
                        Owner.Disconnect();
                        return;
                    }
                    if (Owner != null)
                    {
                        if (Owner.Entity.UID != client.Entity.UID)
                        {
                            if (Owner.Booth.ItemList.ContainsKey(usage.UID))
                            {
                                Game.ConquerStructures.BoothItem item;
                                if (Owner.Booth.ItemList.TryGetValue(usage.UID, out item))
                                {
                                    if (client.Inventory.Count <= 39)
                                    {
                                        if (item.Cost_Type == PhoenixProject.Game.ConquerStructures.BoothItem.CostType.Silvers)
                                        {
                                            if (client.Entity.Money >= item.Cost)
                                            {
                                                client.Entity.Money -= item.Cost;
                                                //Database.EntityTable.UpdateMoney(client);
                                                Owner.Entity.Money += item.Cost;
                                                //Database.EntityTable.UpdateMoney(Owner);
                                                client.Send(usage);
                                                client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                                usage.ID = ItemUsage.RemoveItemFromBooth;
                                                Owner.Send(usage);
                                                Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                                usage.ID = ItemUsage.RemoveInventory;
                                                Owner.Send(usage);
                                                Owner.Booth.ItemList.Remove(item.Item.UID);
                                                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                                Owner.Send(ServerBase.Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, false, item.Cost));
                                            }
                                        }
                                        else
                                        {
                                            if (client.Entity.ConquerPoints >= item.Cost)
                                            {
                                                client.Entity.ConquerPoints -= item.Cost;
                                                Database.EntityTable.UpdateCps(client);
                                                Owner.Entity.ConquerPoints += item.Cost;
                                                Database.EntityTable.UpdateCps(Owner);
                                                client.Send(usage);
                                                client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                                usage.ID = ItemUsage.RemoveItemFromBooth;
                                                Owner.Send(usage);
                                                Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                                usage.ID = ItemUsage.RemoveInventory;
                                                Owner.Send(usage);
                                                Owner.Booth.ItemList.Remove(item.Item.UID);
                                                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                                Owner.Send(ServerBase.Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, true, item.Cost));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                if (client.Screen.TryGetValue((uint)((usage.dwParam - 100000) + 1000000), out entity))
                {
                    if (entity.Owner == null)
                        return;
                    Owner = entity.Owner;
                    if (Owner.Booth == null)
                    {
                        Owner.Disconnect();
                        return;
                    }
                    if (Owner != null)
                    {
                        if (Owner.Entity.UID != client.Entity.UID)
                        {
                            if (Owner.Booth.ItemList.ContainsKey(usage.UID))
                            {
                                Game.ConquerStructures.BoothItem item;
                                if (Owner.Booth.ItemList.TryGetValue(usage.UID, out item))
                                {
                                    if (client.Inventory.Count <= 39)
                                    {
                                        if (item.Cost_Type == PhoenixProject.Game.ConquerStructures.BoothItem.CostType.Silvers)
                                        {
                                            if (client.Entity.Money >= item.Cost)
                                            {
                                                client.Entity.Money -= item.Cost;
                                                //Database.EntityTable.UpdateMoney(client);
                                                Owner.Entity.Money += item.Cost;
                                                //Database.EntityTable.UpdateMoney(Owner);
                                                client.Send(usage);
                                                client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                                usage.ID = ItemUsage.RemoveItemFromBooth;
                                                Owner.Send(usage);
                                                Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                                usage.ID = ItemUsage.RemoveInventory;
                                                Owner.Send(usage);
                                                Owner.Booth.ItemList.Remove(item.Item.UID);
                                                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                                Owner.Send(ServerBase.Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, false, item.Cost));
                                            }
                                        }
                                        else
                                        {
                                            if (client.Entity.ConquerPoints >= item.Cost)
                                            {
                                                client.Entity.ConquerPoints -= item.Cost;
                                                Database.EntityTable.UpdateCps(client);
                                                Owner.Entity.ConquerPoints += item.Cost;
                                                Database.EntityTable.UpdateCps(Owner);
                                                client.Send(usage);
                                                client.Inventory.Add(item.Item, Game.Enums.ItemUse.Move);
                                                usage.ID = ItemUsage.RemoveItemFromBooth;
                                                Owner.Send(usage);
                                                Owner.Inventory.Remove(item.Item.UID, Game.Enums.ItemUse.None, false);
                                                usage.ID = ItemUsage.RemoveInventory;
                                                Owner.Send(usage);
                                                Owner.Booth.ItemList.Remove(item.Item.UID);
                                                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.Item.ID, 0);
                                                Owner.Send(ServerBase.Constants.BoothItemSell(client.Entity.Name, infos.BaseInformation.Name, true, item.Cost));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        static void RemoveItemFromBooth(ItemUsage usage, Client.GameState client)
        {
            if (client.Booth.ItemList.ContainsKey(usage.UID))
            {
                client.Booth.ItemList.Remove(usage.UID);
                client.SendScreen(usage, true);
            }
        }
        #endregion
        #region Mentor Apprentice
        static void ExpelApprentice(MentorApprentice ma, Client.GameState client)
        {
            if (client.Apprentices.ContainsKey(ma.dwParam))
            {
                var appr = client.Apprentices[ma.dwParam];
                if (appr.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpMentor;
                    ma.Online = false;
                    appr.Client.Send(ma);
                    appr.Client.Mentor = null;
                    appr.Client.ReviewMentor();
                }
                Database.KnownPersons.RemoveMentor(appr.ID);
                client.Apprentices.Remove(appr.ID);
            }
        }
        static void LeaveMentor(MentorApprentice ma, Client.GameState client)
        {
            if (client.Mentor != null)
            {
                if (client.Mentor.IsOnline)
                {
                    ma.Type = MentorApprentice.DumpMentor;
                    client.Send(ma);
                    ma.Type = MentorApprentice.DumpApprentice;
                    client.Mentor.Client.Send(ma);
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = false;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = 0;
                    AppInfo.Mentor_ID = client.Mentor.Client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Mentor.Client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Mentor.Client.Send(AppInfo);
                    client.Mentor.Client.Apprentices.Remove(client.Entity.UID);
                    client.Mentor = null;
                    client.ReviewMentor();
                }
                Database.KnownPersons.RemoveMentor(client.Entity.UID);
            }
        }
        static void AddMentor(MentorApprentice ma, Client.GameState client)
        {
            Client.GameState Target = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;

                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestMentor;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AddApprentice(MentorApprentice ma, Client.GameState client)
        {
            Client.GameState Target = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(ma.dwParam, out Target))
            {
                if (!client.Screen.Contains(Target.Entity.UID)) return;
                if (client.apprtnum == 5) return;
                MentorApprentice Mentor = new MentorApprentice(true);
                Mentor.Type = MentorApprentice.AcceptRequestApprentice;
                Mentor.dwParam = Target.Entity.UID;
                Mentor.UID = client.Entity.UID;
                Mentor.Dynamic = (byte)client.Entity.BattlePower;
                Mentor.Online = true;
                Mentor.Name = client.Entity.Name;

                Target.Send(Mentor);
            }
        }
        static void AcceptRequestMentor(MentorApprentice ma, Client.GameState client)
        {
            Client.GameState Target = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);

                    Target.Mentor = new PhoenixProject.Game.ConquerStructures.Society.Mentor();
                    Target.Mentor.ID = client.Entity.UID;
                    Target.Mentor.Name = client.Entity.Name;
                    Target.Mentor.EnroleDate = EnroleDate;

                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Mentor.Client.Entity.UID;
                    Information.Apprentice_ID = Target.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Mentor.Client.Entity.Level;
                    Information.Mentor_Class = Target.Mentor.Client.Entity.Class;
                    Information.Mentor_PkPoints = Target.Mentor.Client.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Mentor.Client.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = (uint)(((Target.Mentor.Client.Entity.BattlePower - Target.Mentor.Client.Entity.ExtraBattlePower) - (Target.Entity.BattlePower - Target.Entity.ExtraBattlePower)) / 3.3F);
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Mentor.Client.Entity.Name;
                    Information.Apprentice_Name = Target.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Mentor.Client.Entity.Spouse;

                    Target.Send(Information);
                    Target.ReviewMentor();
                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = Target.Entity.UID;
                    AppInfo.Apprentice_Level = Target.Entity.Level;
                    AppInfo.Apprentice_Name = Target.Entity.Name;
                    AppInfo.Apprentice_Class = Target.Entity.Class;
                    AppInfo.Apprentice_PkPoints = Target.Entity.PKPoints;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Spouse_Name = Target.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = client.Entity.UID;
                    AppInfo.Mentor_Mesh = client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Entity.Name;
                    AppInfo.Type = 2;
                    client.Send(AppInfo);
                    client.Apprentices.Add(Target.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = Target.Entity.UID,
                        Name = Target.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(Target.Mentor, client.Apprentices[Target.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        static void AcceptRequestApprentice(MentorApprentice ma, Client.GameState client)
        {
            Client.GameState Target = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(ma.UID, out Target))
            {
                if (ma.Dynamic == 1)
                {
                    uint EnroleDate = (uint)(DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day);
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = Target.Entity.UID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = EnroleDate;
                    Information.Mentor_Level = Target.Entity.Level;
                    Information.Mentor_Class = Target.Entity.Class;
                    Information.Mentor_PkPoints = Target.Entity.PKPoints;
                    Information.Mentor_Mesh = Target.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = ((uint)(((Target.Entity.BattlePower - Target.Entity.ExtraBattlePower) - (client.Entity.BattlePower - client.Entity.ExtraBattlePower)) / 3.3F));
                    Information.String_Count = 3;
                    Information.Mentor_Name = Target.Entity.Name;
                    Information.Apprentice_Name = client.Entity.Name;
                    Information.Mentor_Spouse_Name = Target.Entity.Spouse;

                    client.Send(Information);
                    client.Mentor = new PhoenixProject.Game.ConquerStructures.Society.Mentor();
                    client.Mentor.ID = Target.Entity.UID;
                    client.Mentor.Name = Target.Entity.Name;
                    client.Mentor.EnroleDate = EnroleDate;
                    client.ReviewMentor();

                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = EnroleDate;
                    AppInfo.Mentor_ID = Target.Entity.UID;
                    AppInfo.Mentor_Mesh = Target.Entity.Mesh;
                    AppInfo.Mentor_Name = Target.Entity.Name;
                    AppInfo.Type = 2;
                    Target.Send(AppInfo);
                    Target.Apprentices.Add(client.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.Apprentice()
                    {
                        ID = client.Entity.UID,
                        Name = client.Entity.Name,
                        EnroleDate = EnroleDate
                    });
                    Database.KnownPersons.AddMentor(client.Mentor, Target.Apprentices[client.Entity.UID]);
                }
                else
                {
                    Target.Send(new Message(client.Entity.Name + " declined your request.", System.Drawing.Color.Beige, Message.Talk));
                }
            }
        }
        #endregion
        #region TradePartners
        static void RequestTradePartnership(TradePartner partner, Client.GameState client)
        {
            if (client.Screen.Contains(partner.UID))
            {
                var Client = ServerBase.Kernel.GamePool[partner.UID];
                if (Client != null)
                {
                    if (Client.TradePartnerRequest != client.Entity.UID)
                    {
                        client.TradePartnerRequest = Client.Entity.UID;
                        partner.UID = client.Entity.UID;
                        partner.Name = client.Entity.Name;
                        Client.Send(partner);
                    }
                    else
                    {
                        DateTime Now = DateTime.Now;
                        client.Partners.Add(Client.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        Client.Partners.Add(client.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.TradePartner()
                        {
                            ID = Client.Entity.UID,
                            Name = Client.Entity.Name,
                            ProbationStartedOn = Now
                        });
                        client.Send(new TradePartner(true)
                        {
                            UID = Client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = Client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Client.Send(new TradePartner(true)
                        {
                            UID = client.Entity.UID,
                            Type = TradePartner.AddPartner,
                            Name = client.Entity.Name,
                            HoursLeft = (int)(new TimeSpan(Now.AddDays(3).Ticks).TotalHours - new TimeSpan(Now.Ticks).TotalHours),
                            Online = true
                        });
                        Database.KnownPersons.AddPartner(client, client.Partners[Client.Entity.UID]);
                        client.SendScreen(new Message(Client.Entity.Name + " has begun " + client.Entity.Name + " a partnership probation for three days!", System.Drawing.Color.Red, Message.TopLeft), true);
                    }
                }
            }
        }
        static void RejectPartnership(TradePartner partner, Client.GameState client)
        {
            client.TradePartnerRequest = 0;
            var Client = ServerBase.Kernel.GamePool[partner.UID];
            if (Client != null)
            {
                Client.Send(new TradePartner(true)
                {
                    UID = client.Entity.UID,
                    Type = TradePartner.RejectRequest,
                    Name = client.Entity.Name,
                    Online = true
                });
            }
        }
        static void BreakPartnership(TradePartner partner, Client.GameState client)
        {
            if (client.Partners.ContainsKey(partner.UID))
            {
                GameState Client;
                if (ServerBase.Kernel.GamePool.TryGetValue(partner.UID, out Client))
                {
                    Client.Partners.Remove(client.Entity.UID);
                    Client.Send(new TradePartner(true)
                    {
                        UID = client.Entity.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    Client.Send(new Message(client.Entity.Name + " has broken the partnership with you.", System.Drawing.Color.Red, Message.TopLeft));

                    client.Send(new TradePartner(true)
                    {
                        UID = partner.UID,
                        Type = TradePartner.BreakPartnership,
                        Name = "",
                        Online = false
                    });
                    client.Partners.Remove(partner.UID);
                    Database.KnownPersons.RemovePartner(client, partner.UID);
                    Client.Send(new Message("You have broken the partnership with " + partner.Name + ".", System.Drawing.Color.Red, Message.TopLeft));
                }
            }
        }
        #endregion
        #region KnownPersons
        static void RemoveFriend(KnownPersons knownperson, Client.GameState client)
        {
            if (client.Friends.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Friend friend = client.Friends[knownperson.UID];
                if (friend.IsOnline)
                {
                    friend.Client.Friends.Remove(client.Entity.UID);
                    friend.Client.Send(new KnownPersons(true)
                    {
                        UID = client.Entity.UID,
                        Type = KnownPersons.RemovePerson,
                        Name = "",
                        Online = false
                    });
                }
                client.Friends.Remove(friend.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = friend.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveFriend(client, friend.ID);
            }
        }
        static void RemoveEnemy(KnownPersons knownperson, Client.GameState client)
        {
            if (client.Enemy.ContainsKey(knownperson.UID))
            {
                Game.ConquerStructures.Society.Enemy enemy = client.Enemy[knownperson.UID];

                client.Enemy.Remove(enemy.ID);
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.ID,
                    Type = KnownPersons.RemovePerson,
                    Name = "",
                    Online = false
                });
                Database.KnownPersons.RemoveEnemy(client, enemy.ID);
            }
        }
        static void AddFriend(KnownPersons knownperson, Client.GameState client)
        {
            if (!client.Friends.ContainsKey(knownperson.UID) && client.Friends.Count < 100)
            {
                Client.GameState Client = ServerBase.Kernel.GamePool[knownperson.UID];
                if (Client != null)
                {
                    Client.OnMessageBoxOK = delegate
                    {
                        if (client != null)
                        {
                            if (client.Socket != null)
                            {
                                if (client.Socket.Connected)
                                {
                                    if (!Client.Friends.ContainsKey(client.Entity.UID))
                                    {
                                        client.Friends.Add(Client.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = Client.Entity.UID,
                                            Name = Client.Entity.Name
                                        });
                                        Client.Friends.Add(client.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.Friend()
                                        {
                                            ID = client.Entity.UID,
                                            Name = client.Entity.Name
                                        });
                                        client.Send(new KnownPersons(true)
                                        {
                                            UID = Client.Entity.UID,
                                            Type = KnownPersons.AddFriend,
                                            Name = Client.Entity.Name,
                                            Online = true
                                        });
                                        Client.Send(new KnownPersons(true)
                                        {
                                            UID = client.Entity.UID,
                                            Type = KnownPersons.AddFriend,
                                            Name = client.Entity.Name,
                                            Online = true
                                        });
                                        Database.KnownPersons.AddFriend(client, client.Friends[Client.Entity.UID]);
                                        client.SendScreen(new Message(Client.Entity.Name + " has accepted " + client.Entity.Name + "'s friendship request.", System.Drawing.Color.Red, Message.TopLeft), true);
                                    }
                                }
                            }
                        }
                    };
                    Client.OnMessageBoxCANCEL = delegate
                    {
                        if (client != null)
                        {
                            if (client.Socket != null)
                            {
                                if (client.Socket.Connected)
                                {
                                    if (Client != null)
                                    {
                                        if (Client.Socket != null)
                                        {
                                            if (Client.Socket.Connected)
                                            {
                                                client.Send(new Message(Client.Entity.Name + " has rejected your friendship request.", System.Drawing.Color.Red, Message.TopLeft));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    Client.Send(new NpcReply(NpcReply.MessageBox, client.Entity.Name + " wants to be your friend."));
                }
            }
        }

        public static void AddEnemy(Client.GameState client, Client.GameState enemy)
        {
            if (!client.Enemy.ContainsKey(enemy.Entity.UID))
            {
                client.Enemy.Add(enemy.Entity.UID, new PhoenixProject.Game.ConquerStructures.Society.Enemy()
                {
                    ID = enemy.Entity.UID,
                    Name = enemy.Entity.Name
                });
                client.Send(new KnownPersons(true)
                {
                    UID = enemy.Entity.UID,
                    Type = KnownPersons.AddEnemy,
                    Name = enemy.Entity.Name,
                    Online = true
                });
                Database.KnownPersons.AddEnemy(client, client.Enemy[enemy.Entity.UID]);
            }
        }

        #endregion
        #region Attack
        public static void Attack(Attack attack, Client.GameState client)
        {

            client.Entity.AttackPacket = attack;
            // Console.WriteLine("hh");
            new Game.Attacking.Handle(attack, client.Entity, null);
        }
        #endregion
        #region Trade
        static void RequestTrade(Trade trade, Client.GameState client)
        {
            Client.GameState _client = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(trade.dwParam, out _client))
            {
                if (_client.Trade.InTrade || client.Trade.InTrade || client.Entity.UID == trade.dwParam || ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, _client.Entity.X, _client.Entity.Y) > ServerBase.Constants.pScreenDistance)
                {
                    client.Send(ServerBase.Constants.TradeInProgress);
                    return;
                }
                client.Trade.TraderUID = _client.Entity.UID;
                if (_client.Trade.TraderUID == client.Entity.UID)
                {
                    _client.Trade.InTrade = client.Trade.InTrade = true;
                    trade.Type = Trade.ShowTable;
                    client.Send(trade);
                    trade.dwParam = client.Entity.UID;
                    _client.Send(trade);
                }
                else
                {

                    client.Send(ServerBase.Constants.TradeRequest);
                    trade.dwParam = client.Entity.UID;
                    PopupLevelBP request = new PopupLevelBP();
                    request.Requester = client.Entity.UID;
                    request.Receiver = _client.Entity.UID;
                    request.Level = client.Entity.Level;
                    request.BattlePower = (uint)client.Entity.BattlePower;
                    _client.Send(request);
                    _client.Send(trade);
                    _client.Send(request);

                }
            }
        }
        static void CloseTrade(Trade trade, Client.GameState client)
        {
            Client.GameState _client = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                _client.Trade = new Game.ConquerStructures.Trade();
                client.Trade = new Game.ConquerStructures.Trade();
                trade.Type = Trade.HideTable;
                trade.dwParam = _client.Entity.UID;
                client.Send(trade);
                trade.dwParam = client.Entity.UID;
                _client.Send(trade);
            }
        }
        static void AddTradeItem(Trade trade, Client.GameState client)
        {
            if (client.Booth != null)
            {
                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you cant Trade items while you in Booth");
                npc.OptionID = 255;
                client.Send(npc.ToArray());
                return;
            }
            Interfaces.IConquerItem item = null;

            if (client.Inventory.TryGetItem(trade.dwParam, out item))
            {
                if (item != null)
                {
                    Client.GameState _client = null;
                    if (ServerBase.Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
                    {
                        Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                        //var infos = Database.ConquerItemInformation.BaseInformations[(uint)item.ID];
                        if (infos != null)
                        {
                            //Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                            if (_client != null && client != null)
                            {
                                if (_client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                {
                                    if (client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                    {
                                        if (infos.BaseInformation.Type != Database.ConquerItemBaseInformation.ItemType.Dropable || (item.Lock != 0 && !client.Partners.ContainsKey(_client.Entity.UID) && !client.Partners[_client.Entity.UID].StillOnProbation) || item.Bound || item.Suspicious)
                                        {
                                            trade.Type = Trade.RemoveItem;
                                            client.Send(trade);
                                            return;
                                        }
                                    }
                                }
                            }
                            if (_client.Inventory.Count + client.Trade.Items.Count >= 40 || client.Trade.Items.Count == 20)
                            {
                                trade.Type = Trade.RemoveItem;
                                client.Send(trade);
                                client.Send(ServerBase.Constants.TradeInventoryFull);
                                return;
                            }
                            client.Trade.Items.Add(item);
                            item.Mode = Game.Enums.ItemMode.Trade;
                            item.Send(_client);
                        }
                    }
                    else
                    {
                        Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "you cant trade any Special Soul only can sell in market in Shop more than 1 kk cps ok?");
                        npc.OptionID = 255;
                        client.Send(npc.ToArray());
                    }

                }
            }
        }
        static void SetTradeMoney(Trade trade, Client.GameState client)
        {
            Client.GameState _client = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Entity.Money >= trade.dwParam)
                {
                    client.Trade.Money = trade.dwParam;
                    trade.Type = Trade.ShowMoney;
                    _client.Send(trade);
                }
                else
                    CloseTrade(trade, client);
            }
        }
        static void SetTradeConquerPoints(Trade trade, Client.GameState client)
        {
            Client.GameState _client = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                if (client.Entity.ConquerPoints >= trade.dwParam)
                {
                    client.Trade.ConquerPoints = trade.dwParam;
                    trade.Type = Trade.ShowConquerPoints;
                    _client.Send(trade);
                }
                else
                    CloseTrade(trade, client);
            }
        }
        static void AcceptTrade(Trade trade, Client.GameState client)
        {
            Client.GameState _client = null;
            if (ServerBase.Kernel.GamePool.TryGetValue(client.Trade.TraderUID, out _client))
            {
                client.Trade.Accepted = true;
                _client.Send(trade);
                if (_client.Trade.Accepted)
                {
                    if (client.Inventory.Count + _client.Trade.Items.Count <= 40)
                    {
                        foreach (Interfaces.IConquerItem item in _client.Trade.Items)
                        {
                            if (_client.Inventory.ContainsUID(item.UID))
                            {
                                client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                _client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);

                                /* #region TradeLog
                                 var dt = DateTime.Now;
                                 string date = dt.Year + "-" + dt.Month + "//";
                                 string datess = + dt.Day + "//";
                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\Trade"))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade");

                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + ""))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "");
                                 if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt"))
                                     File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt");

                                
                                 File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt",
      File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt") +
      "\r\n" + _client.Entity.Name + " gaved " + client.Entity.Name + " item:" + item.UID + " Plus:" + item.Plus + " Name: " + Database.ConquerItemInformation.BaseInformations[item.ID].Name + "");
                                
                                 #endregion*/

                            }
                        }
                    }
                    if (_client.Inventory.Count + client.Trade.Items.Count <= 40)
                    {
                        foreach (Interfaces.IConquerItem item in client.Trade.Items)
                        {
                            if (client.Inventory.ContainsUID(item.UID))
                            {
                                _client.Inventory.Add(item, Game.Enums.ItemUse.Move);
                                client.Inventory.Remove(item.UID, Game.Enums.ItemUse.None, true);
                                /* var dt = DateTime.Now;
                                 string date = dt.Year + "-" + dt.Month + "//";
                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\Trade"))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade");

                                 if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + ""))
                                     Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "");
                                 if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt"))
                                     File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt");
                                 //string fullPath = System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.UnhandledTradePath + "\\" + date + "\\" + dt.Day + ".txt";

                                 File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt",
                                         File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + date + "\\" + dt.Day + ".txt") +
                                         "\r\n" + client.Entity.Name + " gaved " + _client.Entity.Name + " item:" + item.UID + " Plus:" + item.Plus + " Name: " + Database.ConquerItemInformation.BaseInformations[item.ID].Name + "");*/

                            }
                        }
                    }

                    if (_client.Trade.Money <= _client.Entity.Money)
                    {
                        _client.Entity.Money -= _client.Trade.Money;
                        client.Entity.Money += _client.Trade.Money;
                    }
                    if (client.Trade.Money <= client.Entity.Money)
                    {
                        client.Entity.Money -= client.Trade.Money;
                        _client.Entity.Money += client.Trade.Money;
                    }
                    if (_client.Trade.ConquerPoints <= _client.Entity.ConquerPoints)
                    {
                        _client.Entity.ConquerPoints -= _client.Trade.ConquerPoints;
                        client.Entity.ConquerPoints += _client.Trade.ConquerPoints;
                    }
                    if (client.Trade.ConquerPoints <= client.Entity.ConquerPoints)
                    {
                        client.Entity.ConquerPoints -= client.Trade.ConquerPoints;
                        _client.Entity.ConquerPoints += client.Trade.ConquerPoints;
                    }

                    var dts = DateTime.Now;
                    string dates = dts.Year + "-" + dts.Month + "//";
                    if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                        Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                    if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\Trade"))
                        Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade");

                    if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + ""))
                        Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "");
                    if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt"))
                        File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt");
                    //string fullPath = System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.UnhandledTradePath + "\\" + date + "\\" + dt.Day + ".txt";

                    File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt",
                        File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt") +
                        "\r\nTrader:" + client.Entity.Name + ":  TradeWith: " + _client.Entity.Name + " Cps1: " + client.Trade.ConquerPoints + " Cps2: " + _client.Trade.ConquerPoints + " Time: " + DateTime.Now + "");


                    File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt",
                        File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Trade\\" + dates + "\\" + dts.Day + ".txt") +
                        "\r\n-------------------------------------------------------------------");



                    trade.Type = Trade.HideTable;
                    trade.dwParam = client.Entity.UID;
                    client.Send(trade);
                    trade.dwParam = _client.Entity.UID;
                    _client.Send(trade);

                    _client.Trade = new Game.ConquerStructures.Trade();
                    client.Trade = new Game.ConquerStructures.Trade();
                    client.Entity.Money = (uint)client.Entity.Money;
                    _client.Entity.Money = (uint)_client.Entity.Money;
                    client.Entity.ConquerPoints = (uint)client.Entity.ConquerPoints;
                    _client.Entity.ConquerPoints = (uint)_client.Entity.ConquerPoints;
                    Database.EntityTable.UpdateCps(client);
                    Database.EntityTable.UpdateCps(_client);
                    //Database.EntityTable.UpdateMoney(client);
                    //Database.EntityTable.UpdateMoney(_client);

                }
            }
        }
        #endregion
        #region ItemHandler
        public static void StabilazeArtifact(ItemAddingStabilization stabilizate, Client.GameState client)
        {
            Interfaces.IConquerItem Item = null;
            if (client.Inventory.TryGetItem(stabilizate.ItemUID, out Item))
            {
                if (Item.Purification.PurificationDuration != 0)
                {
                    if (Item.Purification.PurificationItemID != 0)
                    {
                        List<uint> purificationStones = stabilizate.PurificationItems;
                        int sum = 0;
                        List<Interfaces.IConquerItem> PurificationStones = new List<PhoenixProject.Interfaces.IConquerItem>(purificationStones.Count);

                        for (int i = 0; i < purificationStones.Count; i++)
                        {
                            Interfaces.IConquerItem pItem = null;
                            if (client.Inventory.TryGetItem(purificationStones[i], out pItem))
                            {
                                if (pItem.ID == 723694)
                                {
                                    sum += 10;
                                    PurificationStones.Add(pItem);
                                }
                                if (pItem.ID == 723695)
                                {
                                    sum += 100;
                                    PurificationStones.Add(pItem);
                                }
                            }
                        }
                        if (sum >= Database.DataHolder.PurifyStabilizationPoints((byte)Item.Purification.PurificationLevel))
                        {
                            var Backup = Item.Purification;
                            Backup.PurificationDuration = 0;
                            Item.Purification = Backup;
                            Item.Send(client);
                            Database.ItemAddingTable.Stabilize(Item.UID, Backup.PurificationItemID);
                            foreach (var item in PurificationStones)
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        }
                    }
                }
            }
        }

        public static void PurifyRefinery(Purification ps, Client.GameState client)
        {
            Interfaces.IConquerItem item = null, refine = null;
            client.Inventory.TryGetItem(ps.ItemUID, out item);
            client.Inventory.TryGetItem(ps.AddUID, out refine);
            if (refine != null)
            {
                if (item == null)
                    item = client.Equipment.TryGetItem(ps.ItemUID);
                if (item != null)
                {
                    Refinery.RefineryItem refineStats;
                    if (Kernel.DatabaseRefinery.TryGetValue(refine.ID, out refineStats))
                    {
                        Boolean valid = true;
                        if (item.Position < 100)
                        {
                            UInt32 iType = item.ID / 1000;
                            Positions pos = GetPositionFromID(item.ID);
                            if (pos != (Positions)refineStats.Position)
                                valid = false;
                            if (pos == Positions.Garment)
                                return;
                            if (pos == Positions.Steed)
                                return;
                            if (pos == Positions.Bottle)
                                return;
                            if (pos == Positions.SteedArmor)
                                return;
                            if (pos == Positions.SteedTalisman)
                                return;
                            if (pos == Positions.LeftAccessory)
                                return;
                            if (pos == Positions.RightAccessory)
                                return;
                            if (pos == Positions.DefenceTalisman)
                                return;
                            if (pos == Positions.AttackTalisman)
                                return;
                            else if (refineStats.Position == 5)
                                valid = item.IsTwoHander();
                            if (iType == refineStats.Position)
                                valid = true;
                        }
                        else
                        {
                            if (item.GetItemType() != (ConquerItem.ItemTypes)refineStats.Position)
                                valid = false;
                        }

                        if (valid)
                        {
                            if (item.Position == 7)
                                return;
                            if (item.Position == 9)
                                return;
                            if (item.Position == 11)
                                return;
                            if (item.Position == 12)
                                return;
                            if (item.Position == 10)
                                return;
                            if (item.Position == 18)
                                return;
                            if (item.Position == 17)
                                return;
                            if (item.Position == 15)
                                return;
                            if (item.Position == 16)
                                return;
                            client.Inventory.Remove(refine, Game.Enums.ItemUse.Remove);
                            item.RefineItem = refineStats.Identifier;
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.RefineryTime = DateTime.Now.AddDays(7);
                            item.Send(client);

                            client.LoadItemStats(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();

                            Database.ConquerItemTable.UpdateRefineryItem(item);
                            Database.ConquerItemTable.UpdateRefineryTime(item);

                            client.Send(WindowStats(client));
                            //LoadItemStatus(client);
                            // c.Send(new Game_HeroStats(c.Hero));
                        }
                        else
                            client.Send(new Message(String.Format("You cannot refine your {0} with that {1}.",
                                Database.ConquerItemInformation.BaseInformations[item.ID].Name, Database.ConquerItemInformation.BaseInformations[refine.ID].Name), System.Drawing.Color.Red, Message.TopLeft));
                    }
                    else
                        Console.WriteLine(String.Format("No database refinery {0}", refine.ID));
                }
            }
        }
        public static void PurifyItem(Purification ps, Client.GameState client)
        {
            Interfaces.IConquerItem Item = null, AddingItem = null;
            if (client.Inventory.TryGetItem(ps.ItemUID, out Item) && client.Inventory.TryGetItem(ps.AddUID, out AddingItem))
            {
                if (ps.ItemUID == ps.AddUID)
                    return;

                var PurifyInformation = Database.ConquerItemInformation.BaseInformations[AddingItem.ID];
                var ItemInformation = Database.ConquerItemInformation.BaseInformations[Item.ID];
                if (PurifyInformation.PurificationLevel > 0)
                {
                    if (ItemInformation.Level >= PurifyInformation.Level)
                    {
                        if (client.Inventory.Contains(1088001, PurifyInformation.PurificationMeteorNeed))
                        {
                            client.Inventory.Remove(1088001, (byte)PurifyInformation.PurificationMeteorNeed);
                            if (Item.Purification.PurificationItemID > 0)
                                Database.ItemAddingTable.RemoveAdding(Item.UID, Item.Purification.PurificationItemID);
                            client.Send(ps);
                            ItemAdding.Purification_ purify = new ItemAdding.Purification_();
                            purify.AddedOn = DateTime.Now;
                            purify.Available = true;
                            purify.ItemUID = ps.ItemUID;
                            purify.PurificationLevel = PurifyInformation.PurificationLevel;
                            purify.PurificationDuration = 7 * 24 * 60 * 60;
                            purify.PurificationItemID = AddingItem.ID;
                            Database.ItemAddingTable.AddPurification(purify);
                            Item.Purification = purify;
                            Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                            Item.Send(client);
                            client.Inventory.Remove(AddingItem, PhoenixProject.Game.Enums.ItemUse.Remove);
                            client.LoadItemStats(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            client.Send(ps);
                        }
                    }
                }
            }
        }
        public static bool IsEquipment(long ID)
        {
            return ItemPosition((uint)ID) != 0;
        }
        public static void ReloadArrows(Interfaces.IConquerItem arrow, Client.GameState client)
        {
            if (!client.AlternateEquipment)
            {
                if (client.Entity.Class < 40 || client.Entity.Class > 45)
                    return;
                if (client.Equipment.Free(4))
                    return;
                if (client.Equipment.TryGetItem(4).ID / 1000 != 500)
                    return;
                client.Equipment.DestroyArrow(5);
                uint id = 1050002;
                if (arrow != null)
                    id = arrow.ID;
                if (client.Inventory.Contains(id, 1))
                {
                    var newArrow = client.Inventory.GetItemByID(id);
                    newArrow.Position = 5;
                    client.Inventory.Remove(newArrow, PhoenixProject.Game.Enums.ItemUse.Move);
                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(id, 0);

                    client.Equipment.Add(newArrow);
                    client.Equipment.Objects[4].UID += 0;
                    client.Equipment.Objects[4].Send(client);

                    ClientEquip equips = new ClientEquip();
                    equips.DoEquips(client);
                    client.Send(equips);

                    client.Send(ServerBase.Constants.ArrowsReloaded);
                }
                else if (!client.Inventory.Contains(id, 1))
                {
                    client.Send(ServerBase.Constants.NoArrows(Database.ConquerItemInformation.BaseInformations[id].Name));
                }
            }
            else
            {
                if (client.Entity.Class < 40 || client.Entity.Class > 45)
                    return;
                if (client.Equipment.Free(24))
                    return;
                if (client.Equipment.TryGetItem(24).ID / 1000 != 500)
                    return;
                client.Equipment.DestroyArrow(25);
                uint id = 1050002;
                if (arrow != null)
                    id = arrow.ID;
                if (client.Inventory.Contains(id, 1))
                {
                    var newArrow = client.Inventory.GetItemByID(id);
                    newArrow.Position = 25;
                    client.Inventory.Remove(newArrow, PhoenixProject.Game.Enums.ItemUse.Move);
                    Database.ConquerItemInformation infos = new Database.ConquerItemInformation(id, 0);

                    client.Equipment.Add(newArrow);
                    client.Equipment.Objects[24].UID += 0;
                    client.Equipment.Objects[24].Send(client);

                    ClientEquip equips = new ClientEquip(client);
                    //equips.DoEquips(client);
                    client.Send(equips);

                    client.Send(ServerBase.Constants.ArrowsReloaded);
                }
                else if (!client.Inventory.Contains(id, 1))
                {
                    client.Send(ServerBase.Constants.NoArrows(Database.ConquerItemInformation.BaseInformations[id].Name));
                }
            }
        }
        static void ComposePlus(Compose compose, Client.GameState client)
        {
            Interfaces.IConquerItem Item = null, ItemPlus = null;
            if (client.Inventory.TryGetItem(compose.ItemUID, out Item) && client.Inventory.TryGetItem(compose.PlusItemUID, out ItemPlus))
            {
                UInt32 iType = Item.ID / 1000;
                Positions pos = GetPositionFromID(Item.ID);
                if (pos == Positions.Garment)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.RightAccessory)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.LeftAccessory)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.Bottle)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }

                if (pos == Positions.SteedArmor)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }

                if (compose.ItemUID == compose.PlusItemUID)
                    return;
                switch (compose.Mode)
                {
                    case Compose.CurrentSteed:
                    case Compose.Plus:
                        {
                            if (Item.Plus < 12)
                            {
                                uint pluss = Item.Plus;
                                Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                {

                                    Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                    Item.Plus++;
                                    if (Item.Plus == 12)
                                        Item.PlusProgress = 0;
                                }
                                Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                Item.Send(client);
                                Database.ConquerItemTable.UpdatePlus(Item);
                                Database.ConquerItemTable.UpdatePlusProgress(Item);
                                client.Inventory.Remove(ItemPlus, PhoenixProject.Game.Enums.ItemUse.Remove);
                                if (Item.Plus >= 9 && pluss != Item.Plus)
                                    ServerBase.Kernel.SendWorldMessage(new Message("Congratulations, " + client.Entity.Name + " has upgraded His " + Database.ConquerItemInformation.BaseInformations[Item.ID].Name + " to + [" + Item.Plus + "] !", System.Drawing.Color.Red, Network.GamePackets.Message.TopLeft), ServerBase.Kernel.GamePool.Values);
                            }
                            break;
                        }
                    case Compose.NewSteed:
                        {
                            if (Item.Plus < 12)
                            {
                                Item.PlusProgress += Database.DataHolder.StonePlusPoints(ItemPlus.Plus);
                                while (Item.PlusProgress >= Database.DataHolder.ComposePlusPoints(Item.Plus) && Item.Plus != 12)
                                {
                                    Item.PlusProgress -= Database.DataHolder.ComposePlusPoints(Item.Plus);
                                    Item.Plus++;
                                    if (Item.Plus == 12)
                                        Item.PlusProgress = 0;
                                }
                                Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                Item.Send(client);
                                Database.ConquerItemTable.UpdatePlus(Item);
                                client.Inventory.Remove(ItemPlus, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            int color1 = (int)Item.SocketProgress;
                            int color2 = (int)ItemPlus.SocketProgress;
                            int B1 = color1 & 0xFF;
                            int B2 = color2 & 0xFF;
                            int G1 = (color1 >> 8) & 0xFF;
                            int G2 = (color2 >> 8) & 0xFF;
                            int R1 = (color1 >> 16) & 0xFF;
                            int R2 = (color2 >> 16) & 0xFF;
                            int newB = (int)Math.Floor(0.9 * B1) + (int)Math.Floor(0.1 * B2);
                            int newG = (int)Math.Floor(0.9 * G1) + (int)Math.Floor(0.1 * G2);
                            int newR = (int)Math.Floor(0.9 * R1) + (int)Math.Floor(0.1 * R2);
                            Item.SocketProgress = (uint)(newB | (newG << 8) | (newR << 16));
                            Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                            Item.Send(client);
                            Database.ConquerItemTable.UpdateSocketProgress(Item);
                            client.Inventory.Remove(ItemPlus, PhoenixProject.Game.Enums.ItemUse.Remove);
                            break;
                        }
                }
            }
        }

        static void SocketItem(EmbedSocket socket, Client.GameState client)
        {
            Interfaces.IConquerItem Item = null;
            Interfaces.IConquerItem Gem = null;
            if (client.Inventory.TryGetItem(socket.ItemUID, out Item))
            {
                if (client.Inventory.TryGetItem(socket.GemUID, out Gem) || socket.Mode == EmbedSocket.Remove)
                {
                    switch (socket.Mode)
                    {
                        case EmbedSocket.Add:
                            {
                                byte gemBase = (byte)(Gem.ID % 1000);
                                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                                {
                                    switch (socket.Slot)
                                    {
                                        case EmbedSocket.SlotOne:
                                            {
                                                if ((byte)Item.SocketOne == 255)
                                                {
                                                    Item.SocketOne = (PhoenixProject.Game.Enums.Gem)(Gem.ID % 1000);
                                                    Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, PhoenixProject.Game.Enums.ItemUse.Remove);
                                                    break;
                                                }
                                                break;
                                            }
                                        case EmbedSocket.SlotTwo:
                                            {
                                                if ((byte)Item.SocketOne > 0 && (byte)Item.SocketOne < 255)
                                                {
                                                    if ((byte)Item.SocketTwo == 255)
                                                    {
                                                        Item.SocketTwo = (PhoenixProject.Game.Enums.Gem)(Gem.ID % 1000);
                                                        Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                        Item.Send(client);
                                                        Database.ConquerItemTable.UpdateSockets(Item);
                                                        client.Inventory.Remove(Gem, PhoenixProject.Game.Enums.ItemUse.Remove);
                                                    }
                                                }
                                                else if ((byte)Item.SocketOne == 255)
                                                {
                                                    Item.SocketOne = (PhoenixProject.Game.Enums.Gem)(Gem.ID % 1000);
                                                    Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                    Item.Send(client);
                                                    Database.ConquerItemTable.UpdateSockets(Item);
                                                    client.Inventory.Remove(Gem, PhoenixProject.Game.Enums.ItemUse.Remove);
                                                }
                                                break;
                                            }
                                    }
                                }
                                break;
                            }
                        case EmbedSocket.Remove:
                            {
                                switch (socket.Slot)
                                {
                                    case EmbedSocket.SlotOne:
                                        {
                                            if ((byte)Item.SocketOne != 0)
                                            {
                                                Item.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                if ((byte)Item.SocketTwo != 0 && (byte)Item.SocketTwo != 255)
                                                {
                                                    Item.SocketOne = Item.SocketTwo;
                                                    Item.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                }
                                                Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                                break;
                                            }
                                            break;
                                        }
                                    case EmbedSocket.SlotTwo:
                                        {
                                            if ((byte)Item.SocketTwo != 0)
                                            {
                                                Item.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                                Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                                Item.Send(client);
                                                Database.ConquerItemTable.UpdateSockets(Item);
                                            }
                                            break;
                                        }
                                }
                                break;
                            }
                    }
                }
                client.Send(socket);
            }
        }

        static void LockItem(ItemLock itemLock, Client.GameState client)
        {
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
            else if (client.Equipment.TryGetItem(itemLock.UID) != null)
            {
                item = client.Equipment.TryGetItem(itemLock.UID);
                itemLock.ID = 1;
                item.Lock = 1;
                item.Mode = Game.Enums.ItemMode.Update;
                client.Send(itemLock);
                item.Send(client);
                Database.ConquerItemTable.UpdateLock(item);
            }
        }
        static void UnlockItem(ItemLock itemLock, Client.GameState client)
        {
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemLock.UID, out item))
            {
                if (item.Lock == 1)
                {
                    item.Lock = 2;
                    item.UnlockEnd = DateTime.Now.AddDays(5);
                    item.Mode = Game.Enums.ItemMode.Update;
                    item.Send(client);
                    Database.ConquerItemTable.UpdateLock(item);
                }
                else
                    client.Send(new Message("Can't unlock an item that is in progress of unlocking.", System.Drawing.Color.FloralWhite, Message.TopLeft));
            }
        }

        static void SocketTalismanWithItem(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.IConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.dwParam, out item))
            {
                if (talisman == null)
                    return;
                if (item.ID / 1000 == talisman.ID / 1000)
                    return;
                if (item.Bound == true)
                    return;
                if (talisman.SocketTwo != PhoenixProject.Game.Enums.Gem.NoSocket)
                    return;

                ushort Points = 0;
                switch (item.ID % 10)
                {
                    case 6: Points += 5; break;
                    case 7: Points += 10; break;
                    case 8: Points += 40; break;
                    case 9: Points += 1000; break;
                }
                Points += Database.DataHolder.TalismanPlusPoints(item.Plus);

                int position = ItemPosition(item.ID);
                switch (position)
                {
                    case 0: return;
                    case 4:
                    case 5:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != PhoenixProject.Game.Enums.Gem.NoSocket)
                                Points += 160;
                            if (item.SocketTwo != PhoenixProject.Game.Enums.Gem.NoSocket)
                                Points += 800;
                        }
                        break;
                    default:
                        if (item.ID % 10 >= 8)
                        {
                            if (item.SocketOne != PhoenixProject.Game.Enums.Gem.NoSocket)
                                Points += 2000;
                            if (item.SocketTwo != PhoenixProject.Game.Enums.Gem.NoSocket)
                                Points += 6000;
                        }
                        break;
                }
                talisman.SocketProgress += Points;
                if (talisman.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 8000)
                    {
                        talisman.SocketProgress -= 8000;
                        talisman.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;

                        talisman.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                        talisman.Send(client);
                    }
                }
                if (talisman.SocketOne != PhoenixProject.Game.Enums.Gem.NoSocket)
                {
                    if (talisman.SocketProgress >= 20000)
                    {
                        talisman.SocketProgress = 0;
                        talisman.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                    }
                }
                Database.ConquerItemTable.UpdateSocketProgress(talisman);
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                talisman.Send(client);
                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
            }
        }
        static void SocketTalismanWithCPs(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.IConquerItem talisman = client.Equipment.TryGetItem(itemUsage.UID);
            if (talisman == null)
                return;

            uint price = 0;
            if (talisman.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 2048000);
                if (100 - procent < 25)
                    return;
                price = (uint)(procent * 55);
            }
            else if (talisman.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
            {
                double procent = 100 - (talisman.SocketProgress * 25600 / 5120000);
                if (100 - procent < 25)
                    return;
                price = (uint)(procent * 110);
            }
            else
                return;
            if (client.Entity.ConquerPoints >= price)
            {
                client.Entity.ConquerPoints -= price;
                if (talisman.SocketOne == PhoenixProject.Game.Enums.Gem.NoSocket)
                    talisman.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                else if (talisman.SocketTwo == PhoenixProject.Game.Enums.Gem.NoSocket)
                    talisman.SocketTwo = PhoenixProject.Game.Enums.Gem.EmptySocket;
                talisman.SocketProgress = 0;
                Database.ConquerItemTable.UpdateSockets(talisman);
                talisman.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                talisman.Send(client);
            }
        }

        static void EnchantItem(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.IConquerItem Item = null, EnchantGem = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out Item) && client.Inventory.TryGetItem(itemUsage.dwParam, out EnchantGem))
            {
                byte gemBase = (byte)(EnchantGem.ID % 1000);
                UInt32 iType = Item.ID / 1000;
                Positions pos = GetPositionFromID(Item.ID);
                if (pos == Positions.Garment)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.RightAccessory)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.LeftAccessory)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.Bottle)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.Steed)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.SteedArmor)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.SteedTalisman)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.AttackTalisman)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (pos == Positions.DefenceTalisman)
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                    return;
                }
                if (Enum.IsDefined(typeof(Game.Enums.Gem), gemBase))
                {
                    byte Enchant = 0;
                    switch (EnchantGem.ID % 10)
                    {
                        case 1:
                            {
                                Enchant = (byte)ServerBase.Kernel.Random.Next(1, 59);
                                break;
                            }
                        case 2:
                            {
                                if (EnchantGem.ID == 700012)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(100, 159);
                                else if (EnchantGem.ID == 700002 || EnchantGem.ID == 700052 || EnchantGem.ID == 700062)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(60, 109);
                                else if (EnchantGem.ID == 700032)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(80, 129);
                                else
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(40, 89);
                                break;
                            }
                        default:
                            {
                                if (EnchantGem.ID == 700013)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(200, 255);
                                else if (EnchantGem.ID == 700003 || EnchantGem.ID == 700073 || EnchantGem.ID == 700033)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(170, 229);
                                else if (EnchantGem.ID == 700063 || EnchantGem.ID == 700053)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(140, 199);
                                else if (EnchantGem.ID == 700023)
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(90, 149);
                                else
                                    Enchant = (byte)ServerBase.Kernel.Random.Next(70, 119);
                                break;
                            }
                    }
                    client.Send(ServerBase.Constants.Enchant(Item.Enchant, Enchant));
                    if (Enchant > Item.Enchant)
                    {
                        Item.Enchant = Enchant;
                        Item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                        Item.Send(client);
                        itemUsage.dwParam = 1;
                        Database.ConquerItemTable.UpdateEnchant(Item, client);
                        client.Inventory.Remove(EnchantGem, PhoenixProject.Game.Enums.ItemUse.Remove);
                    }
                    else
                    {
                        itemUsage.dwParam = 1;
                        client.Inventory.Remove(EnchantGem, PhoenixProject.Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }

        static void UseItem(Interfaces.IConquerItem item, Client.GameState client)
        {
            Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
            if (client.Booth != null)
                return;
            client.Entity.UseItem = true;
            client.SpiltStack = true;
            switch (item.ID)
            {
                #region ElitePkChampion Prize
                #region 10ExpBallPack
                case 720757:
                    {
                        if (client.Inventory.Count <= 39)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723700, 0, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;

                        //  break;
                    }
                #endregion
                #region +3StonePack
                case 729023:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730003, 3, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;


                    }
                #endregion
                #region +2StonePack
                case 729022:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730002, 2, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region +1Stone Pack
                case 723712:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(730001, 1, 5);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region 500Stuydy
                case 723342:
                    {

                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 500;
                        client.Send(ServerBase.Constants.Study);
                        break;
                    }
                #endregion
                #region Random Accseeoreis
                case 720836:
                    {
                        uint ItemID = 0;
                        uint rand = (uint)PhoenixProject.ServerBase.Kernel.Random.Next(1, 78);
                        switch (rand)
                        {
                            #region Rand Accesory
                            case 1:
                                ItemID = 350001;
                                break;
                            case 2:
                                ItemID = 350002;
                                break;
                            case 3:
                                ItemID = 350004;
                                break;
                            case 4:
                                ItemID = 350005;
                                break;
                            case 5:
                                ItemID = 350006;
                                break;
                            case 6:
                                ItemID = 350007;
                                break;
                            case 7:
                                ItemID = 350008;
                                break;
                            case 8:
                                ItemID = 350009;
                                break;
                            case 9:
                                ItemID = 350010;
                                break;
                            case 10:
                                ItemID = 350011;
                                break;
                            case 11:
                                ItemID = 350012;
                                break;
                            case 12:
                                ItemID = 350014;
                                break;
                            case 13:
                                ItemID = 350015;
                                break;
                            case 14:
                                ItemID = 350016;
                                break;
                            case 15:
                                ItemID = 350017;
                                break;
                            case 16://PalmLeafFan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory A~delicate~and~beautiful~fan~made~of~palm~leaves. 8 0 0 
                                ItemID = 350018;
                                break;
                            case 17://IronShovel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory An~iron~shovel~may~come~in~handy~in~winter,~when~you~need~to~shovel~paths~through~snow. 8 0 0 
                                ItemID = 350019;
                                break;
                            case 18:////FrozenTuna 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory It`s~a~strangely-shaped~tuna~from~Bird~Island. 8 0 0 
                                ItemID = 350020; break;
                            case 19://IceStick 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory A~strange~stick.~Maybe~you~can~play~ice~hockey~with~it. 8 0 0 
                                ItemID = 360001;
                                break;
                            case 20://Wrench 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory It`s~a~heavy~wrench.~Perhaps~you~can~use~it~to~deal~ 8 0 0 
                                ItemID = 360002; break;
                            case 21://WoodenClub 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory This~wooden~club~often~gives~off~a~sweet~odor. 8 0 0 
                                ItemID = 360003; break;
                            case 22://Umbrella 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory An~unbreakable~umbrella~is~a~stealth~weapon~that~also~keeps~you~dry. 8 0 0 
                                ItemID = 360004; break;
                            case 23:////Blowfish 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Dried~in~the~bright~sunlight~over~the~Desert,~the~blowfish~makes~a~good~weapon~for~it`s~as~hard~as~iron. 8 0 0 
                                ItemID = 360005; break;
                            case 24://FeatherDuster 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360006; break;
                            case 25://Spatula 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360007; break;
                            case 26://InvincibleFist 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360008; break;
                            case 27://FishPole 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360009; break;
                            case 28://Pan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360010; break;
                            case 29://Handbag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360011;
                                break;
                            case 30://Backpack 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360012;
                                break;
                            case 31://SportsBag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360013; break;
                            case 32://Bunny 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360014; break;
                            case 33://GoodEveningBear 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360015; break;
                            case 34://Rod 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360016;
                                break;
                            case 35://Clap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360017;
                                break;
                            case 36://HeavyHammer 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360018;
                                break;
                            case 37://LightSaber 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360019
                                     ;
                                break;
                            case 38://TennisRacket 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360020;
                                break;
                            case 39://ApeCityHam 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 360021;
                                break;
                            case 40: //Wrench 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory It`s~a~heavy~wrench. 8 0 0 
                                ItemID = 360022;
                                break;
                            case 41: //WoodenClub 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory This~wooden~club~often~gives~off~a~sweet~odor. 8 0 0 
                                ItemID = 360023;
                                break;
                            case 42://Umbrella 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory An~unbreakable~umbrella~is~a~stealth~weapon~that~also~keeps~you~dry. 8 0 0 
                                ItemID = 360024;
                                break;
                            case 43://Blowfish 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Dried~in~the~bright~sunlight~over~the~Desert,~the~Mackerel~makes~a~good~weapon~for~it`s~as~hard~as~iron. 8 0 0 
                                ItemID = 360025;
                                break;
                            case 44://FeatherDuster 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360026;
                                break;
                            case 45://Spatula 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360027;
                                break;
                            case 46://InvincibleFist 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360028;
                                break;
                            case 47://FishPole 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360029;
                                break;
                            case 48://Pan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360030;
                                break;
                            case 49://Handbag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360031;
                                break;
                            case 50://Backpack 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360032;
                                break;
                            case 51://SportsBag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360033;
                                break;
                            case 52://Bunny 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360034;
                                break;
                            case 53://GoodEveningBear 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360035;
                                break;
                            case 54://Rod 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360036;
                                break;
                            case 55://Clap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360037;
                                break;
                            case 56://HeavyHammer 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360038;
                                break;
                            case 57://LightSaber 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360039;
                                break;
                            case 58://TennisRacket 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 360040;
                                break;
                            case 59://ApeCityHam 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 370001;
                                break;
                            case 60: //WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 370002;
                                break;
                            case 61://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 370003;
                                break;
                            case 62://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 370004;
                                break;
                            case 63://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 370005;
                                break;
                            case 64://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 370011;
                                break;
                            case 65://WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 370012;
                                break;
                            case 66://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 370013;
                                break;
                            case 67://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 370014;
                                break;
                            case 68://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 370015;
                                break;
                            case 69://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 380001;
                                break;
                            case 70://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 380002;
                                break;
                            case 71://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 380003;
                                break;
                            case 72://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 380004;
                                break;
                            case 73://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 380005;
                                break;
                            case 74://Wheel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 380011;
                                break;
                            case 75://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 380012;
                                break;
                            case 76://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 380013;
                                break;
                            case 77://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 380014;
                                break;
                            case 78://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 380015;
                                break;
                            default:
                                ItemID = 380013;
                                break;
                            //Wheel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                            #endregion
                        }
                        client.Inventory.Add(ItemID, 0, 1);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region Random Refinery
                case 723693:
                    {
                        uint ItemID = 0;
                        uint rand = (uint)PhoenixProject.ServerBase.Kernel.Random.Next(1, 97);
                        switch (rand)
                        {
                            #region Rand Refinery
                            case 1:
                                ItemID = 724350;
                                break;
                            case 2:
                                ItemID = 724351;
                                break;
                            case 3:
                                ItemID = 724352;
                                break;
                            case 4:
                                ItemID = 724353;
                                break;
                            case 5:
                                ItemID = 724354;
                                break;
                            case 6:
                                ItemID = 724355;
                                break;
                            case 7:
                                ItemID = 724356;
                                break;
                            case 8:
                                ItemID = 724357;
                                break;
                            case 9:
                                ItemID = 724358;
                                break;
                            case 10:
                                ItemID = 724359;
                                break;
                            case 11:
                                ItemID = 724360;
                                break;
                            case 12:
                                ItemID = 724361;
                                break;
                            case 13:
                                ItemID = 724362;
                                break;
                            case 14:
                                ItemID = 724350;
                                break;
                            case 15:
                                ItemID = 724363;
                                break;
                            case 16://PalmLeafFan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory A~delicate~and~beautiful~fan~made~of~palm~leaves. 8 0 0 
                                ItemID = 724364;
                                break;
                            case 17://IronShovel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory An~iron~shovel~may~come~in~handy~in~winter,~when~you~need~to~shovel~paths~through~snow. 8 0 0 
                                ItemID = 724365;
                                break;
                            case 18:////FrozenTuna 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory It`s~a~strangely-shaped~tuna~from~Bird~Island. 8 0 0 
                                ItemID = 724366; break;
                            case 19://IceStick 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2-HandedAccessory A~strange~stick.~Maybe~you~can~play~ice~hockey~with~it. 8 0 0 
                                ItemID = 724367;
                                break;
                            case 20://Wrench 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory It`s~a~heavy~wrench.~Perhaps~you~can~use~it~to~deal~ 8 0 0 
                                ItemID = 724368; break;
                            case 21://WoodenClub 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory This~wooden~club~often~gives~off~a~sweet~odor. 8 0 0 
                                ItemID = 724369; break;
                            case 22://Umbrella 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory An~unbreakable~umbrella~is~a~stealth~weapon~that~also~keeps~you~dry. 8 0 0 
                                ItemID = 724370; break;
                            case 23:////Blowfish 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Dried~in~the~bright~sunlight~over~the~Desert,~the~blowfish~makes~a~good~weapon~for~it`s~as~hard~as~iron. 8 0 0 
                                ItemID = 724371; break;
                            case 24://FeatherDuster 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724372; break;
                            case 25://Spatula 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724373; break;
                            case 26://InvincibleFist 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724374; break;
                            case 27://FishPole 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724375; break;
                            case 28://Pan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724376; break;
                            case 29://Handbag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724377;
                                break;
                            case 30://Backpack 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724378;
                                break;
                            case 31://SportsBag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724379; break;
                            case 32://Bunny 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724380; break;
                            case 33://GoodEveningBear 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724381; break;
                            case 34://Rod 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724382;
                                break;
                            case 35://Clap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724383;
                                break;
                            case 36://HeavyHammer 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724384;
                                break;
                            case 37://LightSaber 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724385
                                     ;
                                break;
                            case 38://TennisRacket 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724386;
                                break;
                            case 39://ApeCityHam 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory None. 8 0 0 
                                ItemID = 724387;
                                break;
                            case 40: //Wrench 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory It`s~a~heavy~wrench. 8 0 0 
                                ItemID = 724388;
                                break;
                            case 41: //WoodenClub 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory This~wooden~club~often~gives~off~a~sweet~odor. 8 0 0 
                                ItemID = 724389;
                                break;
                            case 42://Umbrella 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory An~unbreakable~umbrella~is~a~stealth~weapon~that~also~keeps~you~dry. 8 0 0 
                                ItemID = 724390;
                                break;
                            case 43://Blowfish 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Dried~in~the~bright~sunlight~over~the~Desert,~the~Mackerel~makes~a~good~weapon~for~it`s~as~hard~as~iron. 8 0 0 
                                ItemID = 724391;
                                break;
                            case 44://FeatherDuster 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724392;
                                break;
                            case 45://Spatula 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724393;
                                break;
                            case 46://InvincibleFist 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724394;
                                break;
                            case 47://FishPole 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724395;
                                break;
                            case 48://Pan 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724396;
                                break;
                            case 49://Handbag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724397;
                                break;
                            case 50://Backpack 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724398;
                                break;
                            case 51://SportsBag 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724399;
                                break;
                            case 52://Bunny 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724400;
                                break;
                            case 53://GoodEveningBear 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724401;
                                break;
                            case 54://Rod 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724402;
                                break;
                            case 55://Clap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724403;
                                break;
                            case 56://HeavyHammer 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724404;
                                break;
                            case 57://LightSaber 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724405;
                                break;
                            case 58://TennisRacket 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724406;
                                break;
                            case 59://ApeCityHam 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1-HandedAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724407;
                                break;
                            case 60: //WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724408;
                                break;
                            case 61://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724409;
                                break;
                            case 62://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724410;
                                break;
                            case 63://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724411;
                                break;
                            case 64://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724412;
                                break;
                            case 65://WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724413;
                                break;
                            case 66://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724414;
                                break;
                            case 67://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724415;
                                break;
                            case 68://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724416;
                                break;
                            case 69://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724417;
                                break;
                            case 70://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724418;
                                break;
                            case 71://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724419;
                                break;
                            case 72://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724420;
                                break;
                            case 73://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724421;
                                break;
                            case 74://Wheel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724422;
                                break;
                            case 75://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724423;
                                break;
                            case 76://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724424;
                                break;
                            case 77://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724425;
                                break;
                            case 78://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724423;
                                break;
                            case 79: //WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724424;
                                break;
                            case 80://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724425;
                                break;
                            case 81://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724426;
                                break;
                            case 82://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724427;
                                break;
                            case 83://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory None. 8 0 0 
                                ItemID = 724428;
                                break;
                            case 84://WoodenBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724429;
                                break;
                            case 85://LoveBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724430;
                                break;
                            case 86://SeaHorse 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724431;
                                break;
                            case 87://Harp 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724432;
                                break;
                            case 88://ForceBow 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BowAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724433;
                                break;
                            case 89://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724434;
                                break;
                            case 90://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724435;
                                break;
                            case 91://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724436;
                                break;
                            case 92://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724437;
                                break;
                            case 93://Wheel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 0 0 10080 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory None. 8 0 0 
                                ItemID = 724438;
                                break;
                            case 94://Wok 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724439;
                                break;
                            case 95://TurtleShell 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724440;
                                break;
                            case 96://LoveShield 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724441;
                                break;
                            case 97://SunFlower 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                                ItemID = 724442;
                                break;
                            default:
                                ItemID = 724445;
                                break;
                            //Wheel 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65535 65535 0 0 0 0 0 0 0 0 0 1 800 2 2 1 215 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ShieldAccessory Right~click~to~equip. 8 0 0 
                            #endregion
                        }
                        client.Inventory.Add(ItemID, 0, 1);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region PkEliteFirst Pack
                case 720717:
                    {
                        if (client.Inventory.Count <= 23)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723342, 0, 5);//mondostyBook
                            client.Inventory.Add(720598, 0, 3);//dragonPill
                            client.Inventory.Add(720028, 0, 3);//dbscroll
                            client.Inventory.Add(720836, 0, 1);//accessores
                            client.Inventory.Add(723693, 0, 1);//legandRefineryPack
                            client.Inventory.Add(723744, 0, 3);//powerExpBall
                            client.Inventory.Add(723864, 0, 1);//Steed+6
                        }
                        else
                        {
                            client.Send(new Message("you must have 17 space in you inventory to take prize", Color.Green, 2005));
                        }

                        break;
                    }
                #endregion
                #region PkEliteFirst Pack2
                case 720721:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723342, 0, 3);//mondostyBook
                            client.Inventory.Add(720598, 0, 2);//dragonPill
                            client.Inventory.Add(720028, 0, 1);//dbscroll
                            client.Inventory.Add(720836, 0, 1);//accessores
                            client.Inventory.Add(723693, 0, 1);//legandRefineryPack
                            client.Inventory.Add(723744, 0, 1);//powerExpBall
                            //client.Inventory.Add(723864, 0, 1);//Steed+6
                        }
                        else
                        {
                            client.Send(new Message("you must have 10 space in you inventory to take prize", Color.Green, 2005));
                        }

                        break;
                    }
                #endregion
                #region PkEliteFirst Pack3
                case 720725:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723342, 0, 2);//mondostyBook
                            client.Inventory.Add(720598, 0, 2);//dragonPill
                            client.Inventory.Add(720028, 0, 1);//dbscroll
                            client.Inventory.Add(720836, 0, 1);//accessores
                            client.Inventory.Add(723693, 0, 1);//legandRefineryPack
                            client.Inventory.Add(723912, 0, 2);//ArenaExp
                            //client.Inventory.Add(723864, 0, 1);//Steed+6
                        }
                        else
                        {
                            client.Send(new Message("you must have 10 space in you inventory to take prize", Color.Green, 2005));
                        }

                        break;
                    }
                #endregion
                #region PkEliteFirst Pack8
                case 720729:
                    {
                        if (client.Inventory.Count <= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723342, 0, 1);//mondostyBook
                            client.Inventory.Add(720598, 0, 1);//dragonPill
                            client.Inventory.Add(720028, 0, 1);//dbscroll
                            client.Inventory.Add(720836, 0, 1);//accessores
                            client.Inventory.Add(723693, 0, 1);//legandRefineryPack
                            client.Inventory.Add(723912, 0, 1);//ArenaExp
                            //client.Inventory.Add(723864, 0, 1);//Steed+6
                        }
                        else
                        {
                            client.Send(new Message("you must have 6 space in you inventory to take prize", Color.Green, 2005));
                        }

                        break;
                    }
                #endregion
                #endregion
                #region NewItems
                case 724002://SmallLotteryTicketPack
                    {
                        client.Inventory.Add(711504, 0, 3);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region MemoryAgate
                case 720828:
                    {
                        if (ServerBase.Constants.revnomap.Contains(client.Entity.MapID))
                        {
                            client.Send(new Message("You Can't record here !", System.Drawing.Color.Tan, Message.TopLeft));
                            return;
                        }
                        else
                        {
                            item.SendAgate(client);
                        }

                        break;
                    }
                #endregion
                #region Medicine
                case 1000000:
                case 1000010:
                case 1000020:
                case 1000030:
                case 1002000:
                case 1002010:
                case 1002020:
                case 1002050:
                case 1000040:
                case 725065:
                    {
                        //Console.WriteLine("ss");
                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.Hitpoints == client.Entity.MaxHitpoints)
                        {
                            // Console.WriteLine("ss2");
                            return;
                        }
                        //Console.WriteLine("ss3");
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = Math.Min(client.Entity.Hitpoints + infos.BaseInformation.ItemHP, client.Entity.MaxHitpoints);
                        break;
                    }
                case 1001000:
                case 1001010:
                case 1001020:
                case 1001030:
                case 1001040:
                case 1002030:
                case 1002040:
                case 725066:
                    {
                        if (client.Entity.NoDrugsTime > 0)
                        {
                            if (Time32.Now > client.Entity.NoDrugsStamp.AddSeconds(client.Entity.NoDrugsTime))
                            {
                                client.Entity.NoDrugsTime = 0;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (client.Entity.Mana == client.Entity.MaxMana)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Mana = (ushort)Math.Min(client.Entity.Mana + infos.BaseInformation.ItemMP, client.Entity.MaxMana);
                        break;
                    }
                #endregion

                #region Gates
                case 0xafc95:
                case 0xafc96:
                case 0xafc97:
                case 0xafc98:
                    {
                        if (client.Guild != null)
                        {
                            ushort num2 = (ushort)(((item.ID % 100) + 0x7c) * 10);
                            NpcInitial initial = new NpcInitial
                            {
                                Identifier = 1,
                                Lookface = 3,
                                Mode = PhoenixProject.Network.GamePackets.NpcInitial.NpcModes.Place,
                                Furniture = num2
                            };
                            client.Send((byte[])initial);
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                        }
                        break;
                    }
                case 1060020:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1002, 429, 378);
                        break;
                    }
                case 1060021:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1000, 500, 650);
                        break;
                    }
                case 1060022:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1020, 565, 562);
                        break;
                    }
                case 1060023:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1011, 188, 264);
                        break;
                    }
                case 1060024:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1015, 717, 571);
                        break;
                    }
                case 1060039:
                    {
                        if (client.Entity.MapID == 601) return;
                        if (client.Map.BaseID == 6000 || client.Map.BaseID == 6001 || client.Map.BaseID == 1844 || client.Map.BaseID == 1801 || client.Map.BaseID == 8883 || client.Map.BaseID == 1005 && client.Entity.MapID != 1005 || client.Map.BaseID == 700 && client.Entity.MapID != 701)
                        {
                            client.Send(ServerBase.Constants.JailItemUnusable);
                            return;
                        }
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Teleport(1217, 535, 558);
                        break;
                    }
                #endregion
                #region Dyes
                case 723584:
                    {
                        if (client.Equipment.TryGetItem(3) == null)
                            return;
                        if (client.Equipment.TryGetItem(3).ID == 0)
                            return;
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Equipment.TryGetItem(3).Color = Game.Enums.Color.Black;
                        PhoenixProject.Database.ConquerItemTable.UpdateColor(client.Equipment.TryGetItem(3));
                        client.Equipment.TryGetItem(3).Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                        client.Equipment.TryGetItem(3).Send(client);
                        client.Equipment.UpdateEntityPacket();
                        break;
                    }
                case 1060030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 3;
                        break;
                    }
                case 1060040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 9;
                        break;
                    }
                case 1060050:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 8;
                        break;
                    }
                case 1060060:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 7;
                        break;
                    }
                case 1060070:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 6;
                        break;
                    }
                case 1060080:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 5;
                        break;
                    }
                case 1060090:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.HairColor = 4;
                        break;
                    }
                #endregion
                #region Misc
                #region ChiPoints Items By MR.Wallid
                #region ChiPill(100)
                case 729476:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                        client.Entity.ChiPoints += 100;
                        {
                            client.Send(new Message("Congratulations you've received 100 Chi Points.", Color.Red, Message.TopLeft));
                        }
                        break;
                    }
                #endregion
                #region ChiPill(200)
                case 729477:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                        client.Entity.ChiPoints += 200;
                        {
                            client.Send(new Message("Congratulations you've received 200 Chi Points.", Color.Red, Message.TopLeft));
                        }
                        break;
                    }
                #endregion
                #region ChiPill(300)
                case 729478:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                        client.Entity.ChiPoints += 300;
                        {
                            client.Send(new Message("Congratulations you've received 300 Chi Points.", Color.Red, Message.TopLeft));
                        }
                        break;
                    }
                #endregion
                #region ChiPill(400)
                case 729479:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                        client.Entity.ChiPoints += 400;
                        {
                            client.Send(new Message("Congratulations you've received 400 Chi Points.", Color.Red, Message.TopLeft));
                        }
                        break;
                    }
                #endregion
                #region VitalPill
                case 729481:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Delete);
                        client.Entity.ChiPoints += 500;
                        {
                            client.Send(new Message("Congratulations you've received 500 Chi Points.", Color.Red, Message.TopLeft));
                        }
                        break;
                    }
                #endregion
                #endregion
                #region Surprise-Box
                case 722178:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            //client.Inventory.Add(722057, 0, 1);//PowerEXPBall
                            client.Entity.ConquerPoints += 2000;
                        }
                        else
                        {
                            client.Send(new Message("You Must have 1 space in you Inventory To Open You Box", Color.White, 255));
                        }
                        break;
                    }
                #endregion
                #region SteedPacks
                case 723855:
                case 728525:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723856:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723859:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 1;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723860:
                case 728526:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723861:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723862:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 3;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723863:
                case 728527:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723864:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723865:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 6;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723900:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 << 8 | 255 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723901:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 150 | 255 << 8;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                case 723902:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        Interfaces.IConquerItem _item = new ConquerItem(true);
                        _item.ID = 300000;
                        Database.ConquerItemInformation _iteminfos = new Database.ConquerItemInformation(_item.ID, 0);
                        _item.Durability = _item.MaximDurability = _iteminfos.BaseInformation.Durability;
                        _item.Plus = 0;
                        _item.Effect = Game.Enums.ItemEffect.Horse;
                        _item.SocketProgress = 255 | 150 << 16;
                        client.Inventory.Add(_item, Game.Enums.ItemUse.CreateAndAdd);
                        break;
                    }
                #endregion
                #region LifeFruitBasket
                case 723725:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(723726, 0, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region 7StarPouch
                case 725067:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725065, 0, 5);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SerenityPouch
                case 725068:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(725066, 0, 5);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region SpeedArrowPack
                case 727000:
                    {
                        if (client.Inventory.Count <= 35)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1050002, 0, 1);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region LifeFruit
                case 723726:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                        client.Entity.Mana = client.Entity.MaxMana;
                        break;
                    }
                #endregion
                #region Amrita Box
                case 720010:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1000030, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Panacea Box
                case 720011:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002000, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Ginseng Box
                case 720012:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002010, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Vanilla Box
                case 720013:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002020, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RecoveryPill Box
                case 720014:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001030, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion RecoveryPill
                #region SoulPill Box
                case 720015:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1001040, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region RefreshingPill Box
                case 720016:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002030, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ChantPill Box
                case 720017:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002040, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region Mil.Ginseng Box
                case 721330:
                    {
                        if (client.Inventory.Count <= 38)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1002050, 0, 3);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region ExpBall
                case 723700:
                    {
                        if (client.ExpBalls < 10)
                        {
                            if (client.Entity.Level < 137)
                            {
                                client.IncreaseExperience(client.ExpBall, false);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                client.ExpBalls++;
                            }
                        }
                        else
                            client.Send(ServerBase.Constants.ExpBallsUsed);
                        break;
                    }
                #endregion
                #region MeteorTearScroll
                case 723711:
                    {
                        if (client.Inventory.Count <= 36)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088002, 0, 5);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion

                #region Class1MoneyBag
                case 723713:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000;
                        break;
                    }
                #endregion
                #region Class2MoneyBag
                case 723714:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 800000;
                        break;
                    }
                #endregion
                #region Class3MoneyBag
                case 723715:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1200000;
                        break;
                    }
                #endregion
                #region Class4MoneyBag
                case 723716:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 1800000;
                        break;
                    }
                #endregion
                #region Class5MoneyBag
                case 723717:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 5000000;
                        break;
                    }
                #endregion
                #region Class6MoneyBag
                case 723718:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 20000000;
                        break;
                    }
                #endregion
                #region Class7MoneyBag
                case 723719:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 25000000;
                        break;
                    }
                #endregion
                #region Class8MoneyBag
                case 723720:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 80000000;
                        break;
                    }
                #endregion
                #region Class9MoneyBag
                case 723721:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 100000000;
                        break;
                    }
                #endregion
                #region Class10MoneyBag
                case 723722:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 300000000;
                        break;
                    }
                #endregion
                #region BeginnerPackL1
                case 723753:
                    {
                        if (client.Entity.Level >= 1)
                        {
                            if (client.Inventory.Count < 33)
                            {
                                client.Entity.Money += 500;
                                client.Entity.ConquerPoints += 10;
                                client.Inventory.Add(1000000, 0, 3);
                                client.Inventory.Add(1001000, 0, 3);
                                client.Inventory.Add(723755, 0, 1);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 7 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 1", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region BeginnerPackL10
                case 723755:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 26)
                            {
                                client.Inventory.Add(723700, 0, 10);//ExpBall
                                client.Inventory.Add(723017, 0, 3); //ExpPotion
                                client.Inventory.Add(723767, 0, 1);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 14 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region BeginnerPackL70
                case 723767:
                    {
                        if (client.Entity.Level >= 70)
                        {
                            if (client.Inventory.Count < 36)
                            {
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                client.Entity.ConquerPoints += 20;
                                client.Inventory.Add(1080001, 0, 1); //Emerald
                                client.Inventory.Add(723772, 0, 1);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 7 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 70", System.Drawing.Color.Red, Message.TopLeft));

                        break;
                    }
                #endregion
                #region BeginnerPackL100
                case 723772:
                    {
                        if (client.Entity.Level >= 100)
                        {
                            if (client.Inventory.Count < 28)
                            {
                                client.Inventory.Add(723774, 0, 1);
                                client.Inventory.Add(723017, 0, 10); //ExpPotion
                                if (client.Entity.Class <= 15)
                                    client.Inventory.Add(800010, 0, 1); //Trojan
                                else if (client.Entity.Class <= 25)
                                    client.Inventory.Add(800410, 0, 1); //Warrior
                                else if (client.Entity.Class <= 45)
                                    client.Inventory.Add(800610, 0, 1); //Archer
                                else if (client.Entity.Class <= 55)
                                    client.Inventory.Add(800010, 0, 1); //Ninja
                                else if (client.Entity.Class <= 65)
                                    client.Inventory.Add(800010, 0, 1); //Monk
                                else //Taoist
                                    client.Inventory.Add(800508, 0, 1);

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);


                            }
                            else
                                client.Send(new Message("You need to make atleast 12 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 100", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                #region BeginnerPackL110
                case 723774:
                    {
                        if (client.Entity.Level >= 110)
                        {
                            if (client.Inventory.Count < 27)
                            {
                                client.Inventory.Add(723776, 0, 1);
                                client.Inventory.Add(721090, 0, 1);//MoonBox
                                client.Inventory.Add(723017, 0, 10); //ExpPotion
                                if (client.Entity.Class <= 15)
                                    CheckCommand(new Message("@item MythicBlade Super 0 0 0 13 0", System.Drawing.Color.Red, 2001), client);
                                else if (client.Entity.Class <= 25)
                                    CheckCommand(new Message("@item DragonWand Super 0 0 0 13 0", System.Drawing.Color.Red, 2001), client);
                                else if (client.Entity.Class <= 45)
                                    CheckCommand(new Message("@item AncientBow Super 0 0 0 13 0", System.Drawing.Color.Red, 2001), client);
                                else if (client.Entity.Class <= 55)
                                    CheckCommand(new Message("@item FlameKatana Super 0 0 0 13 0", System.Drawing.Color.Red, 2001), client);
                                else if (client.Entity.Class <= 65)
                                    CheckCommand(new Message("@item BeadsOfConsciousness Super 0 0 0 13 0", System.Drawing.Color.Red, 2001), client);
                                else
                                    CheckCommand(new Message("@item ThunBacksword Super 0 0 0 3 0", System.Drawing.Color.Red, 2001), client);
                                client.Entity.ConquerPoints += 30;
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 13 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 110", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                #region BeginnerPackL120
                case 723776:
                    {
                        if (client.Entity.Level >= 120)
                        {
                            if (client.Inventory.Count < 35)
                            {
                                client.Inventory.Add(1088001, 0, 5); //DragonBall
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 5 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 120", System.Drawing.Color.Red, Message.TopLeft));
                        break;
                    }
                #endregion
                //723755, 723768, 723772  ,723774, 723776





                #region PowerEXPBall
                case 722057:
                    {
                        if (client.ExpBalls < 30)
                        {
                            if (client.Entity.Level < 140)
                            {
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.IncreaseExperience(client.ExpBall, false);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                client.ExpBalls++;
                            }
                        }
                        else
                            client.Send(ServerBase.Constants.ExpBallsUsed);
                        break;
                    }
                #endregion
                #region P6SoulPack
                case 729994:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 31)
                            {
                                client.Inventory.Add(821031, 0, 1);//+8
                                client.Inventory.Add(820072, 0, 1); //+6
                                client.Inventory.Add(823055, 0, 1); //+6
                                client.Inventory.Add(822053, 0, 1); //+6
                                client.Inventory.Add(824017, 0, 1); //+6
                                client.Inventory.Add(722057, 0, 3); //+6

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 9 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region P6WeaponPack
                case 729993:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 29)
                            {
                                client.Inventory.Add(800000, 0, 2);//blade
                                client.Inventory.Add(800017, 0, 2); //katana
                                client.Inventory.Add(800110, 0, 2); //grim
                                client.Inventory.Add(800722, 0, 2); //holy
                                client.Inventory.Add(800513, 0, 1); //back
                                client.Inventory.Add(800804, 0, 1); //pistol
                                client.Inventory.Add(800809, 0, 1); //repiar

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 11 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperVioletGemPack
                case 727068:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700053, 0, 10);//volite

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperDragonGemPack
                case 727100:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700013, 0, 10);//dragon

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperMoonGemPack
                case 727069:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700063, 0, 10);//moon

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperKylinGemPack
                case 727062:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700043, 0, 10);//kylin

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperRainbowGemPack
                case 727063:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700033, 0, 10);//Rb

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperFuryGemPack
                case 727064:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700023, 0, 10);//Fu

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperPhoenixGemPack
                case 727066:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700003, 0, 10);//Fu

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTortoiseGemPack
                case 727067:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 30)
                            {
                                client.Inventory.Add(700073, 0, 10);//Fu

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 10 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperGloryGemPack
                case 727060:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 35)
                            {
                                client.Inventory.Add(700123, 0, 5);//Fu

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 5 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperThunderGemPack
                case 727061:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 35)
                            {
                                client.Inventory.Add(700103, 0, 5);//Fu

                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 5 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region TopMoneyBag
                case 723723:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += 500000000;
                        break;
                    }
                #endregion
                #region DrasgonBallScroll
                case 720028:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088000, 0, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region DiligenceBook
                case 723340:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 5;
                        client.Inventory.Add(723903, 0, 10);
                        client.Send(new Message("Congratulations you got 5 study Points keep going", System.Drawing.Color.Red, Message.study));
                    }
                    break;
                #endregion
                #region StudyBook[Arena/Race]
                case 720774:
                case 720775:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.SubClasses.StudyPoints += 50;
                        client.Send(new Message("Congratulations you got 50 study Points keep going", System.Drawing.Color.Red, Message.study));
                    }
                    break;
                #endregion
                #region MeteorScroll
                case 720027:
                    {
                        if (client.Inventory.Count <= 31)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.Inventory.Add(1088001, 0, 10);
                        }
                        else
                            client.Send(ServerBase.Constants.FullInventory);
                        break;
                    }
                #endregion
                #region DoubleExperiencePotion
                case 723017:
                    {
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        client.Entity.DoubleExperienceTime = 3600;
                        SyncPacket packet = new SyncPacket
                        {
                            Identifier = client.Entity.UID,
                            Type = PhoenixProject.Network.GamePackets.SyncPacket.SyncType.DoubleExpTimer,
                            Duration = 3600,
                            Multiple = 1 * 100
                        };
                        client.Send((byte[])packet);
                        break;
                    }
                #endregion
                #region DoubleExperiencePotion
                case 728201:
                    {
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        client.Entity.DoubleExperienceTime = 7200;
                        SyncPacket packet = new SyncPacket
                        {
                            Identifier = client.Entity.UID,
                            Type = PhoenixProject.Network.GamePackets.SyncPacket.SyncType.DoubleExpTimer,
                            Duration = 7200,
                            Multiple = 1 * 200
                        };
                        client.Send((byte[])packet);
                        break;
                    }
                #endregion
                #region NinjaAmulet
                case 723583:
                    {
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        switch (client.Entity.Body % 10)
                        {
                            case 2:
                            case 4:
                                client.Entity.Body--;
                                break;
                            case 1:
                            case 3:
                                client.Entity.Body++;
                                break;
                        }
                        break;
                    }
                #endregion
                #region PrayingStone(S)
                case 1200000:
                    {
                        uint value = (uint)(3 * 24 * 60 * 60);
                        client.AddBless(value);
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(M)
                case 1200001:
                    {
                        uint value = (uint)(7 * 24 * 60 * 60);
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PrayingStone(L)
                case 1200002:
                    {
                        uint value = (uint)(30 * 24 * 60 * 60);
                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                        client.AddBless(value);
                        client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
                        break;
                    }
                #endregion
                #region PenitenceAmulet
                case 723727:
                case 720128:
                    {
                        if (client.Entity.PKPoints >= 30)
                        {
                            client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            client.Entity.PKPoints -= 30;
                        }
                        break;
                    }
                #endregion
                #region DisguiseAmulet
                case 723724:
                    {
                        int disguise = ServerBase.Kernel.Random.Next(Database.DataHolder.Disguises.Length);
                        ushort selected = Database.DataHolder.Disguises[disguise];

                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);

                        bool wasTransformated = client.Entity.Transformed;
                        if (wasTransformated)
                        {
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            client.Entity.TransformationID = 0;
                            client.Entity.TransformationStamp = Time32.Now;
                        }
                        ushort transformation = selected;
                        client.Entity.TransformationID = transformation;
                        client.Entity.TransformationStamp = Time32.Now;
                        client.Entity.TransformationTime = 110;
                        SpellUse spellUse = new SpellUse(true);
                        spellUse.Attacker = client.Entity.UID;
                        spellUse.SpellID = 1360;
                        spellUse.SpellLevel = 4;
                        spellUse.X = client.Entity.X;
                        spellUse.Y = client.Entity.Y;
                        spellUse.Targets.Add(client.Entity.UID, (uint)0);
                        client.Send(spellUse);
                        client.Entity.TransformationMaxHP = 3000;
                        double maxHP = client.Entity.MaxHitpoints;
                        double HP = client.Entity.Hitpoints;
                        double point = HP / maxHP;

                        client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                        client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                        break;

                    }
                #endregion
                #region Chi 10
                case 729252:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ChiPoints += 10;
                        break;
                    }
                #endregion
                #region Chi 500
                case 729242:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.ChiPoints += 500;
                        break;
                    }
                #endregion
                #region +8StonePack
                case 721222:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(730008, 8, 1);//+8
                                client.Inventory.Add(730006, 6, 1); //+6
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region ToughDrillPack
                case 721223:
                    {
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 38)
                            {
                                client.Inventory.Add(1200005, 0, 1);//ToughDrill
                                client.Inventory.Add(730003, 3, 1); //+3
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 2 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperWarrior`sArmorPack
                case 721224:
                    {
                        uint itemid = 131069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperWarrior`sHelmetPack
                case 721225:
                    {
                        uint itemid = 111069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sArmorPack
                case 721226:
                    {
                        uint itemid = 130069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTrojan`sCoronetPack
                case 721227:
                    {
                        uint itemid = 118069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNinja`sVestPack
                case 721228:
                    {
                        uint itemid = 135069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNinja`sVeilPack
                case 721229:
                    {
                        uint itemid = 112069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sRobePack
                case 721230:
                    {
                        uint itemid = 134069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sCapPack
                case 721231:
                    {
                        uint itemid = 114069;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sCoatPack
                case 721232:
                    {
                        uint itemid = 133049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperArcher`sHatPack
                case 721233:
                    {
                        uint itemid = 113049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperNecklacePack
                case 721234:
                    {
                        uint itemid = 120129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperRingPack
                case 721235:
                    {
                        uint itemid = 150139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBagPack
                case 721236:
                    {
                        uint itemid = 121129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperTaoist`sBraceletPack
                case 721237:
                    {
                        uint itemid = 152149;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBootsPack
                case 721238:
                    {
                        uint itemid = 160139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBladePack
                case 721239:
                    {
                        uint itemid = 410139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperSwordPack
                case 721240:
                    {
                        uint itemid = 420139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperClubPack
                case 721241:
                    {
                        uint itemid = 480139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperShieldPack
                case 721242:
                    {
                        uint itemid = 900049;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperKatanaPack
                case 721243:
                    {
                        uint itemid = 601139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBackswordPack
                case 721244:
                    {
                        uint itemid = 421139;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #region SuperBowPack
                case 721245:
                    {
                        uint itemid = 500129;
                        if (client.Entity.Level >= 10)
                        {
                            if (client.Inventory.Count < 32)
                            {
                                client.Inventory.Add(1200000, 0, 1);//PrayingStone
                                client.Inventory.Add(723700, 0, 1);//ExpBall
                                client.Inventory.Add(723017, 0, 5); //ExpPotion
                                ConquerItem items = new ConquerItem(true);
                                items.ID = itemid;
                                items.Color = PhoenixProject.Game.Enums.Color.White;
                                items.Plus = 5;
                                items.SocketOne = PhoenixProject.Game.Enums.Gem.EmptySocket;
                                items.Durability = items.MaximDurability = PhoenixProject.Database.ConquerItemInformation.BaseInformations[itemid].Durability;
                                client.Inventory.Add(items, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                            }
                            else
                                client.Send(new Message("You need to make atleast 8 free spots in your inventory.", System.Drawing.Color.Red, Message.TopLeft));
                        }
                        else
                            client.Send(new Message("You must be atleast level 10 to open the Pack", System.Drawing.Color.Red, Message.TopLeft));


                        break;
                    }
                #endregion
                #endregion
                #region SkillBooks
                case 725000:
                    {
                        if (client.Entity.Spirit >= 20)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1000 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 20 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725001:
                    {
                        if (client.Entity.Spirit >= 80)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1001 });
                        }
                        else
                        {
                            client.Send(new Message("You need atleast 80 spirit!", System.Drawing.Color.Tan, Message.TopLeft));
                        }
                        break;
                    }
                case 725002:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 90)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1002 });
                        }
                        break;
                    }
                case 725003:
                    {
                        if (client.Entity.Spirit >= 30)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1005 });
                        }
                        break;
                    }
                case 725004:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 15 || client.Entity.Class == 100 || client.Entity.Class == 101)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1010 });
                        }
                        break;
                    }
                case 725005:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey((ushort)Database.SpellTable.SpellInformations[1045][0].WeaponSubtype))
                                if (client.Proficiencies[(ushort)Database.SpellTable.SpellInformations[1045][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 1045 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at blade proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 721158:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey((ushort)Database.SpellTable.SpellInformations[11005][0].WeaponSubtype))
                                if (client.Proficiencies[(ushort)Database.SpellTable.SpellInformations[11005][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 11005 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at Spear proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 721157:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey((ushort)Database.SpellTable.SpellInformations[11000][0].WeaponSubtype))
                                if (client.Proficiencies[(ushort)Database.SpellTable.SpellInformations[11000][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 11000 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at Wand proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 725010:
                    {
                        if (client.Entity.Level >= 40)
                        {
                            if (client.Proficiencies.ContainsKey((ushort)Database.SpellTable.SpellInformations[1046][0].WeaponSubtype))
                                if (client.Proficiencies[(ushort)Database.SpellTable.SpellInformations[1046][0].WeaponSubtype].Level >= 5)
                                {
                                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                    client.AddSpell(new Spell(true) { ID = 1046 });
                                }
                                else
                                {
                                    client.Send(new Message("You need level 5 at sword proficiency!", System.Drawing.Color.Tan, Message.TopLeft));
                                }
                        }
                        break;
                    }
                case 725011:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1250 });
                        break;
                    }
                case 725012:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1260 });
                        break;
                    }
                case 725013:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1290 });
                        break;
                    }
                case 725014:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1300 });
                        break;
                    }
                case 725015:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1350 });
                        }
                        break;
                    }
                case 725016:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1360 });
                        break;
                    }
                case 725018:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1380 });
                        break;
                    }
                case 725019:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1385 });
                        break;
                    }
                case 725020:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1390 });
                        break;
                    }
                case 725021:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1395 });
                        break;
                    }
                case 725022:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1400 });
                        break;
                    }
                case 725023:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1405 });
                        break;
                    }
                case 725024:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1410 });
                        break;
                    }
                case 725025:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 1320 });
                        break;
                    }
                case 725026:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5010 });
                        break;
                    }
                case 725027:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5020 });
                        break;
                    }
                case 725028:
                    {
                        if (client.Entity.Class >= 130 && client.Entity.Class <= 135 || client.Entity.Class >= 140 && client.Entity.Class <= 145)
                            client.AddSpell(new Spell(true) { ID = 5001 });
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                case 725029:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5030 });
                        break;
                    }
                case 725030:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5040 });
                        break;
                    }
                case 725031:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 5050 });
                        break;
                    }
                case 725040:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7000 });
                        break;
                    }
                case 725041:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7010 });
                        break;
                    }
                case 725042:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7020 });
                        break;
                    }
                case 725043:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7030 });
                        break;
                    }
                case 725044:
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.AddSpell(new Spell(true) { ID = 7040 });
                        break;
                    }
                case 1060100:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 82)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1160 });
                        }
                        break;
                    }
                case 1060101:
                    {
                        if (client.Entity.Class >= 140 && client.Entity.Class <= 145 && client.Entity.Level >= 84)
                        {
                            client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            client.AddSpell(new Spell(true) { ID = 1165 });
                        }
                        break;
                    }
                #endregion
                #region Refinery Packs
                case 723130:
                case 723131:
                case 723132:
                case 723133:
                case 723134:
                case 723135:
                case 723651:
                case 723652:
                case 723653:
                case 723654:
                case 723655:
                case 723656:
                case 723657:
                case 723658:
                case 723659:
                case 723660:
                case 723661:
                case 723662:
                case 723663:
                case 723664:
                case 723665:
                case 723666:
                case 723667:
                case 723668:
                case 723669:
                case 723670:
                case 723671:
                case 723672:
                case 723673:
                case 723674:
                case 723675:
                case 723676:
                case 723677:
                case 723678:
                case 723679:
                case 723680:
                case 723681:
                case 723682:
                case 723683:
                case 723684:
                case 723685:
                case 723686:
                case 723690:
                case 723691:
                case 723692:
                case 724130:
                case 724131:
                case 724132:
                case 724133:
                case 724134:
                case 724135:
                case 724136:
                case 724137:
                case 724138:
                case 724139:
                case 724140:
                case 724141:
                case 724142:
                case 724143:
                case 724144:
                case 724145:
                case 724146:
                case 724147:
                case 724148:
                case 724149:
                case 724150:
                case 724151:
                case 724152:
                case 724153:
                case 724154:
                case 724155:
                case 724156:
                case 724157:
                case 724158:
                case 724159:
                case 724160:
                case 724161:
                case 724162:
                case 724163:
                case 724164:
                case 724165:
                case 724166:
                case 724167:
                case 724168:
                case 724169:
                case 724170:
                case 724171:
                case 724172:
                case 724173:
                case 724174:
                case 724175:
                case 724176:
                case 724177:
                case 724178:
                case 724179:
                case 724180:
                case 724181:
                case 724182:
                case 724183:
                case 724184:
                case 724185:
                case 724186:
                case 724190:
                case 724191:
                case 724192:
                case 724193:
                case 724194:
                case 724195:
                case 724196:
                case 724197:
                case 724198:
                case 724199:
                case 724200:
                case 724201:
                case 724202:
                case 724203:
                case 724204:
                case 724205:
                case 724207:
                case 724208:
                case 724210:
                case 724211:
                case 724212:
                case 724215:
                case 725055:
                case 725056:
                case 725057:
                case 725058:
                case 725160:
                case 725161:
                case 725162:
                case 725163:
                case 725164:
                case 725165:
                case 725166:
                case 725167:
                case 725168:
                case 725169:
                case 725170:
                case 725171: GainRefineryItem(item, client); break;
                #endregion
                #region FireWorks
                case 720030://firework
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        _String str = new _String(true);
                        str.UID = client.Entity.UID;
                        str.TextsCount = 1;
                        str.Type = _String.Effect;
                        str.Texts.Add("zf2-e290");
                        client.SendScreen(str, true);
                        break;
                    }
                case 720031://EndlessLove
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        _String str = new _String(true);
                        str.UID = client.Entity.UID;
                        str.TextsCount = 1;
                        str.Type = _String.Effect;
                        str.Texts.Add("zf2-e355");
                        client.SendScreen(str, true);
                        break;
                    }
                case 720032://MyWish
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        _String str = new _String(true);
                        str.UID = client.Entity.UID;
                        str.TextsCount = 1;
                        str.Type = _String.Effect;
                        str.Texts.Add("zf2-e240");
                        client.SendScreen(str, true);
                        break;
                    }
                #endregion
                #region Demon Boxs
                #region 10cps
                case 720650:
                    {
                        Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                        // monster.Boss = true;
                        monster.Hitpoints = 33;
                        monster.Level = 10;
                        monster.Mesh = 368;
                        monster.Name = "Demon";
                        monster.MaxAttack = 100;
                        monster.AttackRange = 5;
                        monster.AttackType = 2;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 2;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 100;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "Demon";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 100;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                        entity.UID = (uint)ServerBase.Kernel.Random.Next(500000, 500050);
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                        stringPacket.UID = monster.ID;
                        stringPacket.Type = Network.GamePackets._String.Effect;
                        stringPacket.Texts.Add("MBStandard");
                        client.Map.RemoveEntity(entity);
                        client.Map.AddEntity(entity);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 50cps
                case 720651:
                    {
                        Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                        // monster.Boss = true;
                        monster.Hitpoints = 33;
                        monster.Level = 20;
                        monster.Mesh = 369;
                        monster.Name = "AncientDemon";
                        monster.MaxAttack = 100;
                        monster.AttackRange = 5;
                        monster.AttackType = 2;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 2;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 100;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "AncientDemon";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 100;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                        entity.UID = (uint)ServerBase.Kernel.Random.Next(500060, 500110);
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        client.Map.RemoveEntity(entity);
                        Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                        stringPacket.UID = monster.ID;
                        stringPacket.Type = Network.GamePackets._String.Effect;
                        stringPacket.Texts.Add("MBStandard");
                        client.Map.AddEntity(entity);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 100cps
                case 720652:
                    {
                        Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                        // monster.Boss = true;
                        monster.Hitpoints = 33;
                        monster.Level = 30;
                        monster.Mesh = 377;
                        monster.Name = "FloodDemon";
                        monster.MaxAttack = 100;
                        monster.AttackRange = 5;
                        monster.AttackType = 2;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 2;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 100;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "FloodDemon";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 100;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                        entity.UID = (uint)ServerBase.Kernel.Random.Next(500120, 500160);
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        client.Map.RemoveEntity(entity);
                        Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                        stringPacket.UID = monster.ID;
                        stringPacket.Type = Network.GamePackets._String.Effect;
                        stringPacket.Texts.Add("MBStandard");
                        client.Map.AddEntity(entity);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 500cps
                case 720671:
                    {
                        Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                        // monster.Boss = true;
                        monster.Hitpoints = 33;
                        monster.Level = 40;
                        monster.Mesh = 400;
                        monster.Name = "HeavenDemon";
                        monster.MaxAttack = 100;
                        monster.AttackRange = 5;
                        monster.AttackType = 2;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 2;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 100;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "HeavenDemon";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 100;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                        entity.UID = (uint)ServerBase.Kernel.Random.Next(500200, 500250);
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        client.Map.RemoveEntity(entity);
                        Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                        stringPacket.UID = monster.ID;
                        stringPacket.Type = Network.GamePackets._String.Effect;
                        stringPacket.Texts.Add("MBStandard");
                        client.Map.AddEntity(entity);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region 1000cps
                case 720672:
                    {
                        Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                        // monster.Boss = true;
                        monster.Hitpoints = 33;
                        monster.Level = 50;
                        monster.Mesh = 404;
                        monster.Name = "ChaosDemon";
                        monster.MaxAttack = 100;
                        monster.AttackRange = 5;
                        monster.AttackType = 2;
                        monster.AttackSpeed = 1000;
                        monster.ViewRange = 2;
                        monster.MoveSpeed = 500;
                        monster.RunSpeed = 500;
                        monster.MinAttack = 100;
                        Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                        entity.MapObjType = Game.MapObjectType.Monster;
                        entity.MonsterInfo = monster;
                        entity.MonsterInfo.Owner = entity;
                        entity.Name = "ChaosDemon";
                        entity.MinAttack = monster.MinAttack;
                        entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                        entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                        entity.Body = monster.Mesh;
                        entity.Level = monster.Level;
                        entity.Defence = 100;
                        entity.X = client.Entity.X;
                        entity.Y = client.Entity.Y;
                        entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                        entity.UID = (uint)ServerBase.Kernel.Random.Next(500300, 500350);
                        entity.MapID = client.Entity.MapID;
                        entity.SendUpdates = true;
                        client.Map.RemoveEntity(entity);
                        Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                        stringPacket.UID = monster.ID;
                        stringPacket.Type = Network.GamePackets._String.Effect;
                        stringPacket.Texts.Add("MBStandard");
                        client.Map.AddEntity(entity);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        break;
                    }
                #endregion
                #region SwordsMaster
                case 720842:
                    {
                        if (client.Entity.UID == client.Entity.MapID)
                        {
                            if (client.Entity.Quest == 0)
                            {
                                Database.MonsterInformation monster = new PhoenixProject.Database.MonsterInformation();
                                // monster.Boss = true;
                                monster.Hitpoints = 15000000;
                                monster.Level = 140;
                                monster.Mesh = 953;
                                monster.Name = "SwordMaster";
                                monster.MaxAttack = 100;
                                monster.AttackRange = 5;
                                monster.AttackType = 2;
                                monster.SpellID = 9966;
                                monster.AttackSpeed = 5000;
                                monster.ViewRange = 2;
                                monster.MoveSpeed = 500;
                                monster.RunSpeed = 500;
                                monster.MinAttack = 100;
                                Game.Entity entity = new Game.Entity(Game.EntityFlag.Monster, false);
                                entity.MapObjType = Game.MapObjectType.Monster;
                                entity.MonsterInfo = monster;
                                entity.MonsterInfo.Owner = entity;
                                entity.Name = "SwordMaster";
                                entity.MinAttack = monster.MinAttack;
                                entity.MaxAttack = entity.MagicAttack = monster.MaxAttack;
                                entity.Hitpoints = entity.MaxHitpoints = monster.Hitpoints;
                                entity.Body = monster.Mesh;
                                entity.Level = monster.Level;
                                entity.Defence = 10000;
                                entity.X = client.Entity.X;
                                entity.Y = client.Entity.Y;
                                entity.EntityFlag = PhoenixProject.Game.EntityFlag.Monster;
                                entity.UID = (uint)ServerBase.Kernel.Random.Next(600300, 690350);
                                entity.MapID = client.Entity.MapID;
                                entity.SendUpdates = true;
                                client.Map.RemoveEntity(entity);
                                Network.GamePackets._String stringPacket = new PhoenixProject.Network.GamePackets._String(true);
                                stringPacket.UID = monster.ID;
                                stringPacket.Type = Network.GamePackets._String.Effect;
                                stringPacket.Texts.Add("MBStandard");
                                client.Map.AddEntity(entity);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                                client.Entity.Quest = 1;
                            }
                            else
                            {
                                client.Send(ServerBase.Constants.Swords2);
                            }
                        }
                        else
                        {
                            client.Send(ServerBase.Constants.Swords1);
                        }
                        break;
                    }
                #endregion
                #endregion
                /*#region House 
                case 721189://itembox
                    {
                        if (Database.MapsTable.MapInformations[(ushort)client.Entity.UID].Owner == client.Entity.UID)
                        {
                            if (Database.MapsTable.MapInformations[client.Entity.UID].Box == 0)
                            {
                                
                                Game.House.AddBox(client);
                                client.Entity.Teleport(1002, 450, 350);
                                client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                            }
                            else
                            {
                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you can only set one itembox in your house!");
                                npc.OptionID = 255;
                                client.Send(npc.ToArray());
                            }
                        }
                        else
                        {
                            Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you can only set  itembox in your house lvl 2!");
                            npc.OptionID = 255;
                            client.Send(npc.ToArray());
                        }
                        break;
                    }
                #endregion*/
            }
            client.Entity.UseItem = false;
            client.SpiltStack = false;
            //if (item.StackSize > 1)
            //{
            //    item.StackSize -= 1;
            //    if (client.Inventory.ContainsUID(item.UID))
            //        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
            //    client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
            //    Database.ConquerItemTable.UpdateStack(item);
            //}
        }
        public static void GainRefineryItem(Interfaces.IConquerItem item, GameState c)
        {
            Refinery.RefineryBoxes RefineryB = null;
            if (Kernel.DatabaseRefineryBoxes.TryGetValue(item.ID, out RefineryB))
            {
                List<Refinery.RefineryItem> Possible = new List<Refinery.RefineryItem>();
                foreach (Refinery.RefineryItem RefineryI in Kernel.DatabaseRefinery.Values)
                {
                    if (RefineryI.Type == RefineryB.Type)
                    {
                        if (RefineryI.Position == RefineryB.Position)
                        {
                            if (RefineryI.Untradable == RefineryB.Untradable)
                                Possible.Add(RefineryI);
                        }
                    }
                }
                if (Possible.Count > 0)
                {
                    Random Rand = new Random();
                    Int32 x = Rand.Next(1, Possible.Count);
                    Refinery.RefineryItem Refinery = Possible[x];

                    if (Refinery != null)
                    {
                        c.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                        Interfaces.IConquerItem i = new ConquerItem(true);
                        i.ID = Refinery.Identifier;
                        c.Inventory.Add(i, Game.Enums.ItemUse.CreateAndAdd);
                    }
                }
            }
        }
        static void PickupItem(FloorItem floorItem, Client.GameState client)
        {
            if (client.Screen.TryGetFloorItem(floorItem.UID, out floorItem) && !client.Trade.InTrade)
            {

                if (client.Entity.X == floorItem.X && client.Entity.Y == floorItem.Y)
                {
                    uint owner = floorItem.Owner == null ? 0 : (uint)floorItem.Owner.Entity.UID;
                    if ((owner != 0 && owner == client.Entity.UID) || owner == 0 || Time32.Now >= floorItem.OnFloor.AddSeconds(ServerBase.Constants.FloorItemAvailableAfter))
                    {
                        goto Jump;
                    }
                    else if (client.Team != null)
                    {
                        if (client.Team.IsTeammate(owner))
                        {
                            if (client.Team.PickupItems && floorItem.ValueType == FloorItem.FloorValueType.Item)
                            {
                                if (floorItem.ItemID != 1088000 && floorItem.ItemID != 1088001)
                                {
                                    goto Jump;
                                }
                            }
                            else if (client.Team.PickupMoney && floorItem.ValueType != FloorItem.FloorValueType.Item)
                            {
                                goto Jump;
                            }
                        }
                    }
                    client.Send(ServerBase.Constants.FloorItemNotAvailable);
                    return;
                Jump:



                    FloorItem pickupAnimation = new FloorItem(true);
                    pickupAnimation.Type = 3;
                    pickupAnimation.UID = client.Entity.UID;
                    pickupAnimation.X = client.Entity.X;
                    pickupAnimation.Y = client.Entity.Y;
                    // Console.WriteLine("Xn "+floorItem.ValueType+"");
                    if (!client.Map.Floor[floorItem.X, floorItem.Y, PhoenixProject.Game.MapObjectType.Item, floorItem])
                    {
                        switch (floorItem.ValueType)
                        {
                            case FloorItem.FloorValueType.Item:
                                {
                                    if (client.Inventory.Count <= 39)
                                    {
                                        if (!client.Map.Floor[floorItem.X, floorItem.Y, PhoenixProject.Game.MapObjectType.Item, floorItem])
                                        {
                                            floorItem.Type = 2;
                                            floorItem.PickedUpAlready = true;
                                            client.RemoveScreenSpawn(floorItem, true);
                                            client.Map.RemoveFloorItem(floorItem);
                                            client.SendScreen(pickupAnimation, false);
                                            client.Screen.Remove(floorItem);


                                            client.Send(ServerBase.Constants.PickupItem(Database.ConquerItemInformation.BaseInformations[floorItem.Item.ID].Name));
                                            //foreach (Client.GameState clients in ServerBase.Kernel.GamePool.Values)
                                            //{
                                            //    clients.Screen.Remove(floorItem);
                                            //}

                                            if (floorItem.Item.MobDropped)
                                            {
                                                client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.CreateAndAdd);
                                                Data data = new Data(true);
                                                data.ID = Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                            }
                                            else
                                            {
                                                client.Inventory.Add(floorItem.Item, Game.Enums.ItemUse.CreateAndAdd);
                                                Data data = new Data(true);
                                                data.ID = Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                            }
                                        }
                                    }
                                    else
                                        client.Send(ServerBase.Constants.FullInventory);
                                    break;
                                }
                            case FloorItem.FloorValueType.Money:
                                {
                                    // Console.WriteLine("Xn");
                                    floorItem.Type = 2;
                                    client.RemoveScreenSpawn(floorItem, true);
                                    client.Map.RemoveFloorItem(floorItem);
                                    client.Send(ServerBase.Constants.PickupGold(floorItem.Value));
                                    client.SendScreen(pickupAnimation, false);
                                    client.Entity.Money += floorItem.Value;

                                    break;
                                }
                            case FloorItem.FloorValueType.ConquerPoints:
                                {
                                    floorItem.Type = 2;
                                    client.RemoveScreenSpawn(floorItem, true);
                                    client.Map.RemoveFloorItem(floorItem);
                                    client.Send(ServerBase.Constants.PickupConquerPoints(floorItem.Value));
                                    client.SendScreen(pickupAnimation, false);
                                    client.Entity.ConquerPoints += floorItem.Value;

                                    break;
                                }
                        }
                    }
                    return;
                }
            }
        }
        static void DropItem(ItemUsage itemUsage, Client.GameState client)
        {
            if (client.Booth != null)
            {
                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry you cant drop items while you in Booth");
                npc.OptionID = 255;
                client.Send(npc.ToArray());
                return;
            }
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.ID == 0)
                    return;
                Database.ConquerItemInformation infos = new Database.ConquerItemInformation(item.ID, 0);
                if (item.Lock != 0 || item.Suspicious)
                    return;
                if (infos.BaseInformation.Type == Database.ConquerItemBaseInformation.ItemType.Dropable && !item.Bound)
                {
                    ushort X = client.Entity.X, Y = client.Entity.Y;
                    if (client.Map.SelectCoordonates(ref X, ref Y))
                    {
                        FloorItem floorItem = new FloorItem(true);
                        floorItem.Item = item;
                        floorItem.ItemID = item.ID;
                        floorItem.ItemColor = item.Color;
                        floorItem.MapID = client.Map.ID;
                        floorItem.MapObjType = Game.MapObjectType.Item;
                        floorItem.X = X;
                        floorItem.Y = Y;
                        floorItem.Type = FloorItem.Drop;
                        floorItem.OnFloor = Time32.Now;
                        floorItem.UID = FloorItem.FloorUID.Next;
                        while (client.Map.Npcs.ContainsKey(floorItem.UID))
                            floorItem.UID = FloorItem.FloorUID.Next;
                        client.SendScreenSpawn(floorItem, true);
                        client.Map.AddFloorItem(floorItem);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);

                        /* #region DropLog
                         var dt = DateTime.Now;
                         string date = dt.Year + "-" + dt.Month + "//";
                         string datess = +dt.Day + "//";
                         if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                             Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                         if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\Drop"))
                             Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop");

                         if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + ""))
                             Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + "");
                         if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + "\\" + dt.Day + ".txt"))
                             File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + "\\" + dt.Day + ".txt");


                         File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + "\\" + dt.Day + ".txt",
 File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\Drop\\" + date + "\\" + dt.Day + ".txt") +
 "\r\n" + client.Entity.Name + " Droped item: [" + Database.ConquerItemInformation.BaseInformations[item.ID].Name + "] item UID: [" + item.UID + "] Plus: [" + item.Plus + "]");
                         #endregion*/
                    }
                }
                else
                    client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
            }
        }
        static void DropMoney(ItemUsage itemUsage, Client.GameState client)
        {
            if (client.Entity.Money >= itemUsage.UID)
            {
                ushort X = client.Entity.X, Y = client.Entity.Y;
                if (client.Map.SelectCoordonates(ref X, ref Y))
                {
                    uint ItemID = MoneyItemID(itemUsage.UID);
                    FloorItem floorItem = new FloorItem(true);
                    floorItem.ValueType = FloorItem.FloorValueType.Money;
                    floorItem.Value = itemUsage.UID;
                    floorItem.ItemID = ItemID;
                    floorItem.MapID = client.Map.ID;
                    floorItem.MapObjType = Game.MapObjectType.Item;
                    floorItem.X = X;
                    floorItem.Y = Y;
                    floorItem.Type = FloorItem.Drop;
                    floorItem.OnFloor = Time32.Now;
                    floorItem.UID = FloorItem.FloorUID.Next;
                    while (client.Map.Npcs.ContainsKey(floorItem.UID))
                        floorItem.UID = FloorItem.FloorUID.Next;
                    client.SendScreenSpawn(floorItem, true);
                    client.Map.AddFloorItem(floorItem);
                    client.Entity.Money -= itemUsage.UID;

                }
            }
        }
        public static uint MoneyItemID(uint value)
        {
            if (value < 100)
                return 1090000;
            else if (value < 399)
                return 1090010;
            else if (value < 5099)
                return 1090020;
            else if (value < 8099)
                return 1091000;
            else if (value < 12099)
                return 1091010;
            else
                return 1091020;
        }

        static void HandleBuyFromNPC(ItemUsage itemUsage, Client.GameState client)
        {
            if (client.Trade.InTrade)
                return;
            if (client.Entity.MapID == 3031)
                return;
            if (itemUsage == null)
                return;
            if (client == null)
                return;
            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc) || itemUsage.UID == 2888 || itemUsage.UID == 6000)
            {
                Interfaces.IConquerItem _ExistingItem;
                Database.ConquerItemInformation iteminfo = new PhoenixProject.Database.ConquerItemInformation(itemUsage.dwParam, 0);




                if (client.Inventory.Count == 40 && !client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                    return;
                if (itemUsage.UID != 2888 && itemUsage.UID != 6000)
                    if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                        return;
                Database.ShopFile.Shop shop = new PhoenixProject.Database.ShopFile.Shop();

                if (Database.ShopFile.Shops.TryGetValue(itemUsage.UID, out shop))
                {
                    if (shop.UID == 0)
                        return;
                    if (shop.UID != 6000 && shop.UID != 6001)
                    {
                        if (!shop.Items.Contains(itemUsage.dwParam))
                        { Console.WriteLine("Error! Cannot puchase item ID: " + itemUsage.dwParam + " from shop ID: " + itemUsage.UID); return; }
                    }
                    else
                    {
                        if (shop.UID == 6000)
                        {
                            if (!shop.HonorShopItems.ContainsKey(itemUsage.dwParam))
                            {
                                return;
                            }
                        }
                        else
                        {
                            if (shop.UID == 6001)
                            {
                                if (!shop.SteedShops.ContainsKey(itemUsage.dwParam))
                                {
                                    return;
                                }
                            }
                        }
                    }

                    uint Amount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;

                    Interfaces.IConquerItem item = new ConquerItem(true);

                    switch (shop.MoneyType)
                    {
                        case Database.ShopFile.MoneyType.HonorPoints:
                            {

                                Database.ShopFile.Shop.HonorShopItem hshopi;
                                if (shop.HonorShopItems.TryGetValue(itemUsage.dwParam, out hshopi))
                                {
                                    if (client.ArenaStatistic != null)
                                    {
                                        if (client.Inventory.Count <= 39)
                                        {
                                            if (client.ArenaStatistic.CurrentHonor >= hshopi.cost)
                                            {
                                                Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                Database.ConquerItemBaseInformation ibi;
                                                if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                                                {
                                                    if (ibi.Durability > 0)
                                                    {
                                                        newItem.Durability = ibi.Durability;
                                                        newItem.MaximDurability = ibi.Durability;
                                                    }
                                                }
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                Data data = new Data(true);
                                                data.ID = GamePackets.Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                                client.ArenaStatistic.CurrentHonor -= hshopi.cost;
                                                client.ArenaStatistic.Send(client);


                                            }
                                            else client.Send(new Message("You do not have enough Honor Points", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                                    }
                                }
                                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                                break;

                            }
                        case Database.ShopFile.MoneyType.RaceShop:
                            {

                                Database.ShopFile.Shop.SteedShop hshopi;
                                if (shop.SteedShops.TryGetValue(itemUsage.dwParam, out hshopi))
                                {
                                    if (client.Entity.RacePoints >= hshopi.cost)
                                    {
                                        if (client.Inventory.Count <= 39)
                                        {
                                            if (client.Entity.RacePoints >= hshopi.cost)
                                            {
                                                Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                                newItem.ID = itemUsage.dwParam;
                                                Database.ConquerItemBaseInformation ibi;
                                                if (Database.ConquerItemInformation.BaseInformations.TryGetValue(newItem.ID, out ibi))
                                                {
                                                    if (ibi.Durability > 0)
                                                    {
                                                        newItem.Durability = ibi.Durability;
                                                        newItem.MaximDurability = ibi.Durability;
                                                    }
                                                }
                                                client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                Data data = new Data(true);
                                                data.ID = GamePackets.Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                                client.Entity.RacePoints -= hshopi.cost;
                                            }
                                            else client.Send(new Message("You do not have enough Race Points", Color.Red, Message.TopLeft));
                                        }
                                        else client.Send(new Message("You do not have enough space in your inventory", Color.Red, Message.TopLeft));
                                    }
                                }
                                else client.Send(new Message("Can not find this item", Color.Red, Message.TopLeft));
                                break;

                            }
                        case PhoenixProject.Database.ShopFile.MoneyType.Gold:
                            {
                                if (iteminfo.BaseInformation.GoldWorth * Amount > client.Entity.Money)
                                    return;
                                if (client.Entity.Money - (iteminfo.BaseInformation.GoldWorth * Amount) > client.Entity.Money)
                                    return;
                                item.ID = itemUsage.dwParam;
                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                item.Color = (PhoenixProject.Game.Enums.Color)3;

                                uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                while (NewAmount > 0)
                                {
                                    if (client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                                    {
                                        if (_ExistingItem.StackSize == 0)
                                            _ExistingItem.StackSize = 1;

                                        ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                        _StackCount -= (ushort)_ExistingItem.StackSize;

                                        if (_StackCount >= NewAmount)
                                            _StackCount = (ushort)NewAmount;
                                        _ExistingItem.StackSize += _StackCount;

                                        Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                        _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                        _ExistingItem.Send(client);
                                        _ExistingItem.Mode = Game.Enums.ItemMode.Default;
                                        NewAmount -= _StackCount;
                                        Data data = new Data(true);
                                        data.ID = GamePackets.Data.OpenCustom;
                                        data.UID = client.Entity.UID;
                                        data.TimeStamp = Time32.Now;
                                        data.dwParam = 3382;
                                        data.wParam1 = client.Entity.X;
                                        data.wParam2 = client.Entity.Y;
                                        client.Send(data);

                                        //uint _TotalItemStacks = Math.Min(1, (itemUsage.dwExtraInfo / iteminfo.BaseInformation.StackSize));
                                    }
                                    else
                                    {
                                        if (iteminfo.BaseInformation.StackSize > 1 && itemUsage.dwExtraInfo > 1)
                                        {
                                            item = new ConquerItem(true);
                                            item.ID = itemUsage.dwParam;
                                            item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                            item.Color = (PhoenixProject.Game.Enums.Color)3;
                                            ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                            if (NewAmount <= iteminfo.BaseInformation.StackSize)
                                                _StackCount = (ushort)NewAmount;
                                            item.StackSize = (ushort)_StackCount;
                                            client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            Database.ConquerItemTable.UpdateStack(item);
                                            NewAmount -= _StackCount;
                                            Data data = new Data(true);
                                            data.ID = GamePackets.Data.OpenCustom;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = 3382;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);
                                        }
                                        else
                                        {
                                            item = new ConquerItem(true);
                                            item.ID = itemUsage.dwParam;
                                            item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                            item.Color = (PhoenixProject.Game.Enums.Color)3;
                                            item.StackSize = 1;
                                            client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                            NewAmount--;
                                            Data data = new Data(true);
                                            data.ID = GamePackets.Data.OpenCustom;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = 3382;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);
                                        }
                                    }
                                }
                                client.Entity.Money -= (iteminfo.BaseInformation.GoldWorth * Amount);



                                //if (Amount > 1 && canMakeStack)
                                //{
                                //    item.StackSize = (ushort)Amount > 5 ? (ushort)5 : (ushort)Amount;
                                //    item.MaxStackSize = 5;
                                //    Amount -= (uint)item.StackSize - 1;
                                //    Database.ConquerItemTable.UpdateStack(item);
                                //}
                                //client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                //if (client.Inventory.ContainsUID(item.UID))
                                //    if (canMakeStack)
                                //        client.Entity.Money -= iteminfo.BaseInformation.GoldWorth * Amount;
                                //    else
                                //        client.Entity.Money -= iteminfo.BaseInformation.GoldWorth;
                                //        //Database.EntityTable.UpdateMoney(client);
                                break;
                            }
                        case PhoenixProject.Database.ShopFile.MoneyType.ConquerPoints:
                            {

                                if (itemUsage.dwExtraInfo3 == 1)
                                {
                                    if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.ConquerPoints)
                                        return;
                                    if (client.Entity.ConquerPoints - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.ConquerPoints)
                                        return;
                                    item.ID = itemUsage.dwParam;
                                    if (item.ID % 730000 <= 12)
                                        item.Plus = (Byte)(item.ID % 730000);
                                    item.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                    uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                    while (NewAmount > 0)
                                    {
                                        if (client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                                        {
                                            if (_ExistingItem.StackSize == 0)
                                                _ExistingItem.StackSize = 1;

                                            ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                            _StackCount -= (ushort)_ExistingItem.StackSize;

                                            if (_StackCount >= NewAmount)
                                                _StackCount = (ushort)NewAmount;
                                            _ExistingItem.StackSize += _StackCount;

                                            Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                            _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                            _ExistingItem.Send(client);
                                            _ExistingItem.Mode = Game.Enums.ItemMode.Default;
                                            NewAmount -= _StackCount;
                                            Data data = new Data(true);
                                            data.ID = GamePackets.Data.OpenCustom;
                                            data.UID = client.Entity.UID;
                                            data.TimeStamp = Time32.Now;
                                            data.dwParam = 3382;
                                            data.wParam1 = client.Entity.X;
                                            data.wParam2 = client.Entity.Y;
                                            client.Send(data);

                                            //uint _TotalItemStacks = Math.Min(1, (itemUsage.dwExtraInfo / iteminfo.BaseInformation.StackSize));
                                        }
                                        else
                                        {
                                            if (iteminfo.BaseInformation.StackSize > 1 && itemUsage.dwExtraInfo > 1)
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (PhoenixProject.Game.Enums.Color)3;
                                                ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                                if (NewAmount <= iteminfo.BaseInformation.StackSize)
                                                    _StackCount = (ushort)NewAmount;
                                                item.StackSize = (ushort)_StackCount;
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                Database.ConquerItemTable.UpdateStack(item);
                                                NewAmount -= _StackCount;
                                                Data data = new Data(true);
                                                data.ID = GamePackets.Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                            }
                                            else
                                            {
                                                item = new ConquerItem(true);
                                                item.ID = itemUsage.dwParam;
                                                item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                item.Color = (PhoenixProject.Game.Enums.Color)3;
                                                item.StackSize = 1;
                                                if (item.ID == 730001)
                                                {
                                                    item.Plus = 1;
                                                }
                                                if (item.ID == 730002)
                                                {
                                                    item.Plus = 2;
                                                }
                                                if (item.ID == 730003)
                                                {
                                                    item.Plus = 3;
                                                }
                                                if (item.ID == 730004)
                                                {
                                                    item.Plus = 4;
                                                }
                                                if (item.ID == 730005)
                                                {
                                                    item.Plus = 5;
                                                }
                                                if (item.ID == 730006)
                                                {
                                                    item.Plus = 6;
                                                }
                                                if (item.ID == 730007)
                                                {
                                                    item.Plus = 7;
                                                }
                                                if (item.ID == 730008)
                                                {
                                                    item.Plus = 8;
                                                }
                                                if (item.ID == 730009)
                                                {
                                                    item.Plus = 9;
                                                }
                                                client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                NewAmount--;
                                                Data data = new Data(true);
                                                data.ID = GamePackets.Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);
                                            }
                                        }
                                    }
                                    client.Entity.ConquerPoints -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                    break;
                                }
                                else
                                {
                                    ushort postion = ItemPosition(itemUsage.dwParam);
                                    if (ServerBase.Constants.AllowedBound.Contains(itemUsage.dwParam) || postion == ConquerItem.LeftWeaponAccessory || postion == ConquerItem.Garment)
                                    {
                                        if (iteminfo.BaseInformation.ConquerPointsWorth * Amount > client.Entity.BConquerPoints)
                                            return;
                                        if (client.Entity.BConquerPoints - (iteminfo.BaseInformation.ConquerPointsWorth * Amount) > client.Entity.BConquerPoints)
                                            return;
                                        item.ID = itemUsage.dwParam;
                                        if (item.ID % 730000 <= 12)
                                            item.Plus = (Byte)(item.ID % 730000);
                                        item.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                        item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                        item.Bound = true;
                                        uint NewAmount = itemUsage.dwExtraInfo > 0 ? itemUsage.dwExtraInfo : 1;
                                        while (NewAmount > 0)
                                        {
                                            if (client.Inventory.Contains(iteminfo.BaseInformation.ID, iteminfo.BaseInformation.StackSize, out _ExistingItem))
                                            {
                                                if (_ExistingItem.StackSize == 0)
                                                    _ExistingItem.StackSize = 1;

                                                ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                                _StackCount -= (ushort)_ExistingItem.StackSize;

                                                if (_StackCount >= NewAmount)
                                                    _StackCount = (ushort)NewAmount;
                                                _ExistingItem.StackSize += _StackCount;

                                                Database.ConquerItemTable.UpdateStack(_ExistingItem);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Update;
                                                _ExistingItem.Send(client);
                                                _ExistingItem.Mode = Game.Enums.ItemMode.Default;
                                                NewAmount -= _StackCount;
                                                Data data = new Data(true);
                                                data.ID = GamePackets.Data.OpenCustom;
                                                data.UID = client.Entity.UID;
                                                data.TimeStamp = Time32.Now;
                                                data.dwParam = 3382;
                                                data.wParam1 = client.Entity.X;
                                                data.wParam2 = client.Entity.Y;
                                                client.Send(data);

                                                //uint _TotalItemStacks = Math.Min(1, (itemUsage.dwExtraInfo / iteminfo.BaseInformation.StackSize));
                                            }
                                            else
                                            {
                                                if (iteminfo.BaseInformation.StackSize > 1 && itemUsage.dwExtraInfo > 1)
                                                {
                                                    item = new ConquerItem(true);
                                                    item.ID = itemUsage.dwParam;
                                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                    item.Color = (PhoenixProject.Game.Enums.Color)3;
                                                    ushort _StackCount = iteminfo.BaseInformation.StackSize;
                                                    if (NewAmount <= iteminfo.BaseInformation.StackSize)
                                                        _StackCount = (ushort)NewAmount;
                                                    item.StackSize = (ushort)_StackCount;
                                                    if (item.ID == 730001)
                                                    {
                                                        item.Plus = 1;
                                                    }
                                                    if (item.ID == 730002)
                                                    {
                                                        item.Plus = 2;
                                                    }
                                                    if (item.ID == 730003)
                                                    {
                                                        item.Plus = 3;
                                                    }
                                                    if (item.ID == 730004)
                                                    {
                                                        item.Plus = 4;
                                                    }
                                                    if (item.ID == 730005)
                                                    {
                                                        item.Plus = 5;
                                                    }
                                                    if (item.ID == 730006)
                                                    {
                                                        item.Plus = 6;
                                                    }
                                                    if (item.ID == 730007)
                                                    {
                                                        item.Plus = 7;
                                                    }
                                                    if (item.ID == 730008)
                                                    {
                                                        item.Plus = 8;
                                                    }
                                                    if (item.ID == 730009)
                                                    {
                                                        item.Plus = 9;
                                                    }
                                                    client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                    Database.ConquerItemTable.UpdateStack(item);
                                                    NewAmount -= _StackCount;
                                                    Data data = new Data(true);
                                                    data.ID = GamePackets.Data.OpenCustom;
                                                    data.UID = client.Entity.UID;
                                                    data.TimeStamp = Time32.Now;
                                                    data.dwParam = 3382;
                                                    data.wParam1 = client.Entity.X;
                                                    data.wParam2 = client.Entity.Y;
                                                    client.Send(data);
                                                }
                                                else
                                                {
                                                    item = new ConquerItem(true);
                                                    item.ID = itemUsage.dwParam;
                                                    item.Durability = item.MaximDurability = iteminfo.BaseInformation.Durability;
                                                    item.Color = (PhoenixProject.Game.Enums.Color)3;
                                                    item.StackSize = 1;
                                                    if (item.ID == 730001)
                                                    {
                                                        item.Plus = 1;
                                                    }
                                                    if (item.ID == 730002)
                                                    {
                                                        item.Plus = 2;
                                                    }
                                                    if (item.ID == 730003)
                                                    {
                                                        item.Plus = 3;
                                                    }
                                                    if (item.ID == 730004)
                                                    {
                                                        item.Plus = 4;
                                                    }
                                                    if (item.ID == 730005)
                                                    {
                                                        item.Plus = 5;
                                                    }
                                                    if (item.ID == 730006)
                                                    {
                                                        item.Plus = 6;
                                                    }
                                                    if (item.ID == 730007)
                                                    {
                                                        item.Plus = 7;
                                                    }
                                                    if (item.ID == 730008)
                                                    {
                                                        item.Plus = 8;
                                                    }
                                                    if (item.ID == 730009)
                                                    {
                                                        item.Plus = 9;
                                                    }
                                                    client.Inventory.Add(item, Game.Enums.ItemUse.CreateAndAdd);
                                                    NewAmount--;
                                                    Data data = new Data(true);
                                                    data.ID = GamePackets.Data.OpenCustom;
                                                    data.UID = client.Entity.UID;
                                                    data.TimeStamp = Time32.Now;
                                                    data.dwParam = 3382;
                                                    data.wParam1 = client.Entity.X;
                                                    data.wParam2 = client.Entity.Y;
                                                    client.Send(data);
                                                }
                                            }
                                        }
                                        client.Entity.BConquerPoints -= (iteminfo.BaseInformation.ConquerPointsWorth * Amount);
                                        itemUsage.dwParam = 1;
                                        client.Send(itemUsage);
                                    }
                                    else
                                    {
                                        itemUsage.dwParam = 0;
                                        client.Send(itemUsage);
                                    }
                                    break;
                                }
                            }

                    }
                    Amount--;
                }
            }
        }

        static void HandleSellToNPC(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.INpc npc = null;
            if (client.Map.Npcs.TryGetValue(itemUsage.UID, out npc))
            {
                if (ServerBase.Kernel.GetDistance(client.Entity.X, client.Entity.Y, npc.X, npc.Y) > 17)
                    return;
                Interfaces.IConquerItem item = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out item))
                {
                    if (item.Lock != 0 || item.Suspicious)
                        return;
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    Price = Price / 3;
                    if (item.Durability > 0 && item.Durability < item.MaximDurability)
                        Price = (Price * item.Durability) / item.MaximDurability;

                    if (item.Durability > 0 && item.Durability <= item.MaximDurability)
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                        client.Entity.Money += Price;
                    }
                    else
                    {
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Remove);
                    }
                }
            }
        }
        static void HandleRepair(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (item.Suspicious)
                    return;
                if (IsArrow(item.ID))
                    return;
                if (item.Durability > 0 && item.Durability < item.MaximDurability)
                {
                    uint Price = new Database.ConquerItemInformation(item.ID, 0).BaseInformation.GoldWorth;
                    byte Quality = (byte)(item.ID % 10);
                    double QualityMultipier = 0;

                    switch (Quality)
                    {
                        case 9: QualityMultipier = 1.125; break;
                        case 8: QualityMultipier = 0.975; break;
                        case 7: QualityMultipier = 0.9; break;
                        case 6: QualityMultipier = 0.825; break;
                        default: QualityMultipier = 0.75; break;
                    }

                    int nRepairCost = 0;
                    if (Price > 0)
                        nRepairCost = (int)Math.Ceiling((Price * (item.MaximDurability - item.Durability) / item.MaximDurability) * QualityMultipier);

                    nRepairCost = Math.Max(1, nRepairCost);
                    if (client.Entity.Money >= nRepairCost)
                    {
                        client.Entity.Money -= (uint)nRepairCost;
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
                else if (item.Durability == 0)
                {
                    if (client.Inventory.Remove(1088001, 5))
                    {
                        item.Durability = item.MaximDurability;
                        item.Mode = Game.Enums.ItemMode.Update;
                        item.Send(client);
                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                    }
                }
            }
        }
        static void UpgradeItem(ItemUsage itemUsage, Client.GameState client)
        {
            Interfaces.IConquerItem item = null;
            if (client.Inventory.TryGetItem(itemUsage.UID, out item))
            {
                if (IsArrow(item.ID))
                    return;
                Interfaces.IConquerItem upgrade = null;
                if (client.Inventory.TryGetItem(itemUsage.dwParam, out upgrade))
                {
                    Database.ConquerItemInformation infos = new PhoenixProject.Database.ConquerItemInformation(item.ID, item.Plus);
                    switch (upgrade.ID)
                    {
                        case 1088000:
                            {
                                if (item.ID % 10 == (byte)Game.Enums.ItemQuality.Super)
                                    break;
                                byte chance = (byte)(70 - ((infos.BaseInformation.Level - (infos.BaseInformation.Level > 100 ? 30 : 0)) / (10 - item.ID % 10)));
                                if (item.Durability < item.MaximDurability)
                                    break;
                                if (ServerBase.Kernel.Rate(chance))
                                {
                                    switch ((Game.Enums.ItemQuality)(item.ID % 10))
                                    {
                                        case Game.Enums.ItemQuality.Normal:
                                        case Game.Enums.ItemQuality.NormalV1:
                                        case Game.Enums.ItemQuality.NormalV2:
                                        case Game.Enums.ItemQuality.NormalV3: item.ID = (item.ID - (item.ID % 10)) + (byte)Game.Enums.ItemQuality.Refined; break;
                                        default: item.ID++; break;
                                    }
                                    Database.ConquerItemTable.UpdateItemID(item, client);
                                    item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                else
                                {
                                    item.Durability = (ushort)(item.Durability / 2);
                                    Database.ConquerItemTable.UpdateDurabilityItem(item);
                                    item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                    item.Send(client);
                                }
                                item = ItemSocket(item, 1);
                                client.Inventory.Remove(upgrade, PhoenixProject.Game.Enums.ItemUse.Remove);
                                break;
                            }
                        case 1088001:
                            {
                                if (infos.BaseInformation.Level == ItemMaxLevel(ItemPosition(infos.BaseInformation.ID)))
                                    break;
                                byte chance = 70;
                                chance -= (byte)(infos.BaseInformation.Level / 10 * 3);
                                chance -= (byte)(((item.ID % 10) + 1) * 3);
                                if (item.Durability < item.MaximDurability)
                                    break;
                                uint newid = infos.CalculateUplevel();
                                if (newid != 0 && newid != item.ID)
                                {
                                    if (ServerBase.Kernel.Rate(chance))
                                    {
                                        item.ID = newid;
                                        infos = new PhoenixProject.Database.ConquerItemInformation(item.ID, item.Plus);
                                        item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(item, client);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    else
                                    {
                                        item.Durability = (ushort)(item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    //item = ItemSocket(item, 2);
                                    client.Inventory.Remove(upgrade, PhoenixProject.Game.Enums.ItemUse.Remove);
                                }
                                break;
                            }
                        case 1088002:
                            {
                                ushort postion = ItemPosition(infos.BaseInformation.ID);
                                byte level = ItemMinLevel(postion);
                                if (postion == 6)
                                {
                                    if (infos.BaseInformation.ID.ToString()[2] == '1')
                                        level = 13;
                                }
                                if (infos.BaseInformation.Level <= level)
                                {
                                    client.Send(new Message("This item's level is too low. It can't be downgraded more.", System.Drawing.Color.MistyRose, Message.TopLeft));
                                    break;
                                }
                                byte chance = 100;
                                if (item.Durability < item.MaximDurability)
                                    break;
                                uint newid = infos.CalculateDownlevel();
                                if (newid != 0 && newid != item.ID)
                                {
                                    if (ServerBase.Kernel.Rate(chance))
                                    {
                                        item.ID = newid;
                                        infos = new PhoenixProject.Database.ConquerItemInformation(item.ID, item.Plus);
                                        item.Durability = item.MaximDurability = infos.BaseInformation.Durability;
                                        Database.ConquerItemTable.UpdateItemID(item, client);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    else
                                    {
                                        item.Durability = (ushort)(item.Durability / 2);
                                        Database.ConquerItemTable.UpdateDurabilityItem(item);
                                        item.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                        item.Send(client);
                                    }
                                    //item = ItemSocket(item, 2);
                                    client.Inventory.Remove(upgrade, PhoenixProject.Game.Enums.ItemUse.Remove);
                                }
                                break;
                            }
                    }
                }
            }
        }

        static Interfaces.IConquerItem ItemSocket(Interfaces.IConquerItem item, byte type)
        {
            if (type == 1)
                item.SocketProgress += 10;
            else
                item.SocketProgress += 5;
            ushort need = 0;
            if (item.SocketOne == Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = ServerBase.Constants.SocketOneProgress;
            else if (item.SocketOne != Game.Enums.Gem.NoSocket && item.SocketTwo == Game.Enums.Gem.NoSocket)
                need = ServerBase.Constants.SocketTwoProgress;
            if (item.SocketProgress >= need && need != 0)
            {
                item.SocketProgress -= need;
                if (need == ServerBase.Constants.SocketOneProgress)
                    item.SocketOne = Game.Enums.Gem.EmptySocket;
                else
                    item.SocketTwo = Game.Enums.Gem.EmptySocket;
                Database.ConquerItemTable.UpdateSockets(item);
            }
            Database.ConquerItemTable.UpdateSocketProgress(item);
            return item;
        }
        public static byte ItemMaxLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 140;
                case ConquerItem.Necklace: return 139;
                case ConquerItem.Armor: return 140;
                case ConquerItem.LeftWeapon: return 140;
                case ConquerItem.RightWeapon: return 140;
                case ConquerItem.Boots: return 129;
                case ConquerItem.Ring: return 136;
                case ConquerItem.Tower: return 100;
                case ConquerItem.Fan: return 100;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedTalisman: return 30;
            }
            return 0;
        }
        public static byte ItemMinLevel(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 15;
                case ConquerItem.Necklace: return 7;
                case ConquerItem.Armor: return 15;
                case ConquerItem.LeftWeapon: return 40;
                case ConquerItem.RightWeapon: return 5;
                case ConquerItem.Boots: return 10;
                case ConquerItem.Ring: return 10;
                case ConquerItem.Tower: return 0;
                case ConquerItem.Fan: return 0;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedTalisman: return 0;
            }
            return 0;
        }
        public static byte ItemMinLevel2(ushort postion)
        {
            switch (postion)
            {
                case 0: return 0;
                case ConquerItem.Head: return 15;
                case ConquerItem.Necklace: return 17;
                case ConquerItem.Armor: return 15;
                case ConquerItem.LeftWeapon: return 15;
                case ConquerItem.RightWeapon: return 15;
                case ConquerItem.Boots: return 10;
                case ConquerItem.Ring: return 10;
                case ConquerItem.Tower: return 0;
                case ConquerItem.Fan: return 0;
                case ConquerItem.Steed: return 0;
                case ConquerItem.SteedTalisman: return 0;
            }
            return 0;
        }
        public static Positions GetPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;

            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 145)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 139)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900 || iType == 612)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 611))
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;

            else return (Positions)0;
        }
        public static Positions GetPositionFromID2(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;

            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 145)
                return Positions.AltHead;
            else if (iType >= 120 && iType <= 121)
                return Positions.AltNecklace;
            else if (iType >= 130 && iType <= 139)
                return Positions.AltArmor;
            else if (iType >= 150 && iType <= 152)
                return Positions.AltRing;
            else if (iType == 160)
                return Positions.AltBoots;
            else if (iType >= 181 && iType <= 194)
                return Positions.AltGarment;

            else if (iType == 2100)
                return Positions.AltBottle;
            else if (iType == 1050 || iType == 900 || iType == 612)
                return Positions.AltLeftHand;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 611))
                return Positions.AltRightHand;


            else return (Positions)0;
        }
        public static ushort ItemPosition(uint ID)
        {
            if (ID >= 181305 && ID <= 194300)
                return ConquerItem.Garment;

            if ((ID >= 111003 && ID <= 118309) || (ID >= 123000 && ID <= 123309) || (ID >= 141003 && ID <= 143309) || (ID >= 144000 && ID <= 144019) || (ID >= 144000 && ID <= 145309))
                return ConquerItem.Head;

            else if (ID >= 120001 && ID <= 121269)
                return ConquerItem.Necklace;

            else if (ID >= 130003 && ID <= 139309)
                return ConquerItem.Armor;

            else if (ID >= 150000 && ID <= 152279)
                return ConquerItem.Ring;

            else if (ID >= 160013 && ID <= 160249)
                return ConquerItem.Boots;

            else if (ID >= 181305 && ID <= 194995)
                return ConquerItem.Garment;

            else if (ID >= 201003 && ID <= 201009)
                return ConquerItem.Fan;

            else if (ID >= 202003 && ID <= 202009)
                return ConquerItem.Tower;

            else if (ID >= 203003 && ID <= 203009)
                return ConquerItem.SteedTalisman;

            else if (ID == 300000)
                return ConquerItem.Steed;
            else if (ID >= 410003 && ID <= 611439)
                return ConquerItem.RightWeapon;
            else if ((ID >= 900000 && ID <= 900309) || (ID >= 1050000 && ID <= 1051000) || (ID >= 612000 && ID <= 612439))
                return ConquerItem.LeftWeapon;
            else if (ID >= 2100025 && ID <= 2100095)
                return ConquerItem.Bottle;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.LeftWeaponAccessory;
            else if (ID >= 350001 && ID <= 380015)
                return ConquerItem.RightWeaponAccessory;
            else if (ID >= 200000 && ID <= 200458)//200440
                return ConquerItem.SteedArmor;
            return 0;
        }
        public static ushort ItemPosition2(uint ID)
        {
            if (ID == 134155 || ID == 131155 || ID == 133155 || ID == 130155)
                return ConquerItem.AltGarment;

            if ((ID >= 111003 && ID <= 118309) || (ID >= 123000 && ID <= 123309) || (ID >= 141003 && ID <= 145309))
                return ConquerItem.AltHead;

            else if (ID >= 120001 && ID <= 121269)
                return ConquerItem.AltNecklace;

            else if (ID >= 130003 && ID <= 139309)
                return ConquerItem.AltArmor;

            else if (ID >= 150000 && ID <= 152279)
                return ConquerItem.AltRing;

            else if (ID >= 160013 && ID <= 160249)
                return ConquerItem.AltBoots;

            else if (ID >= 181305 && ID <= 194300)
                return ConquerItem.AltGarment;


            else if (ID >= 410003 && ID <= 611439)
                return ConquerItem.AltRightHand;
            else if ((ID >= 900000 && ID <= 900309) || (ID >= 1050000 && ID <= 1051000) || (ID >= 612003 && ID <= 612439))
                return ConquerItem.AltLeftHand;
            else if (ID >= 2100025 && ID <= 2100095)
                return ConquerItem.AltBottle;

            return 0;
        }
        public static bool IsArrow(uint ID)
        {
            if (ID >= 1050000 && ID <= 1051000)
                return true;
            return false;
        }
        public static bool IsTwoHand(uint ID)
        {
            return (ID.ToString()[0] == '5' ? true : false);
        }

        public static bool IsAccessory(uint ID)
        {
            return ID >= 350001 && ID <= 380015;
        }
        public enum Positions : byte
        {
            Inventory = 0,
            Head = 1,
            Necklace = 2,
            Armor = 3,
            Right = 4,
            Left = 5,
            Ring = 6,
            Bottle = 7,
            Boots = 8,
            Garment = 9,
            AttackTalisman = 10,
            DefenceTalisman = 11,
            Steed = 12,
            SteedTalisman = 18,
            RightAccessory = 15,
            LeftAccessory = 16,
            SteedArmor = 17,
            AltArmor = 23,
            AltBoots = 28,
            AltBottle = 27,
            AltGarment = 29,
            AltHead = 21,
            AltLeftHand = 25,
            AltNecklace = 22,
            AltRightHand = 24,
            AltRing = 26
        }
        public static Positions ItemPositionFromID(UInt32 itemid)
        {
            UInt32 iType = itemid / 1000;


            if (iType >= 111 && iType <= 118 || iType == 123 || iType >= 141 && iType <= 143)
                return Positions.Head;
            else if (iType >= 120 && iType <= 121)
                return Positions.Necklace;
            else if (iType >= 130 && iType <= 137)
                return Positions.Armor;
            else if (iType >= 150 && iType <= 152)
                return Positions.Ring;
            else if (iType == 160)
                return Positions.Boots;
            else if (iType >= 181 && iType <= 194)
                return Positions.Garment;
            else if (iType == 201)
                return Positions.AttackTalisman;
            else if (iType == 202)
                return Positions.DefenceTalisman;
            else if (iType == 203)
                return Positions.SteedTalisman;
            else if (iType == 200)
                return Positions.SteedArmor;
            else if (iType == 300)
                return Positions.Steed;
            else if (iType == 2100)
                return Positions.Bottle;
            else if (iType == 1050 || iType == 900)
                return Positions.Left;
            else if ((iType >= 410 && iType <= 490) || (iType >= 500 && iType <= 580) || (iType >= 601 && iType <= 612))
                return Positions.Right;
            else if (iType >= 350 && iType <= 370)
                return Positions.RightAccessory;
            else if (iType == 380)
                return Positions.LeftAccessory;

            else return (Positions)0;
        }
        public static void EquipItem(ItemUsage itemUsage, Client.GameState client)
        {
            if (!client.AlternateEquipment)
            {
                if (itemUsage.dwParam < 20)
                {

                    Interfaces.IConquerItem item = null;
                    client.Entity.AttackPacket = null;

                    if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
                    {
                        if (item.Suspicious)
                            return;

                        Positions pos = GetPositionFromID(item.ID);
                        if (client.Entity.MapID == 2060)
                        {
                            if (pos == Positions.Garment)
                            {
                                return;
                            }
                        }
                        if (client.Entity.MapID == 7009)
                        {
                            if (pos == Positions.Garment)
                            {
                                return;
                            }
                        }
                        if (pos == Positions.Inventory)
                        {
                            UseItem(item, client);
                            return;
                        }
                        #region Sanity checks

                        bool can2hand = false;
                        bool can2wpn = false;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 75)
                            can2hand = true;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (!Equipable(item, client))
                            return;
                        if (ItemPosition(item.ID) == 5)
                        {
                            itemUsage.dwParam = 5;
                            if (!can2hand && !can2wpn)
                                return;
                            if (client.Equipment.Free(4) || (client.Equipment.TryGetItem(4).ID / 1000 != 500 && IsArrow(item.ID)))
                                return;
                        }
                        if (ItemPosition(item.ID) == 4)
                        {
                            if (itemUsage.dwParam == 5)
                                if (!can2hand || !can2wpn)
                                    return;
                        }
                        if (!((itemUsage.dwParam == 4 || itemUsage.dwParam == 5) && (ItemPosition(item.ID) == 4 || ItemPosition(item.ID) == 5)))
                        {
                            if (!IsAccessory(item.ID))
                                itemUsage.dwParam = ItemPosition(item.ID);
                        }
                        bool twohand = IsTwoHand(item.ID);

                        if (!twohand && itemUsage.dwParam == 4)
                            if (!client.Equipment.Free(5))
                                if (client.Inventory.Count < 40)
                                {
                                    if (IsArrow(client.Equipment.TryGetItem(5).ID))
                                        client.Equipment.Remove(5);
                                    else
                                    {
                                        if (client.Equipment.TryGetItem(4) != null)
                                        {
                                            if (IsTwoHand(client.Equipment.TryGetItem(4).ID))
                                                client.Equipment.Remove(4);
                                        }
                                    }
                                }
                        #endregion

                        if (client.Map.ID == 1039)
                            client.Entity.AttackPacket = null;

                        item.Position = (ushort)itemUsage.dwParam;
                        if (ItemPosition(item.ID) == 5 && !IsArrow(item.ID))
                        {
                            if (IsTwoHand(client.Equipment.TryGetItem(4).ID))
                            {
                                if (!client.Spells.ContainsKey(10311))//Perseverance
                                {
                                    client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                    return;
                                }
                            }
                        }

                        //Database.ConquerItemTable.ClearPosition(client.Entity.UID, (byte)itemUsage.dwParam);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                        if (client.Equipment.Free((byte)itemUsage.dwParam))
                        {
                            if (twohand)
                                client.Equipment.Remove(5);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add505(item);
                            }
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.Send(client);
                        }
                        else
                        {
                            if (twohand)
                                client.Equipment.Remove(5);
                            client.Equipment.Remove((byte)itemUsage.dwParam);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add505(item);
                            }
                        }

                        if (!client.AlternateEquipment)
                        {
                            client.LoadItemStats(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            ClientEquip equips = new ClientEquip();
                            equips.DoEquips(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket();
                        }
                        else
                        {
                            ClientEquip equips = new ClientEquip(client);
                            //equips.DoEquips(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket2();
                        }

                        Database.ConquerItemTable.UpdateLocation(item, client);
                    }
                }
                else
                {
                    Interfaces.IConquerItem item = null;
                    client.Entity.AttackPacket = null;

                    if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
                    {
                        if (item.Suspicious)
                            return;

                        Positions pos = GetPositionFromID2(item.ID);
                        if (client.Entity.MapID == 2060)
                        {
                            if (pos == Positions.AltGarment)
                            {
                                return;
                            }
                        }
                        if (client.Entity.MapID == 7009)
                        {
                            if (pos == Positions.AltGarment)
                            {
                                return;
                            }
                        }
                        if (pos == Positions.Inventory)
                        {
                            UseItem(item, client);
                            return;
                        }
                        #region Sanity checks

                        bool can2hand = false;
                        bool can2wpn = false;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 75)
                            can2hand = true;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (!Equipable(item, client))
                            return;
                        if (ItemPosition2(item.ID) == 25)
                        {
                            itemUsage.dwParam = 25;
                            if (!can2hand && !can2wpn)
                                return;
                            if (client.Equipment.Free(24) || (client.Equipment.TryGetItem(24).ID / 1000 != 500 && IsArrow(item.ID)))
                                return;
                        }
                        if (ItemPosition2(item.ID) == 24)
                        {
                            if (itemUsage.dwParam == 25)
                                if (!can2hand || !can2wpn)
                                    return;
                        }
                        if (!((itemUsage.dwParam == 24 || itemUsage.dwParam == 25) && (ItemPosition2(item.ID) == 24 || ItemPosition2(item.ID) == 25)))
                        {
                            if (!IsAccessory(item.ID))
                                itemUsage.dwParam = ItemPosition2(item.ID);
                        }
                        bool twohand = IsTwoHand(item.ID);
                        if (!twohand && itemUsage.dwParam == 24)
                            if (!client.Equipment.Free(25))
                                if (client.Inventory.Count < 40)
                                {
                                    if (IsArrow(client.Equipment.TryGetItem(25).ID))
                                        client.Equipment.Remove(25);
                                    else
                                    {
                                        if (client.Equipment.TryGetItem(24) != null)
                                        {
                                            if (IsTwoHand(client.Equipment.TryGetItem(24).ID))
                                                client.Equipment.Remove(24);
                                        }
                                    }
                                }
                        #endregion

                        if (client.Map.ID == 1039)
                            client.Entity.AttackPacket = null;

                        item.Position = (ushort)itemUsage.dwParam;
                        if (ItemPosition2(item.ID) == 25 && !IsArrow(item.ID))
                        {
                            if (IsTwoHand(client.Equipment.TryGetItem(24).ID))
                            {
                                if (!client.Spells.ContainsKey(10311))//Perseverance
                                {
                                    client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                    return;
                                }
                            }
                        }

                        //Database.ConquerItemTable.ClearPosition(client.Entity.UID, (byte)itemUsage.dwParam);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                        if (client.Equipment.Free((byte)itemUsage.dwParam))
                        {
                            if (twohand)
                                client.Equipment.Remove(25);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add600(item);
                            }
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.Send(client);
                        }
                        else
                        {
                            if (twohand)
                                client.Equipment.Remove(25);
                            client.Equipment.Remove((byte)itemUsage.dwParam);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add600(item);
                            }
                        }
                        if (client.AlternateEquipment)
                        {
                            client.LoadItemStats2(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();

                            ClientEquip equips = new ClientEquip(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket2();
                        }
                        else
                        {

                        }
                        Database.ConquerItemTable.UpdateLocation(item, client);
                    }
                }
                client.LoadItemStats(client.Entity);
                client.CalculateStatBonus();
                client.CalculateHPBonus();
            }
            else
            {
                if (itemUsage.dwParam < 20)
                {

                    Interfaces.IConquerItem item = null;
                    client.Entity.AttackPacket = null;

                    if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
                    {
                        if (item.Suspicious)
                            return;

                        Positions pos = GetPositionFromID(item.ID);
                        if (client.Entity.MapID == 2060)
                        {
                            if (pos == Positions.Garment)
                            {
                                return;
                            }
                        }
                        if (client.Entity.MapID == 7009)
                        {
                            if (pos == Positions.Garment)
                            {
                                return;
                            }
                        }
                        if (pos == Positions.Inventory)
                        {
                            UseItem(item, client);
                            return;
                        }
                        #region Sanity checks

                        bool can2hand = false;
                        bool can2wpn = false;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 75)
                            can2hand = true;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (!Equipable(item, client))
                            return;
                        if (ItemPosition(item.ID) == 5)
                        {
                            itemUsage.dwParam = 5;
                            if (!can2hand && !can2wpn)
                                return;
                            if (client.Equipment.Free(4) || (client.Equipment.TryGetItem(4).ID / 1000 != 500 && IsArrow(item.ID)))
                                return;
                        }
                        if (ItemPosition(item.ID) == 4)
                        {
                            if (itemUsage.dwParam == 5)
                                if (!can2hand || !can2wpn)
                                    return;
                        }
                        if (!((itemUsage.dwParam == 4 || itemUsage.dwParam == 5) && (ItemPosition(item.ID) == 4 || ItemPosition(item.ID) == 5)))
                        {
                            if (!IsAccessory(item.ID))
                                itemUsage.dwParam = ItemPosition(item.ID);
                        }
                        bool twohand = IsTwoHand(item.ID);
                        if (!twohand && itemUsage.dwParam == 4)
                            if (!client.Equipment.Free(5))
                                if (client.Inventory.Count < 40)
                                {
                                    if (IsArrow(client.Equipment.TryGetItem(5).ID))
                                        client.Equipment.Remove(5);
                                    else
                                    {
                                        if (client.Equipment.TryGetItem(4) != null)
                                        {
                                            if (IsTwoHand(client.Equipment.TryGetItem(4).ID))
                                                client.Equipment.Remove(4);
                                        }
                                    }
                                }
                        #endregion

                        if (client.Map.ID == 1039)
                            client.Entity.AttackPacket = null;

                        item.Position = (ushort)itemUsage.dwParam;
                        if (ItemPosition(item.ID) == 5 && !IsArrow(item.ID))
                        {
                            if (IsTwoHand(client.Equipment.TryGetItem(4).ID))
                            {
                                if (!client.Spells.ContainsKey(10311))//Perseverance
                                {
                                    client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                    return;
                                }
                            }
                        }

                        //Database.ConquerItemTable.ClearPosition(client.Entity.UID, (byte)itemUsage.dwParam);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                        if (client.Equipment.Free((byte)itemUsage.dwParam))
                        {
                            if (twohand)
                                client.Equipment.Remove(5);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add505(item);
                            }
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.Send(client);
                        }
                        else
                        {
                            if (twohand)
                                client.Equipment.Remove(5);
                            client.Equipment.Remove((byte)itemUsage.dwParam);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add505(item);
                            }
                        }

                        if (!client.AlternateEquipment)
                        {
                            client.LoadItemStats(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            ClientEquip equips = new ClientEquip();
                            equips.DoEquips(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket();
                        }
                        else
                        {
                            client.LoadItemStats2(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            ClientEquip equips = new ClientEquip(client);
                            //equips.DoEquips(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket2();
                        }

                        Database.ConquerItemTable.UpdateLocation(item, client);
                    }
                }
                else
                {
                    Interfaces.IConquerItem item = null;
                    client.Entity.AttackPacket = null;

                    if (client.Inventory.TryGetItem(itemUsage.UID, out item) && client.Booth == null)
                    {
                        if (item.Suspicious)
                            return;

                        Positions pos = GetPositionFromID2(item.ID);
                        if (client.Entity.MapID == 2060)
                        {
                            if (pos == Positions.AltGarment)
                            {
                                return;
                            }
                        }
                        if (client.Entity.MapID == 7009)
                        {
                            if (pos == Positions.AltGarment)
                            {
                                return;
                            }
                        }
                        if (pos == Positions.Inventory)
                        {
                            UseItem(item, client);
                            return;
                        }
                        #region Sanity checks

                        bool can2hand = false;
                        bool can2wpn = false;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 75)
                            can2hand = true;
                        if (client.Entity.Class >= 11 && client.Entity.Class <= 15 || client.Entity.Class >= 51 && client.Entity.Class <= 55 || client.Entity.Class >= 61 && client.Entity.Class <= 65 || client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (client.Entity.Class >= 71 && client.Entity.Class <= 75)
                            can2wpn = true;
                        if (!Equipable(item, client))
                            return;
                        if (ItemPosition2(item.ID) == 25)
                        {
                            itemUsage.dwParam = 25;
                            if (!can2hand && !can2wpn)
                                return;
                            if (client.Equipment.Free(24) || (client.Equipment.TryGetItem(24).ID / 1000 != 500 && IsArrow(item.ID)))
                                return;
                        }
                        if (ItemPosition2(item.ID) == 24)
                        {
                            if (itemUsage.dwParam == 25)
                                if (!can2hand || !can2wpn)
                                    return;
                        }
                        if (!((itemUsage.dwParam == 24 || itemUsage.dwParam == 25) && (ItemPosition2(item.ID) == 24 || ItemPosition2(item.ID) == 25)))
                        {
                            if (!IsAccessory(item.ID))
                                itemUsage.dwParam = ItemPosition2(item.ID);
                        }
                        bool twohand = IsTwoHand(item.ID);
                        if (!twohand && itemUsage.dwParam == 24)
                            if (!client.Equipment.Free(25))
                                if (client.Inventory.Count < 40)
                                {
                                    if (IsArrow(client.Equipment.TryGetItem(25).ID))
                                        client.Equipment.Remove(25);
                                    else
                                    {
                                        if (client.Equipment.TryGetItem(24) != null)
                                        {
                                            if (IsTwoHand(client.Equipment.TryGetItem(24).ID))
                                                client.Equipment.Remove(24);
                                        }
                                    }
                                }
                        #endregion

                        if (client.Map.ID == 1039)
                            client.Entity.AttackPacket = null;

                        item.Position = (ushort)itemUsage.dwParam;
                        if (ItemPosition2(item.ID) == 25 && !IsArrow(item.ID))
                        {
                            if (IsTwoHand(client.Equipment.TryGetItem(24).ID))
                            {
                                if (!client.Spells.ContainsKey(10311))//Perseverance
                                {
                                    client.Send(new Message("You need to know Perseverance (Warrior Pure skill) to be able to wear 2-handed weapon and shield.", System.Drawing.Color.Red, Message.Talk));
                                    return;
                                }
                            }
                        }

                        //Database.ConquerItemTable.ClearPosition(client.Entity.UID, (byte)itemUsage.dwParam);
                        client.Inventory.Remove(item, Game.Enums.ItemUse.Move, true);
                        if (client.Equipment.Free((byte)itemUsage.dwParam))
                        {
                            if (twohand)
                                client.Equipment.Remove(25);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add600(item);
                            }
                            item.Mode = Game.Enums.ItemMode.Update;
                            item.Send(client);
                        }
                        else
                        {
                            if (twohand)
                                client.Equipment.Remove(25);
                            client.Equipment.Remove((byte)itemUsage.dwParam);
                            item.Position = (byte)itemUsage.dwParam;
                            if (!client.AlternateEquipment)
                            {
                                client.Equipment.Add(item);
                            }
                            else
                            {
                                client.Equipment.Add600(item);
                            }
                        }
                        if (client.AlternateEquipment)
                        {
                            client.LoadItemStats2(client.Entity);
                            client.CalculateStatBonus();
                            client.CalculateHPBonus();
                            ClientEquip equips = new ClientEquip(client);
                            client.Send(equips);
                            client.Equipment.UpdateEntityPacket2();
                        }
                        else
                        {

                        }
                        Database.ConquerItemTable.UpdateLocation(item, client);
                    }
                }
                client.LoadItemStats2(client.Entity);
                client.CalculateStatBonus();
                client.CalculateHPBonus();
            }
        }
        public static void UnequipItem(ItemUsage usage, Client.GameState client)
        {
            Positions pos = GetPositionFromID(usage.UID);
            if (client.Entity.MapID == 2060)
            {
                if (usage.dwParam == 9)
                {
                    return;
                }
            }
            if (client.Entity.MapID == 7009)
            {
                if (usage.dwParam == 9)
                {
                    return;
                }
            }
            if (client.Equipment.Remove((byte)usage.dwParam))
            {
                if (client.Map.ID == 1039)
                    client.Entity.AttackPacket = null;
                if (!client.AlternateEquipment)
                {
                    client.LoadItemStats(client.Entity);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();
                    ClientEquip equips = new ClientEquip();
                    equips.DoEquips(client);
                    client.Send(equips);
                    client.Equipment.UpdateEntityPacket();
                }
                else
                {
                    client.LoadItemStats2(client.Entity);
                    client.CalculateStatBonus();
                    client.CalculateHPBonus();

                    ClientEquip equips = new ClientEquip(client);
                    client.Send(equips);
                    client.Equipment.UpdateEntityPacket2();
                }
            }
        }

        static bool EquipPassLvlReq(Database.ConquerItemBaseInformation baseInformation, Client.GameState client)
        {
            if (client.Entity.Level < baseInformation.Level)
                return false;
            else
                return true;
        }
        static bool EquipPassRbReq(Database.ConquerItemBaseInformation baseInformation, Client.GameState client)
        {
            if (baseInformation.Level < 71 && client.Entity.Reborn > 0 && client.Entity.Level >= 70)
                return true;
            else
                return false;
        }
        static bool EquipPassStatsReq(Database.ConquerItemBaseInformation baseInformation, Client.GameState client)
        {
            if (client.Entity.Strength >= baseInformation.Strength && client.Entity.Agility >= baseInformation.Agility)
                return true;
            else
                return false;
        }
        static bool EquipPassJobReq(Database.ConquerItemBaseInformation baseInformation, Client.GameState client)
        {
            switch (baseInformation.Class)
            {
                #region Trojan
                case 10: if (client.Entity.Class <= 15 && client.Entity.Class >= 10) return true; break;
                case 11: if (client.Entity.Class <= 15 && client.Entity.Class >= 11) return true; break;
                case 12: if (client.Entity.Class <= 15 && client.Entity.Class >= 12) return true; break;
                case 13: if (client.Entity.Class <= 15 && client.Entity.Class >= 13) return true; break;
                case 14: if (client.Entity.Class <= 15 && client.Entity.Class >= 14) return true; break;
                case 15: if (client.Entity.Class == 15) return true; break;
                #endregion
                #region Warrior
                case 20: if (client.Entity.Class <= 25 && client.Entity.Class >= 20) return true; break;
                case 21: if (client.Entity.Class <= 25 && client.Entity.Class >= 21) return true; break;
                case 22: if (client.Entity.Class <= 25 && client.Entity.Class >= 22) return true; break;
                case 23: if (client.Entity.Class <= 25 && client.Entity.Class >= 23) return true; break;
                case 24: if (client.Entity.Class <= 25 && client.Entity.Class >= 24) return true; break;
                case 25: if (client.Entity.Class == 25) return true; break;
                #endregion
                #region Archer
                case 40: if (client.Entity.Class <= 45 && client.Entity.Class >= 40) return true; break;
                case 41: if (client.Entity.Class <= 45 && client.Entity.Class >= 41) return true; break;
                case 42: if (client.Entity.Class <= 45 && client.Entity.Class >= 42) return true; break;
                case 43: if (client.Entity.Class <= 45 && client.Entity.Class >= 43) return true; break;
                case 44: if (client.Entity.Class <= 45 && client.Entity.Class >= 44) return true; break;
                case 45: if (client.Entity.Class == 45) return true; break;
                #endregion
                #region Ninja
                case 50: if (client.Entity.Class <= 55 && client.Entity.Class >= 50) return true; break;
                case 51: if (client.Entity.Class <= 55 && client.Entity.Class >= 51) return true; break;
                case 52: if (client.Entity.Class <= 55 && client.Entity.Class >= 52) return true; break;
                case 53: if (client.Entity.Class <= 55 && client.Entity.Class >= 53) return true; break;
                case 54: if (client.Entity.Class <= 55 && client.Entity.Class >= 54) return true; break;
                case 55: if (client.Entity.Class == 55) return true; break;
                #endregion
                #region Monk
                case 60: if (client.Entity.Class <= 65 && client.Entity.Class >= 60) return true; break;
                case 61: if (client.Entity.Class <= 65 && client.Entity.Class >= 61) return true; break;
                case 62: if (client.Entity.Class <= 65 && client.Entity.Class >= 62) return true; break;
                case 63: if (client.Entity.Class <= 65 && client.Entity.Class >= 63) return true; break;
                case 64: if (client.Entity.Class <= 65 && client.Entity.Class >= 64) return true; break;
                case 65: if (client.Entity.Class == 65) return true; break;
                #endregion
                #region Pirate
                case 70: if (client.Entity.Class <= 75 && client.Entity.Class >= 70) return true; break;
                case 71: if (client.Entity.Class <= 75 && client.Entity.Class >= 71) return true; break;
                case 72: if (client.Entity.Class <= 75 && client.Entity.Class >= 72) return true; break;
                case 73: if (client.Entity.Class <= 75 && client.Entity.Class >= 73) return true; break;
                case 74: if (client.Entity.Class <= 75 && client.Entity.Class >= 74) return true; break;
                case 75: if (client.Entity.Class == 75) return true; break;
                #endregion
                #region Taoist
                case 190: if (client.Entity.Class >= 100) return true; break;
                #endregion
                case 0: return true;
                default: return false;
            }
            return false;
        }
        static bool EquipPassSexReq(Database.ConquerItemBaseInformation baseInformation, Client.GameState client)
        {
            int ClientGender = client.Entity.Body % 10000 < 1005 ? 1 : 2;
            if (baseInformation.Gender == 2 && ClientGender == 2)
                return true;
            if (baseInformation.Gender != 2)
                return true;
            return false;
        }
        static bool Equipable(Interfaces.IConquerItem item, Client.GameState client)
        {
            Database.ConquerItemBaseInformation BaseInformation = new Database.ConquerItemInformation(item.ID, item.Plus).BaseInformation;
            if (BaseInformation.Gender != 0)
            {
                if (BaseInformation.Gender == 1 && client.Entity.Body == 2001 || BaseInformation.Gender == 1 && client.Entity.Body == 2002)
                {
                    return false;
                }
                if (BaseInformation.Gender == 2 && client.Entity.Body == 1003 || BaseInformation.Gender == 2 && client.Entity.Body == 1004)
                {
                    return false;
                }
            }
            bool pass = false;
            if (!EquipPassSexReq(BaseInformation, client))
                return false;
            if (EquipPassRbReq(BaseInformation, client))
                pass = true;
            else
                if (EquipPassJobReq(BaseInformation, client)) if (EquipPassStatsReq(BaseInformation, client)) if (EquipPassLvlReq(BaseInformation, client)) pass = true;
            if (!pass)
                return false;

            if (client.Entity.Reborn > 0)
            {
                Positions pos = GetPositionFromID(item.ID);
                if (client.Entity.Level >= 70 && BaseInformation.Level <= 70 && pos != Positions.Left)
                {
                    return pass;
                }
                else
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            else
            {
                if (!IsArrow(item.ID))
                {
                    Interfaces.IProf proficiency = null;
                    client.Proficiencies.TryGetValue((ushort)(item.ID / 1000), out proficiency);
                    if (proficiency != null)
                    {
                        if (proficiency.Level >= BaseInformation.Proficiency)
                            pass = true;
                        else
                            pass = false;
                    }
                }
            }
            return pass;
        }

        #endregion
        #region Chat
        static void Chat(Message message, Client.GameState client)
        {
            //Console.WriteLine("[" + client.Entity.Name + "][Chat] " + message.__Message);
            if (!CheckCommand(message, client))
            {
                if (message.ChatType != Message.Service)
                {
                    if (client.ChatBanned)
                        if (DateTime.Now > client.ChatBanTime.AddMinutes(client.ChatBanLasts))
                            client.ChatBanned = false;
                        else
                        {
                            int minutes = (int)new TimeSpan((client.ChatBanTime.AddMinutes(client.ChatBanLasts) - DateTime.Now).Ticks).TotalMinutes;
                            client.Send(new Message("You are banned from chat. You have to wait: " + minutes + " minutes before you can speak again!", System.Drawing.Color.Green, Message.Talk));
                            return;
                        }
                }
                if (client.Entity.Name == message._From)
                {
                    switch (message.ChatType)
                    {
                        case Message.HawkMessage:
                            {
                                if (client.Booth != null)
                                {
                                    client.Booth.HawkMessage = message;
                                    client.SendScreen(message, true);
                                }
                                break;
                            }
                        case Message.Talk:
                            {
                                client.SendScreen(message, false);
                                break;
                            }
                        case Message.Whisper:
                            {
                                foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                                {
                                    if (pClient != null)
                                    {
                                        if (pClient.Entity.Name == message._To)
                                        {
                                            message.Mesh = client.Entity.Mesh;
                                            pClient.Send(message);
                                            if (client.Account.State == Database.AccountTable.AccountState.GameMaster)
                                            {
                                                #region msglog
                                                var dt = DateTime.Now;
                                                string date = dt.Year + "-" + dt.Month + "//";
                                                string datess = +dt.Day + "//";
                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\msglog"))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog");

                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + ""))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "");
                                                if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt"))
                                                    File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt");


                                                File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt",
                        File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt") +
                        "\r\n" + client.Entity.Name + " Talk to : [" + pClient.Entity.Name + "] Message: [" + message.__Message + "]");
                                                #endregion
                                            }
                                            if (client.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                            {
                                                #region msglog
                                                var dt = DateTime.Now;
                                                string date = dt.Year + "-" + dt.Month + "//";
                                                string datess = +dt.Day + "//";
                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog);

                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + ServerBase.Constants.Unhandledgmlog + "\\msglog"))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog");

                                                if (!Directory.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + ""))
                                                    Directory.CreateDirectory(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "");
                                                if (!File.Exists(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt"))
                                                    File.CreateText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt");


                                                File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt",
                        File.ReadAllText(System.Windows.Forms.Application.StartupPath + "\\" + ServerBase.Constants.Unhandledgmlog + "\\msglog\\" + date + "\\" + dt.Day + ".txt") +
                        "\r\n" + client.Entity.Name + " Talk to : [" + pClient.Entity.Name + "] Message: [" + message.__Message + "]");
                                                #endregion
                                            }
                                            return;
                                        }
                                    }
                                }
                                foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                                {
                                    if (friend.Name == message._To)
                                    {
                                        message.__Message = message.__Message.Replace("'", "¹");
                                        client.OnMessageBoxEventParams = new object[3];
                                        client.OnMessageBoxEventParams[0] = client.Entity.UID;
                                        client.OnMessageBoxEventParams[1] = friend.ID;
                                        client.OnMessageBoxEventParams[2] = Console.TimeStamp() + message.__Message;
                                        client.OnMessageBoxOK =
                                            delegate
                                            {
                                                Database.KnownPersons.UpdateMessageOnFriend(Convert.ToUInt32(client.OnMessageBoxEventParams[0]), Convert.ToUInt32(client.OnMessageBoxEventParams[1]), Convert.ToString(client.OnMessageBoxEventParams[2]));
                                                client.Send(new Message("Message sent!", System.Drawing.Color.Green, Message.TopLeft));
                                            };
                                        client.OnMessageBoxCANCEL =
                                            delegate
                                            {
                                                client.OnMessageBoxEventParams = new object[0];
                                            };
                                        client.Send(new NpcReply(NpcReply.MessageBox, "To " + friend.Name + ": \r\n" + message.__Message + "\r\n\r\nSend? (It will replace other messages.)"));
                                        return;
                                    }
                                }
                                client.Send(new Message("The player is not online.", System.Drawing.Color.Orange, Message.Service));
                                break;
                            }
                        case Message.Service:
                            {
                                foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                                {
                                    if (pClient.Account.State == Database.AccountTable.AccountState.GameMaster || pClient.Account.State == Database.AccountTable.AccountState.ProjectManager)
                                    {
                                        message.ChatType = Message.Talk;
                                        string _Message = "Service-> " + client.Entity.Name + " needs your help. Respond to him/her right now!!!";
                                        message.__Message = _Message;
                                        pClient.Send(message);
                                        return;
                                    }
                                }
                                break;
                            }
                        case Message.World:
                            {
                                if (client.Entity.Level >= 70 || client.Entity.Reborn != 0)
                                {
                                    foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient != null)
                                        {
                                            if (pClient.Entity.UID != client.Entity.UID)
                                                message._From = client.Entity.Name;//kimozo
                                            pClient.Send(message);
                                        }
                                    }
                                }
                                break;
                            }
                        case Message.Guild:
                            {
                                if (client.Guild != null)
                                    client.Guild.SendGuildMessage(message);
                                break;
                            }
                        case Message.Team:
                            {
                                if (client.Team != null)
                                {
                                    foreach (Client.GameState Client in client.Team.Teammates)
                                    {
                                        if (client.Entity.UID != Client.Entity.UID)
                                            Client.Send(message);
                                    }
                                }
                                break;
                            }
                        case Message.Friend:
                            {
                                foreach (Game.ConquerStructures.Society.Friend friend in client.Friends.Values)
                                {
                                    if (friend.IsOnline)
                                        friend.Client.Send(message);
                                }
                                break;
                            }
                        default:
                            {
                                client.SendScreen(message, true);
                                break;
                            }

                    }
                }
                else
                {
                    client.Account.State = Database.AccountTable.AccountState.Cheat;
                    client.Account.Savekimo();
                    client.Disconnect();
                }
            }
        }
        public static bool CheckCommand2(Message message, Client.GameState client)
        {
            try
            {
                if (message.__Message.StartsWith("@"))
                {
                    string Message = message.__Message.Substring(1).ToLower();
                    string Mess = message.__Message.Substring(1);
                    string[] Data = Message.Split(' ');

                    return true;
                }
                return false;
            }
            catch { client.Send(new Message("Impossible to handle this command", System.Drawing.Color.BurlyWood, Message.TopLeft)); return false; }
        }
        static bool CheckCommand(Message message, Client.GameState client)
        {
            try
            {
                if (message.__Message.StartsWith("@"))
                {
                    string Message = message.__Message.Substring(1).ToLower();
                    string Mess = message.__Message.Substring(1);
                    string[] Data = Message.Split(' ');
                    #region GMs PMs
                    if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.ProjectManager || client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                    {
                        switch (Data[0])
                        {

                            case "addcps":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            if (!Game.PrizeNPC.PrizeNpcInformations.ContainsKey(pClient.Entity.UID))
                                            {
                                                PhoenixProject.Game.PrizeNPC.PrizeNpcInfo info = new PhoenixProject.Game.PrizeNPC.PrizeNpcInfo();
                                                info.Owner = pClient.Entity.UID;
                                                info.type = 1;
                                                info.amount = uint.Parse(Data[2]);
                                                info.itemid = 0;
                                                PhoenixProject.Game.PrizeNPC.PrizeNpcInformations.Add(info.Owner, info);
                                                PhoenixProject.Database.MySqlCommand cmd = new PhoenixProject.Database.MySqlCommand(PhoenixProject.Database.MySqlCommandType.INSERT);
                                                cmd.Insert("prizenpc").Insert("Owner", client.Entity.UID).Insert("type", info.type).Insert("Amount", info.amount).Insert("itemid", info.itemid);
                                                cmd.Execute();
                                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Congratulation you have got an Donation Prize " + info.amount + " Cps go to PrizeNpc to Claim It?");
                                                npc.OptionID = 255;
                                                pClient.Send(npc.ToArray());

                                                Network.GamePackets.NpcReply npc2 = new Network.GamePackets.NpcReply(6, "" + pClient.Entity.Name + " has Recived " + info.amount + " Cps");
                                                npc2.OptionID = 255;
                                                client.Send(npc2.ToArray());

                                                Console.WriteLine("" + pClient.Entity.Name + " has got Donation Prize Cps " + info.amount + "");
                                            }
                                            else
                                            {
                                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry the player already have prize not claimed yet");
                                                npc.OptionID = 255;
                                                client.Send(npc.ToArray());
                                            }
                                        }
                                    }
                                    break;
                                }
                            case "who":
                                {
                                    var varr = ServerBase.Kernel.GamePool.Values.GetEnumerator();
                                    varr.MoveNext();
                                    int COunt = ServerBase.Kernel.GamePool.Count;
                                    for (uint x = 0;
                                        x < COunt;
                                        x++)
                                    {
                                        if (x >= COunt) break;

                                        Client.GameState pClient = (varr.Current as Client.GameState);

                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            client.Send(new Message("[Whois " + pClient.Entity.Name + "]", System.Drawing.Color.Gold, GamePackets.Message.FirstRightCorner));
                                            client.Send(new Message("Username: " + pClient.Account.Username, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Password: " + pClient.Account.Password, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("IP: " + pClient.Account.IP, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("CPs: " + pClient.Entity.ConquerPoints, System.Drawing.Color.Gold, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Money: " + pClient.Entity.Money, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Class: " + pClient.Entity.Class, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("UID: " + pClient.Entity.UID, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Level: " + pClient.Entity.Level, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Strength: " + pClient.Entity.Strength, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Agility: " + pClient.Entity.Agility, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Vitality: " + pClient.Entity.Vitality, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Spirit: " + pClient.Entity.Spirit, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Atributes: " + pClient.Entity.Atributes, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Hitpoints: " + pClient.Entity.Hitpoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("PKPoints: " + pClient.Entity.PKPoints, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("VIPLevel: " + pClient.Entity.VIPLevel, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                            client.Send(new Message("Map: [" + pClient.Entity.MapID + "] " + pClient.Entity.X + "," + pClient.Entity.Y, System.Drawing.Color.Green, GamePackets.Message.ContinueRightCorner));
                                        }

                                        varr.MoveNext();
                                    }
                                    break;
                                }
                            case "additem":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            if (!Game.PrizeNPC.PrizeNpcInformations.ContainsKey(pClient.Entity.UID))
                                            {
                                                PhoenixProject.Game.PrizeNPC.PrizeNpcInfo info = new PhoenixProject.Game.PrizeNPC.PrizeNpcInfo();
                                                info.Owner = pClient.Entity.UID;
                                                info.type = 2;
                                                info.amount = 0;
                                                info.itemid = uint.Parse(Data[2]);
                                                PhoenixProject.Game.PrizeNPC.PrizeNpcInformations.Add(info.Owner, info);

                                                PhoenixProject.Database.MySqlCommand cmd = new PhoenixProject.Database.MySqlCommand(PhoenixProject.Database.MySqlCommandType.INSERT);
                                                cmd.Insert("prizenpc").Insert("Owner", client.Entity.UID).Insert("type", info.type).Insert("Amount", info.amount).Insert("itemid", info.itemid);
                                                cmd.Execute();
                                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Congratulation you have got an Donation item go to PrizeNpc to Claim It?");
                                                npc.OptionID = 255;
                                                pClient.Send(npc.ToArray());

                                                Network.GamePackets.NpcReply npc2 = new Network.GamePackets.NpcReply(6, "" + pClient.Entity.Name + " has Recived item id: " + info.itemid + "");
                                                npc2.OptionID = 255;
                                                client.Send(npc2.ToArray());
                                                Console.WriteLine("" + pClient.Entity.Name + " has got Donation Prize item " + info.itemid + "");
                                            }
                                            else
                                            {
                                                Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Sorry the player already have prize not claimed yet");
                                                npc.OptionID = 255;
                                                client.Send(npc.ToArray());
                                            }
                                        }
                                    }
                                    break;
                                }
                            case "summon":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "scroll":
                                {
                                    if (client.Entity.MapID == 700)
                                        break;
                                    switch (Data[1].ToLower())
                                    {
                                        case "tc": client.Entity.Teleport(1002, 430, 380); break;
                                        case "pc": client.Entity.Teleport(1011, 195, 260); break;
                                        case "ac":
                                        case "am": client.Entity.Teleport(1020, 566, 563); break;
                                        case "dc": client.Entity.Teleport(1000, 500, 645); break;
                                        case "bi": client.Entity.Teleport(1015, 723, 573); break;
                                        case "pka": client.Entity.Teleport(1005, 050, 050); break;
                                        case "ma": client.Entity.Teleport(1036, 211, 196); break;
                                        case "ja": client.Entity.Teleport(6000, 100, 100); break;
                                    }
                                    break;
                                }

                            case "test":
                                {
                                    byte IDs = byte.Parse(Data[1]);
                                    Data data = new Data(true);
                                    data.UID = client.Entity.UID;
                                    data.dwParam = 2;
                                    data.ID = IDs;//157
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            case "jar":
                                {
                                    ConquerItem item2 = new ConquerItem(true);
                                    item2.ID = 750000;
                                    //item2.Color =  PhoenixProject.Game.Enums.Color.Blue;
                                    item2.Durability = 0;
                                    item2.MaximDurability = 2;
                                    client.Inventory.Add(item2, PhoenixProject.Game.Enums.ItemUse.CreateAndAdd);
                                    break;
                                }
                            case "id":
                                {

                                    byte[] data = new byte[24 + 8];
                                    Writer.WriteUInt32(24, 0, data);
                                    Writer.WriteUInt32(1010, 2, data);
                                    Writer.WriteUInt32(client.Entity.UID, 4, data);
                                    Writer.WriteUInt32(1, 7, data);
                                    Writer.WriteUInt32(client.Entity.UID, 8, data);
                                    Writer.WriteUInt32(client.Entity.UID, 12, data);
                                    Writer.WriteUInt32(client.Entity.UID, 16, data);
                                    Writer.WriteUInt32(1, 19, data);
                                    Writer.WriteUInt32(7, 20, data);
                                    Writer.WriteUInt32(121, 22, data);

                                    // Writer.WriteUInt32(9828, 12, data);
                                    client.Send(data);
                                    // client.Entity.CountryFlag = uint.Parse(Data[1]);
                                    break;
                                }
                            case "itemeffect":
                                {
                                    Kernel.boundID = int.Parse(Data[1]);
                                    Kernel.boundIDEnd = int.Parse(Data[2]);
                                    break;
                                }
                            case "kiko":
                                {
                                    string[] Strings = new string[2];

                                    Strings[0] = (Data[1]);
                                    Strings[1] = "1";
                                    _String SoundPacket = new _String(true);
                                    SoundPacket.UID = client.Entity.UID;
                                    SoundPacket.Type = 20;
                                    SoundPacket.TextsCount = 2;
                                    SoundPacket.Texts.Add(Strings[0]);
                                    SoundPacket.Texts.Add(Strings[1]);
                                    client.Send(SoundPacket);
                                    break;
                                    //client.Entity.ActualMyTypeFlower = 30010102;
                                    // break;
                                }
                            case "ss":
                                {

                                    byte[] data = new byte[80 + 8];
                                    Writer.WriteUInt32(80, 0, data);
                                    Writer.WriteUInt32(1151, 2, data);
                                    Writer.WriteUInt32(2, 4, data);
                                    Writer.WriteUInt32(1, 8, data);
                                    Writer.WriteUInt32(1, 16, data);
                                    Writer.WriteUInt32(227, 32, data);
                                    Writer.WriteUInt32(client.Entity.UID, 40, data);
                                    Writer.WriteUInt32(client.Entity.UID, 44, data);
                                    Writer.WriteString(client.Entity.Name, 48, data);
                                    Writer.WriteString(client.Entity.Name, 64, data);
                                    client.Send(data);
                                    byte[] data2 = new byte[80 + 8];
                                    Writer.WriteUInt32(80, 0, data2);
                                    Writer.WriteUInt32(1151, 2, data2);
                                    Writer.WriteUInt32(2, 4, data2);
                                    Writer.WriteUInt32(2, 8, data2);
                                    Writer.WriteUInt32(1, 16, data2);
                                    Writer.WriteUInt32(282, 32, data2);
                                    Writer.WriteUInt32(client.Entity.UID, 40, data2);
                                    Writer.WriteUInt32(client.Entity.UID, 44, data2);
                                    Writer.WriteString(client.Entity.Name, 48, data2);
                                    Writer.WriteString(client.Entity.Name, 64, data2);
                                    client.Send(data2);
                                    // client.Send(new Message("Test Channel Mesaage!", System.Drawing.Color.Red, uint.Parse(Data[1])));
                                    //client.Entity.ClanSharedBp = 4;
                                    // Game.KimoCarnaval.Load();
                                    /*NpcInitial initial = new NpcInitial
                                    {
                                        Identifier = 1,
                                        Lookface = (num != 0x2008) ? ((ushort)0x1a) : ((ushort)3),
                                        Mode = PhoenixProject.Network.GamePackets.NpcInitial.NpcModes.Place,
                                        Furniture = num
                                    };
                                    client.Send((byte[])initial);*/
                                    break;
                                }
                            case "600":
                                {
                                    Game.Map Map = ServerBase.Kernel.Maps[client.Entity.MapID];
                                    Network.GamePackets.FloorItem floorItem = new Network.GamePackets.FloorItem(true);

                                    floorItem.MapObjType = Game.MapObjectType.Item;
                                    floorItem.ItemID = uint.Parse(Data[1]);
                                    floorItem.MapID = client.Entity.MapID;

                                    floorItem.X = ushort.Parse(Data[2]);
                                    floorItem.Y = ushort.Parse(Data[3]);
                                    floorItem.Type = 10;
                                    floorItem.OnFloor = Time32.Now.AddHours(24);
                                    floorItem.UID = Network.GamePackets.FloorItem.FloorUID.Next;
                                    while (Map.Npcs.ContainsKey(floorItem.UID))
                                        floorItem.UID = Network.GamePackets.FloorItem.FloorUID.Next;
                                    Map.AddFloorItem(floorItem);
                                    client.SendScreenSpawn(floorItem, true);
                                    client.Effect = true;
                                    /* _String str = new _String(true);
                                     str.UID = client.Entity.UID;
                                     str.TextsCount = 2;
                                     str.Type = _String.Sound;
                                     str.Texts.Add("sound");
                                     str.Texts.Add("gethp.wav");
                                     client.Send(str);*/

                                    // client.Entity.TitlePacket.dwParam2 = (byte)PhoenixProject.Game.Tournaments.top_typ.GoldenRacer;
                                    break;
                                }
                            case "quiz":
                                {
                                    //PhoenixProject.Game.ConquerStructures.QuizShow.Start();
                                    // client.Send(GamePackets.QuizInfo.tempQuestionBuffer());
                                    //Game.ConquerStructures.QuizShow.Start();
                                    Game.ConquerStructures.QuizShow.Start2();
                                    Program.QuizStamp = Time32.Now;
                                    break;
                                }
                            case "me":
                                {
                                    /* MessageTick m = new MessageTick();
                                     m.Identifier = client.Entity.UID;
                                     m.Response = client.Entity.UID;
                                     client.Send(m);*/

                                    MapStatus mbox = new MapStatus();
                                    mbox.BaseID = 1002;
                                    client.Send(mbox);
                                    break;
                                }
                            case "quiz2":
                                {
                                    //PhoenixProject.Game.ConquerStructures.QuizShow.Start();
                                    // client.Send(GamePackets.QuizInfo.tempQuestionBuffer());
                                    //Game.ConquerStructures.QuizShow.Start();
                                    Game.ConquerStructures.QuizShow.Stop();
                                    break;
                                }
                            case "q":
                                {
                                    //PhoenixProject.Game.ConquerStructures.QuizShow.Start();
                                    // client.Send(GamePackets.QuizInfo.tempQuestionBuffer());
                                    //Game.ConquerStructures.QuizShow.Start();
                                    client.Send(GamePackets.QuizInfo.tempQuestionBuffer());
                                    break;
                                }
                            case "team":
                                {
                                    {
                                        Game.KimoSkillWar.Started = true;
                                        Game.KimoSkillWar.SignUP = true;

                                    }
                                    break;
                                }
                            case "geartest":
                                {
                                    //181315 515black
                                    uint UID = 92000;
                                    PhoenixProject.Interfaces.IConquerItem newItem = new PhoenixProject.Network.GamePackets.ConquerItem(true);
                                    newItem.ID = 181825;
                                    newItem.UID = UID;
                                    newItem.Durability = 1000;
                                    newItem.MaximDurability = 1000;
                                    newItem.Position = 9;
                                    //client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    client.Equipment.Remove(9);
                                    if (client.Equipment.Objects[8] != null)
                                        client.Equipment.Objects[8] = null;
                                    client.Equipment.Add(newItem);
                                    newItem.Mode = PhoenixProject.Game.Enums.ItemMode.Update;
                                    newItem.Send(client);
                                    ClientEquip equips = new ClientEquip();
                                    equips.DoEquips(client);
                                    client.Send(equips);
                                    client.Equipment.UpdateEntityPacket();
                                    break;

                                }
                            case "quarantine":
                                {
                                    //542363
                                    PhoenixProject.Game.ConquerStructures.Quarantine.Started = true;
                                    break;
                                }
                            case "test2":
                                {
                                    client.Entity.RemoveFlag(ulong.Parse(Data[1]));
                                    break;
                                }
                            case "arrest":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(6004, 30, 74);
                                        }
                                    }
                                    break;
                                }

                            case "pkp":
                                {
                                    client.Entity.PKPoints = ushort.Parse(Data[1]);

                                    break;
                                }
                            case "dropevent":
                                {

                                    Interfaces.IConquerItem Item = null;

                                    #region Get Item
                                    string ItemName = Data[1];
                                    bool SpecialItem = false;
                                    uint SpecialID = 0;
                                    if (ItemName.Contains("cp") || ItemName.Contains("met") || ItemName.Contains("db") || ItemName.Contains("stone") || ItemName.Contains("soul"))
                                    {
                                        if (ItemName.Contains("cp"))
                                            SpecialID = 729911;
                                        else if (ItemName.Contains("db"))
                                            SpecialID = 1088000;
                                        else if (ItemName.Contains("met"))
                                            SpecialID = 1088001;
                                        else if (ItemName.Contains("stone"))
                                            SpecialID = 730008;
                                        else if (ItemName.Contains("Soul"))
                                            SpecialID = 800110;
                                        SpecialItem = true; goto PrepareDrop;
                                    }
                                    if (ItemName.ToLower() == "exp")
                                    {
                                        for (int c = 0; c < client.Screen.Objects.Count; c++)
                                        {
                                            if (c >= client.Screen.Objects.Count)
                                                break;
                                            Interfaces.IMapObject ClientObj = client.Screen.Objects[c];
                                            if (ClientObj != null)
                                            {
                                                if (ClientObj is Game.Entity)
                                                {
                                                    if (ClientObj.MapObjType == PhoenixProject.Game.MapObjectType.Player)
                                                    {
                                                        ClientObj.Owner.IncreaseExperience(ClientObj.Owner.ExpBall, false);
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                    if (Data.Length > 2)
                                    {
                                        switch (Data[3].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (PhoenixProject.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                    break;
                                                }
                                        }
                                    }
                                    Database.ConquerItemBaseInformation CIBI = null;
                                    foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                    {
                                        if (infos.Name.ToLower() == ItemName.ToLower() && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                        {
                                            CIBI = infos;
                                        }
                                        else
                                        {
                                            if (infos.Name.ToLower() == ItemName.ToLower())
                                                CIBI = infos;
                                        }
                                    }
                                    if (CIBI == null)
                                        break;
                                    Item = new GamePackets.ConquerItem(true);
                                    Item.ID = CIBI.ID;
                                    Item.Durability = CIBI.Durability;
                                    Item.MaximDurability = CIBI.Durability;
                                    if (Data.Length > 3)
                                        Item.Plus = byte.Parse(Data[4]);
                                    #endregion

                                PrepareDrop:
                                    {
                                        if (Item != null || SpecialItem)
                                        {
                                            //dropevent Name Quality
                                            for (int i = 0; i < int.Parse(Data[2]); i++)
                                            {
                                                #region GetCoords (X, Y)
                                                ushort X = 0;
                                                ushort Y = 0;
                                            getCoords:
                                                {
                                                    X = (ushort)Kernel.Random.Next(client.Entity.X - 20, client.Entity.X + 20);
                                                    Y = (ushort)Kernel.Random.Next(client.Entity.Y - 20, client.Entity.Y + 20);
                                                }
                                                while (!client.Map.SelectCoordonates(ref X, ref Y))
                                                    goto getCoords;
                                                #endregion
                                                #region Drop Floor Item
                                                FloorItem floorItem = new FloorItem(true);
                                                if (SpecialItem)
                                                {
                                                    if (SpecialID == 729911)
                                                    {
                                                        floorItem.ValueType = Network.GamePackets.FloorItem.FloorValueType.ConquerPoints;
                                                        floorItem.Value = 20;
                                                    }
                                                    floorItem.ItemID = SpecialID;
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.ID = SpecialID;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }

                                                }
                                                else
                                                {
                                                    floorItem.Item = new ConquerItem(true);
                                                    floorItem.Item.Color = Item.Color;
                                                    floorItem.Item.Durability = Item.Durability;
                                                    floorItem.Item.ID = Item.ID;
                                                    floorItem.Item.Mode = Game.Enums.ItemMode.Default;
                                                    floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                    floorItem.UID = floorItem.Item.UID;
                                                    floorItem.Item.MobDropped = true;
                                                    floorItem.ItemColor = Item.Color;
                                                    floorItem.ItemID = Item.ID;
                                                    while (client.Map.Npcs.ContainsKey(floorItem.Item.UID))
                                                    {
                                                        floorItem.Item.UID = FloorItem.FloorUID.Next;
                                                        floorItem.UID = FloorItem.FloorUID.Next;
                                                    }
                                                }

                                                floorItem.MapID = client.Map.ID;
                                                floorItem.MapObjType = Game.MapObjectType.Item;
                                                floorItem.X = X;
                                                floorItem.Y = Y;
                                                floorItem.Type = FloorItem.Drop;
                                                floorItem.OnFloor = Time32.Now;
                                                client.SendScreenSpawn(floorItem, true);
                                                client.Map.AddFloorItem(floorItem);
                                            }
                                        }
                                                #endregion
                                    }
                                    break;
                                }
                            case "testtitle":
                                {
                                    TitlePacket title = new TitlePacket(byte.Parse(Data[1]) == 1);
                                    title.UID = client.Entity.UID;
                                    title.Title = byte.Parse(Data[2]);
                                    title.Type = byte.Parse(Data[3]);
                                    title.dwParam = byte.Parse(Data[4]);
                                    title.dwParam2 = byte.Parse(Data[5]);
                                    client.Send(title);
                                    break;
                                }
                            case "resetvote":
                                {
                                    Kernel.VotePoolUid.Clear();
                                    Kernel.VotePool.Clear();
                                    Database.EntityTable.DeletVotes();
                                    break;
                                }
                            case "invite":
                                {
                                    Network.GamePackets.NpcReply npc = new Network.GamePackets.NpcReply(6, "Weekly has Started! You Wana Join?");
                                    npc.OptionID = 247;
                                    //npc.times = 10;
                                    client.Send(npc.ToArray());
                                    client.Entity.InviteSendStamp = Time32.Now;
                                    client.Entity.invite = true;
                                    break;
                                }
                            case "bo7sen":
                                {


                                    PhoenixProject.Network.GamePackets.Data Datas = new PhoenixProject.Network.GamePackets.Data(true);
                                    Datas.UID = client.Entity.UID;
                                    Datas.ID = 126;
                                    Datas.dwParam = uint.Parse(Data[1]);
                                    Datas.wParam1 = client.Entity.X;
                                    Datas.wParam2 = client.Entity.Y;
                                    client.Send(Datas);

                                    break;
                                }
                            case "ww":
                                {
                                    Program.kimo = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "halo":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.MagicDefender);
                                    break;
                                }
                            case "halo2":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo2);

                                    break;
                                }
                            case "halo3":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo3);
                                    break;
                                }
                            case "halo4":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo4);

                                    break;
                                }
                            case "halo29":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo29);
                                    break;
                                }
                            case "halo30":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo30);

                                    break;
                                }
                            case "halo31":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo31);
                                    break;
                                }
                            case "halo32":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo32);

                                    break;
                                }
                            case "halo33":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo33);
                                    break;
                                }
                            case "halo34":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo34);

                                    break;
                                }
                            case "halo35":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo35);
                                    break;
                                }
                            case "halo36":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo36);

                                    break;
                                }
                            case "halo37":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo37);
                                    break;
                                }
                            case "halo38":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo38);

                                    break;
                                }
                            case "halo39":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo39);
                                    break;
                                }
                            case "halo40":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo40);
                                    break;
                                }
                            case "halo41":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo41);
                                    break;
                                }
                            case "halo42":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo42);
                                    break;
                                }
                            case "halo43":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo43);
                                    break;
                                }
                            case "halo44":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo44);
                                    break;
                                }
                            case "halo45":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo45);
                                    break;
                                }
                            case "halo46":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo46);

                                    break;
                                }
                            case "halo47":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo47);
                                    break;
                                }
                            case "halo48":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo48);
                                    break;
                                }
                            case "halo49":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo49);
                                    break;
                                }
                            case "halo50":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo50);
                                    break;
                                }
                            case "halo51":
                                {
                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo51);
                                    break;
                                }
                            case "halo52":
                                {
                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo52);

                                    break;
                                }
                            case "halo53":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo53);
                                    break;
                                }
                            case "halo54":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo54);

                                    break;
                                }
                            case "halo55":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo55);
                                    break;
                                }
                            case "halo56":
                                {

                                    //client.Entity.StatusFlag2 = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo56);

                                    break;
                                }
                            case "halo57":
                                {

                                    // client.Entity.StatusFlag = 0;
                                    client.Entity.AddFlag3(GamePackets.Update.Flags3.kimo57);
                                    break;
                                }

                            case "lottery1":
                                {



                                    break;
                                }
                            case "bbs":
                                {

                                    Console.WriteLine(" " + client.Entity.BattlePower + "");
                                    break;
                                }
                            case "lottery2":
                                {



                                    uint randprize = (uint)PhoenixProject.ServerBase.Kernel.Random.Next(1, (int)Database.DROP_SOULS.Count_Jar);
                                    //Database.Monster.Souls[randsouls].item_id
                                    uint ItemID = ServerBase.Kernel.JarItem[randprize].item_id;
                                    client.Inventory.Add(ItemID, 0, 1);
                                    ServerBase.Kernel.SendWorldMessage(new Message("Congratulations, " + client.Entity.Name + " has finished CloudSaint Jar Quest and Obtained " + Database.ConquerItemInformation.BaseInformations[ItemID].Name + "  !", System.Drawing.Color.Red, Network.GamePackets.Message.Talk), ServerBase.Kernel.GamePool.Values);
                                    Data data = new Data(true);
                                    data.ID = GamePackets.Data.OpenCustom;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = 3382;
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            case "kimo":
                                {


                                    Program.kimo = ushort.Parse(Data[1]);
                                    // Program.kimo2 = ushort.Parse(Data[2]);
                                    // Program.kimo3 = ushort.Parse(Data[3]);
                                    testpacket str = new testpacket(true);
                                    client.Send(str);
                                    break;
                                }
                            case "3":
                                {
                                    PhoenixProject.Game.KimoCarnaval.Load();
                                    /*Program.kimo3 = ushort.Parse(Data[1]);
                                    Network.GamePackets.Weather weather = new Network.GamePackets.Weather(true);
                                    weather.WeatherType = (uint)Program.kimo3;
                                    weather.Intensity = 100;
                                    weather.Appearence = 2;
                                    weather.Direction = 4;
                                    client.Send(weather);*/
                                    break;
                                }
                            case "kimo4":
                                {
                                    //PhoenixProject.Game.KimoCarnaval.Npc();
                                    /*Program.kimo3 = ushort.Parse(Data[1]);
                                    Network.GamePackets.Weather weather = new Network.GamePackets.Weather(true);
                                    weather.WeatherType = (uint)Program.kimo3;
                                    weather.Intensity = 100;
                                    weather.Appearence = 2;
                                    weather.Direction = 4;
                                    client.Send(weather);*/
                                    break;
                                }
                            case "33":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker;

                                    /*Program.kimo3 = ushort.Parse(Data[1]);
                                    Data data = new Data(true);
                                    data.ID = GamePackets.Data.OpenCustom;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = (uint)Program.kimo3;
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);*/

                                    // client.Send(new Data(true) { UID = client.Entity.UID, ID = GamePackets.Data.OpenWindow, dwParam = GamePackets.Data.CustomCommands.Reincarnation, wParam1 = client.Entity.X, wParam2 = client.Entity.Y });

                                    break;
                                }
                            case "p1":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker2;
                                    break;
                                }
                            case "p2":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker3;
                                    break;
                                }
                            case "p3":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker4;
                                    break;
                                }
                            case "p4":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker;
                                    break;
                                }
                            case "p5":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker;
                                    break;
                                }
                            case "p6":
                                {
                                    client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.poker5;
                                    break;
                                }
                            case "bb":
                                {

                                    PhoenixProject.Database.MySqlCommand command = new PhoenixProject.Database.MySqlCommand(PhoenixProject.Database.MySqlCommandType.DELETE);
                                    command.Delete("skills", "ID", "1110").And("EntityID", client.Entity.UID).Execute();

                                    break;
                                }
                            case "bo":
                                {
                                    _String str = new _String(true);
                                    str.UID = client.Entity.UID;
                                    str.TextsCount = 1;
                                    str.Type = _String.Sound;
                                    str.Texts.Add("zhengfu");
                                    client.Send(str);
                                    //client.Send(new Data(true) { UID = client.Entity.UID, ID = Network.GamePackets.Data.OpenWindow, dwParam = uint.Parse(Data[1]), wParam1 = client.Entity.X, wParam2 = client.Entity.Y });
                                    //datas.dwParam = uint.Parse(Data[1]);
                                    //client.Send(datas);
                                    break;
                                }

                            case "pok":
                                {

                                    break;
                                }
                            case "n":
                                {

                                    {
                                        Random disco = new Random();
                                        uint discocolor = (uint)disco.Next(50000, 999999999);
                                        Program.ScreenColor = 5855577;
                                        foreach (Client.GameState C in ServerBase.Kernel.GamePool.Values)
                                        {
                                            Data datas = new Data(true);
                                            datas.UID = C.Entity.UID;
                                            datas.ID = 104;
                                            Program.ScreenColor = 5855577;
                                            datas.dwParam = 5855577;
                                            C.Send(datas);
                                        }
                                    }

                                    break;
                                }
                            case "d":
                                {

                                    {
                                        Random disco = new Random();
                                        uint discocolor = (uint)disco.Next(50000, 999999999);
                                        Program.ScreenColor = 0;
                                        foreach (Client.GameState C in ServerBase.Kernel.GamePool.Values)
                                        {
                                            Data datas = new Data(true);
                                            datas.UID = C.Entity.UID;
                                            datas.ID = 104;
                                            datas.dwParam = 0;
                                            //datas.wParam1 = (ushort)Program.ScreenColor;
                                            //datas.wParam2 = (ushort)Program.ScreenColor;
                                            //datas.wParam2 = 104;
                                            //datas.wParam4 = (ushort)Program.ScreenColor;
                                            C.Send(datas);
                                        }
                                    }

                                    break;
                                }
                            case "give":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            switch (Data[2])
                                            {
                                                case "vip":
                                                    Client.Entity.VIPLevel = byte.Parse(Data[3]);
                                                    break;
                                                case "cps":
                                                    Client.Entity.ConquerPoints += uint.Parse(Data[3]);
                                                    break;
                                                case "money":
                                                    Client.Entity.Money += uint.Parse(Data[3]);
                                                    break;
                                                case "spell":
                                                    Client.AddSpell(new Spell(true) { ID = ushort.Parse(Data[3]) });
                                                    break;
                                                case "level":
                                                    Client.Entity.Level = byte.Parse(Data[3]);
                                                    break;
                                                case "plustone":
                                                    {
                                                        UInt32 ItemId = UInt32.Parse(Data[3]);
                                                        if (Database.ConquerItemInformation.BaseInformations.ContainsKey(ItemId))
                                                        {
                                                            Database.ConquerItemBaseInformation iteminfo;
                                                            if (Database.ConquerItemInformation.BaseInformations.TryGetValue(ItemId, out iteminfo))
                                                            {
                                                                Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                                                newItem.ID = iteminfo.ID;
                                                                Byte Plus = (Byte)(newItem.ID % 730000);
                                                                Console.WriteLine("Item Plus " + Plus);
                                                                newItem.Plus = (Byte)(newItem.ID % 730000);
                                                                Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                case "item":
                                                    {
                                                        string ItemName = Data[3];
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                                        switch (Data[4].ToLower())
                                                        {
                                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                                            default:
                                                                {
                                                                    Quality = (PhoenixProject.Game.Enums.ItemQuality)int.Parse(Data[4]);
                                                                    break;
                                                                }
                                                        }
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.Name.ToLower() == ItemName.ToLower() && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        if (Data.Length > 3)
                                                        {
                                                            byte plus = 0;
                                                            byte.TryParse(Data[3], out plus);
                                                            newItem.Plus = Math.Min((byte)15, plus);
                                                            if (Data.Length > 4)
                                                            {
                                                                byte bless = 0;
                                                                byte.TryParse(Data[6], out bless);
                                                                newItem.Bless = Math.Min((byte)7, bless);
                                                                if (Data.Length > 5)
                                                                {
                                                                    byte ench = 0;
                                                                    byte.TryParse(Data[7], out ench);
                                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                                    if (Data.Length > 6)
                                                                    {
                                                                        byte soc1 = 0;
                                                                        byte.TryParse(Data[8], out soc1);
                                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                                        {
                                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                                        }
                                                                        if (Data.Length > 7)
                                                                        {
                                                                            byte soc2 = 0;
                                                                            byte.TryParse(Data[9], out soc2);
                                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                                            {
                                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                                            }
                                                                        }
                                                                        if (Data.Length > 10)
                                                                        {
                                                                            byte R = 0, G = 0, B = 0;
                                                                            byte.TryParse(Data[10], out R);
                                                                            byte.TryParse(Data[11], out G);
                                                                            byte.TryParse(Data[12], out B);
                                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        newItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                                        Client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                                case "equip":
                                                    {
                                                        string ItemName = Data[3];
                                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.NormalV3;
                                                        Database.ConquerItemBaseInformation CIBI = null;
                                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                                        {
                                                            if (infos.Name.ToLower() == ItemName.ToLower() && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                                            {
                                                                CIBI = infos;
                                                            }
                                                        }
                                                        if (CIBI == null)
                                                            break;
                                                        Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                                        newItem.ID = CIBI.ID;
                                                        newItem.Position = 9;
                                                        newItem.Durability = CIBI.Durability;
                                                        newItem.MaximDurability = CIBI.Durability;
                                                        newItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                                        Client.Equipment.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                                        break;
                                                    }
                                            }
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "hors":
                                {
                                    client.Entity.RacePoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }

                            case "open":
                                {
                                    GamePackets.Data data = new GamePackets.Data(true);
                                    data.ID = GamePackets.Data.OpenCustom;
                                    data.UID = client.Entity.UID;
                                    data.TimeStamp = Time32.Now;
                                    data.dwParam = uint.Parse(Data[1]);
                                    data.wParam1 = client.Entity.X;
                                    data.wParam2 = client.Entity.Y;
                                    client.Send(data);
                                    break;
                                }
                            case "xp":
                                {
                                    client.Entity.AddFlag(Update.Flags.XPList);
                                    client.XPListStamp = Time32.Now;
                                    break;
                                }

                            case "guildwar":
                                {
                                    switch (Data[1])
                                    {
                                        case "on":
                                            {
                                                if (!Game.ConquerStructures.Society.GuildWar.IsWar)
                                                {
                                                    Game.ConquerStructures.Society.GuildWar.Start();
                                                }
                                                break;
                                            }
                                        case "off":
                                            {
                                                if (Game.ConquerStructures.Society.GuildWar.IsWar)
                                                {
                                                    Game.ConquerStructures.Society.GuildWar.End();
                                                }
                                                break;
                                            }
                                    }
                                    break;
                                }

                        }
                    }
                    if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.GameMaster
                    || client.Account.State == PhoenixProject.Database.AccountTable.AccountState.ProjectManager || client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                    {
                        switch (Data[0])
                        {
                            case "invisible":
                                Console.WriteLine("sd");
                                break;
                            /* case "reloadmobs":
                                 {
                                     client.Map.FreezeMonsters = true;
                                     var Clone = client.Map.Entities.Base.Values.ToArray();
                                     foreach (var mob in Clone)
                                         if (!mob.Companion)
                                         {
                                             client.Map.Floor[mob.X, mob.Y, PhoenixProject.Game.MapObjectType.Monster, mob] = true;
                                             client.Map.Entities.Remove(mob.UID);
                                         }
                                     Clone = new Game.Entity[0];
                                     client.Map.EntityUIDCounter.Now = 400000;
                                     client.Map.LoadMonsters();
                                     client.Map.FreezeMonsters = false;
                                     foreach (Client.GameState Client in ServerBase.Kernel.GamePool.Values)
                                     {
                                         if (Client.Map.ID == client.Map.ID)
                                         {
                                             Client.Entity.Teleport(Client.Entity.MapID, Client.Entity.X, Client.Entity.Y);
                                         }
                                     }
                                     break;
                                 }*/
                            case "mobmesh":
                                {
                                    client.Entity.Body = ushort.Parse(Data[1]);
                                    break;
                                }
                            case "trace":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "bring":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "restart":
                                {
                                    Program.CommandsAI("@restart");
                                    break;
                                }
                            case "kick":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "ban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = PhoenixProject.Database.AccountTable.AccountState.Banned;
                                            Client.Account.Savekimo();
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == PhoenixProject.Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = PhoenixProject.Database.AccountTable.AccountState.Player;
                                        Account.Savekimo();
                                    }
                                    break;
                                }
                            case "chatban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanLasts = uint.Parse(Data[2]);
                                            Client.ChatBanTime = DateTime.Now;
                                            Client.ChatBanned = true;
                                        }
                                    }
                                    break;
                                }
                            case "increaseexp":
                                {
                                    client.IncreaseExperience(ulong.Parse(Data[1]), true);
                                    break;
                                }
                            case "chatunban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanned = false;
                                        }
                                    }
                                    break;
                                }
                            case "bc":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new PhoenixProject.Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = Message.Remove(0, 2);
                                    ServerBase.Kernel.SendWorldMessage(new Message(Message.Remove(0, 2), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), ServerBase.Kernel.GamePool.Values);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "broadcast":
                                {
                                    Game.ConquerStructures.Broadcast.Broadcasts.Clear();
                                    Game.ConquerStructures.Broadcast.BroadcastStr broadcast = new PhoenixProject.Game.ConquerStructures.Broadcast.BroadcastStr();
                                    broadcast.EntityID = client.Entity.UID;
                                    broadcast.EntityName = client.Entity.Name;
                                    broadcast.ID = Game.ConquerStructures.Broadcast.BroadcastCounter.Next;
                                    broadcast.Message = Message.Remove(0, 9);
                                    ServerBase.Kernel.SendWorldMessage(new Message(Message.Remove(0, 9), "ALLUSERS", client.Entity.Name, System.Drawing.Color.Red, GamePackets.Message.BroadcastMessage), ServerBase.Kernel.GamePool.Values);
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID = 1;
                                    Game.ConquerStructures.Broadcast.CurrentBroadcast = broadcast;
                                    break;
                                }
                            case "ann":
                                {
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.Center), ServerBase.Kernel.GamePool.Values);
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.World), ServerBase.Kernel.GamePool.Values);
                                    break;
                                }
                            case "announce":
                                {
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.Center), ServerBase.Kernel.GamePool.Values);
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.World), ServerBase.Kernel.GamePool.Values);
                                    break;
                                }
                            case "arenapoints":
                                {
                                    client.ArenaStatistic.ArenaPoints = uint.Parse(Data[1]);
                                    client.ArenaStatistic.Send(client);
                                    break;
                                }
                            case "record":
                                {
                                    if (client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                        break;
                                    switch (Data[1])
                                    {
                                        case "on": client.Entity.Mode = Game.Enums.Mode.Recording; break;
                                        case "off": Program.CommandsAI("/saverecord"); break;
                                    } break;
                                }
                            case "clearinventory":
                                {
                                    Interfaces.IConquerItem[] inventory = new Interfaces.IConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (Interfaces.IConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + ServerBase.Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }
                            case "reallot":
                                {
                                    if (client.Entity.Reborn != 0)
                                    {
                                        client.Entity.Agility = 0;
                                        client.Entity.Strength = 0;
                                        client.Entity.Vitality = 1;
                                        client.Entity.Spirit = 0;
                                        if (client.Entity.Reborn == 1)
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornLevel)
                                                + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        else
                                        {
                                            client.Entity.Atributes = (ushort)(client.ExtraAtributePoints(client.Entity.FirstRebornLevel, client.Entity.FirstRebornClass) +
                                                client.ExtraAtributePoints(client.Entity.SecondRebornLevel, client.Entity.SecondRebornClass) + 52 + 3 * (client.Entity.Level - 15));
                                        }
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "str":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Strength += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "agi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Agility += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "vit":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Vitality += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "spi":
                                {
                                    ushort atr = 0;
                                    ushort.TryParse(Data[1], out atr);
                                    if (client.Entity.Atributes >= atr)
                                    {
                                        client.Entity.Spirit += atr;
                                        client.Entity.Atributes -= atr;
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                    }
                                    break;
                                }
                            case "reborn":
                                {
                                    if (client.Entity.Reborn < 2)
                                    {
                                        if (client.Entity.Class % 10 == 5)
                                        {
                                            if (client.Entity.Class != 15 &&
                                                client.Entity.Class != 25 &&
                                                client.Entity.Class != 45 &&
                                                client.Entity.Class != 55 &&
                                                client.Entity.Class != 65 &&
                                                client.Entity.Class != 75 &&
                                                client.Entity.Class != 135 &&
                                                client.Entity.Class != 145)
                                            {
                                                client.Send(new Message("You need to be an existing class.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                            }
                                            else
                                            {
                                                byte newclass = 10;
                                                byte.TryParse(Data[1], out newclass);
                                                if (newclass != 11 &&
                                                newclass != 21 &&
                                                newclass != 41 &&
                                                newclass != 51 &&
                                                newclass != 61 &&
                                                newclass != 71 &&
                                                newclass != 132 &&
                                                newclass != 142)
                                                {
                                                    client.Send(new Message("You need to reborn into an existing class. For fire class = 142 and for waters class = 132.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                                else
                                                {
                                                    if (!client.Reborn(newclass))
                                                        client.Send(new Message("You need atleast 2 spaces in your inventory.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                            }
                                        }
                                        else
                                            client.Send(new Message("You need to be a master to be able to reborn.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    }
                                    else
                                        client.Send(new Message("You can't reborn any more.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    break;
                                }

                            case "dc":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Entity.MapID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "map2":
                                {
                                    client.Send(new Message("Map base: " + client.Map.BaseID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ulong.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "tele2":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.TeleportHouse(ulong.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.Targets.Add(client.Entity.UID, (uint)0);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                            case "item":
                                {
                                    if (Data.Length > 2)
                                    {
                                        string ItemName = Data[1];
                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                        switch (Data[2].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (PhoenixProject.Game.Enums.ItemQuality)int.Parse(Data[2]);
                                                    break;
                                                }
                                        }
                                        Database.ConquerItemBaseInformation CIBI = null;
                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        {
                                            if (infos.Name.ToLower() == ItemName.ToLower() && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            {
                                                CIBI = infos;
                                            }
                                        }
                                        if (CIBI == null)
                                            break;
                                        Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                        newItem.ID = CIBI.ID;
                                        newItem.Durability = CIBI.Durability;
                                        newItem.MaximDurability = CIBI.Durability;
                                        if (Data.Length > 3)
                                        {
                                            byte plus = 0;
                                            byte.TryParse(Data[3], out plus);
                                            newItem.Plus = Math.Min((byte)12, plus);
                                            if (Data.Length > 4)
                                            {
                                                byte bless = 0;
                                                byte.TryParse(Data[4], out bless);
                                                newItem.Bless = Math.Min((byte)7, bless);
                                                if (Data.Length > 5)
                                                {
                                                    byte ench = 0;
                                                    byte.TryParse(Data[5], out ench);
                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc1 = 0;
                                                        byte.TryParse(Data[6], out soc1);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                        {
                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte soc2 = 0;
                                                            byte.TryParse(Data[7], out soc2);
                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                            {
                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                            }
                                                        }
                                                        if (Data.Length > 10)
                                                        {
                                                            byte R = 0, G = 0, B = 0;
                                                            byte.TryParse(Data[8], out R);
                                                            byte.TryParse(Data[9], out G);
                                                            byte.TryParse(Data[10], out B);
                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        newItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                        if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.GameMaster)
                                            newItem.Bound = true;
                                        client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    break;
                                }
                        }
                        return true;
                    }
                    #endregion

                    #region VIPs
                    if (client.Entity.VIPLevel > 0)
                    {
                        switch (Data[0])
                        {
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.Targets.Add(client.Entity.UID, (uint)0);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                        }
                    }
                    #endregion
                    #region GameHelpers
                    if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.GameHelper)
                    {
                        switch (Data[0])
                        {
                            case "scroll":
                                {
                                    if (client.Entity.MapID == 700)
                                        break;
                                    switch (Data[1].ToLower())
                                    {
                                        case "tc": client.Entity.Teleport(1002, 430, 380); break;
                                        case "pc": client.Entity.Teleport(1011, 195, 260); break;
                                        case "ac":
                                        case "am": client.Entity.Teleport(1020, 566, 563); break;
                                        case "dc": client.Entity.Teleport(1000, 500, 645); break;
                                        case "bi": client.Entity.Teleport(1015, 723, 573); break;
                                        case "pka": client.Entity.Teleport(1005, 050, 050); break;
                                        case "ma": client.Entity.Teleport(1036, 211, 196); break;
                                        case "ja": client.Entity.Teleport(6000, 100, 100); break;
                                    }
                                    break;
                                }

                            case "summon":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "arrest":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(6004, 30, 74);
                                        }
                                    }
                                    break;
                                }
                            case "pkp":
                                {
                                    client.Entity.PKPoints = ushort.Parse(Data[1]);

                                    break;
                                }

                            case "cps":
                                {
                                    client.Entity.ConquerPoints = uint.Parse(Data[1]);
                                    break;
                                }
                            case "money":
                                {
                                    client.Entity.Money = uint.Parse(Data[1]);
                                    break;
                                }


                            case "xp":
                                {
                                    client.Entity.AddFlag(Update.Flags.XPList);
                                    client.XPListStamp = Time32.Now;
                                    break;
                                }



                        }
                    }
                    if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.GameHelper)
                    {
                        switch (Data[0])
                        {
                            case "invisible":
                                Console.WriteLine("Hammy");
                                break;
                            case "arrest":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            pClient.Entity.Teleport(6004, 30, 74);
                                        }
                                    }
                                    break;
                                }
                            case "trace":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            client.Entity.Teleport(pClient.Entity.MapID, pClient.Entity.X, pClient.Entity.Y);
                                        }
                                    }
                                    break;
                                }
                            case "bring":
                                {
                                    foreach (var pClient in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (pClient.Entity.Name.ToLower().Contains(Data[1]) || Data[1].ToLower() == "all")
                                            if (Data[1].ToLower() == "all")
                                            {
                                                pClient.Entity.Teleport(client.Entity.MapID,
                                                    (ushort)Kernel.Random.Next(client.Entity.X - 5, client.Entity.X + 5),
                                                    (ushort)Kernel.Random.Next(client.Entity.Y - 5, client.Entity.Y + 5));
                                            }
                                            else
                                                pClient.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);

                                    }
                                    break;
                                }
                            case "kick":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "ban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Account.State >= client.Account.State)
                                            continue;
                                        if (Client.Entity.Name.ToLower().Contains(Data[1]))
                                        {
                                            Client.Account.State = PhoenixProject.Database.AccountTable.AccountState.Banned;
                                            Client.Account.Savekimo();
                                            Client.Disconnect();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            case "unban":
                                {
                                    var Account = new Database.AccountTable(Data[1]);
                                    if (Account.State == PhoenixProject.Database.AccountTable.AccountState.Banned)
                                    {
                                        Account.State = PhoenixProject.Database.AccountTable.AccountState.Player;
                                        Account.Savekimo();
                                    }
                                    break;
                                }
                            case "chatban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanLasts = uint.Parse(Data[2]);
                                            Client.ChatBanTime = DateTime.Now;
                                            Client.ChatBanned = true;
                                        }
                                    }
                                    break;
                                }

                            case "chatunban":
                                {
                                    foreach (var Client in ServerBase.Kernel.GamePool.Values)
                                    {
                                        if (Client.Entity.Name.Contains(Data[1]))
                                        {
                                            Client.ChatBanned = false;
                                        }
                                    }
                                    break;
                                }

                            case "ann":
                                {
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.Center), ServerBase.Kernel.GamePool.Values);
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 3), System.Drawing.Color.Red, Network.GamePackets.Message.World), ServerBase.Kernel.GamePool.Values);
                                    break;
                                }
                            case "announce":
                                {
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.Center), ServerBase.Kernel.GamePool.Values);
                                    ServerBase.Kernel.SendWorldMessage(new Message("[Announce] by " + client.Entity.Name + ": " + Mess.Remove(0, 8), System.Drawing.Color.Red, Network.GamePackets.Message.World), ServerBase.Kernel.GamePool.Values);
                                    break;
                                }

                            case "record":
                                {
                                    if (client.Account.State != Database.AccountTable.AccountState.ProjectManager)
                                        break;
                                    switch (Data[1])
                                    {
                                        case "on": client.Entity.Mode = Game.Enums.Mode.Recording; break;
                                        case "off": Program.CommandsAI("/saverecord"); break;
                                    } break;
                                }
                            case "clearinventory":
                                {
                                    Interfaces.IConquerItem[] inventory = new Interfaces.IConquerItem[client.Inventory.Objects.Length];
                                    client.Inventory.Objects.CopyTo(inventory, 0);

                                    foreach (Interfaces.IConquerItem item in inventory)
                                    {
                                        client.Inventory.Remove(item, PhoenixProject.Game.Enums.ItemUse.Remove);
                                    }
                                    break;
                                }
                            case "online":
                                {
                                    client.Send(new Message("Online players count: " + ServerBase.Kernel.GamePool.Count, System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    string line = "";
                                    foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                                        line += pClient.Entity.Name + ",";

                                    if (line.Length >= 255)
                                        return true;
                                    client.Send(new GamePackets.Message(line, System.Drawing.Color.Beige, GamePackets.Message.Talk));
                                    break;
                                }

                            case "reborn":
                                {
                                    if (client.Entity.Reborn < 2)
                                    {
                                        if (client.Entity.Class % 10 == 5)
                                        {
                                            if (client.Entity.Class != 15 &&
                                                client.Entity.Class != 25 &&
                                                client.Entity.Class != 45 &&
                                                client.Entity.Class != 55 &&
                                                client.Entity.Class != 65 &&
                                                client.Entity.Class != 135 &&
                                                client.Entity.Class != 145)
                                            {
                                                client.Send(new Message("You need to be an existing class.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                            }
                                            else
                                            {
                                                byte newclass = 10;
                                                byte.TryParse(Data[1], out newclass);
                                                if (newclass != 11 &&
                                                newclass != 21 &&
                                                newclass != 41 &&
                                                newclass != 51 &&
                                                newclass != 61 &&
                                                newclass != 132 &&
                                                newclass != 142)
                                                {
                                                    client.Send(new Message("You need to reborn into an existing class. For fire class = 142 and for waters class = 132.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                                else
                                                {
                                                    if (!client.Reborn(newclass))
                                                        client.Send(new Message("You need atleast 2 spaces in your inventory.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                                }
                                            }
                                        }
                                        else
                                            client.Send(new Message("You need to be a master to be able to reborn.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    }
                                    else
                                        client.Send(new Message("You can't reborn any more.", System.Drawing.Color.BurlyWood, GamePackets.Message.TopLeft));
                                    break;
                                }

                            case "dc":
                                {
                                    client.Disconnect();
                                    break;
                                }
                            case "prof":
                                {
                                    Interfaces.IProf proficiency = new GamePackets.Proficiency(true);
                                    if (Data.Length > 1)
                                        proficiency.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        proficiency.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        proficiency.Experience = uint.Parse(Data[3]);
                                    client.AddProficiency(proficiency);
                                    break;
                                }
                            case "spell":
                                {
                                    Interfaces.ISkill spell = new GamePackets.Spell(true);
                                    if (Data.Length > 1)
                                        spell.ID = ushort.Parse(Data[1]);
                                    if (Data.Length > 2)
                                        spell.Level = byte.Parse(Data[2]);
                                    if (Data.Length > 3)
                                        spell.Experience = uint.Parse(Data[3]);
                                    client.AddSpell(spell);
                                    break;
                                }

                            case "level":
                                {
                                    byte level = client.Entity.Level;
                                    byte.TryParse(Data[1], out level);
                                    level = Math.Min((byte)140, Math.Max((byte)1, level));
                                    client.Entity.Level = level;
                                    client.Entity.Experience = 0;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(client.Entity.Class, level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "class":
                                {
                                    byte _class = client.Entity.Class;
                                    byte.TryParse(Data[1], out _class);
                                    _class = Math.Min((byte)145, Math.Max((byte)1, _class));
                                    client.Entity.Class = _class;
                                    if (client.Entity.Reborn == 0)
                                    {
                                        Database.DataHolder.GetStats(_class, client.Entity.Level, client);
                                        client.CalculateStatBonus();
                                        client.CalculateHPBonus();
                                        client.GemAlgorithm();
                                    }
                                    break;
                                }
                            case "body":
                                {
                                    ushort body = client.Entity.Body;
                                    ushort.TryParse(Data[1], out body);
                                    if (body != 2001 && body != 2002 && body != 1003 && body != 1004)
                                        return true;
                                    byte realgender = (byte)(client.Entity.Body % 10);
                                    byte gender = (byte)(body % 10);
                                    if (client.Equipment.Objects[8] != null)
                                        if (gender >= 3 && realgender <= 2)
                                            return true;
                                    client.Entity.Body = body;
                                    if (gender >= 3 && realgender <= 2)
                                        client.Entity.Face -= 200;
                                    if (gender <= 2 && realgender >= 3)
                                        client.Entity.Face += 200;
                                    break;
                                }
                            case "hair":
                                {
                                    ushort hair = client.Entity.HairStyle;
                                    ushort.TryParse(Data[1], out hair);
                                    client.Entity.HairStyle = hair;
                                    break;
                                }
                            case "map":
                                {
                                    client.Send(new Message("Map: " + client.Map.ID, System.Drawing.Color.Blue, GamePackets.Message.TopLeft));
                                    break;
                                }
                            case "tele":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.Teleport(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "tele2":
                                {
                                    if (Data.Length > 3)
                                    {
                                        client.Entity.TeleportHouse(ushort.Parse(Data[1]), ushort.Parse(Data[2]), ushort.Parse(Data[3]));
                                    }
                                    break;
                                }
                            case "transform":
                                {
                                    if (client.Entity.Dead)
                                        break;
                                    bool wasTransformated = client.Entity.Transformed;
                                    if (wasTransformated)
                                    {
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.TransformationStamp = Time32.Now;
                                        return true;
                                    }
                                    ushort transformation = client.Entity.TransformationID;
                                    ushort.TryParse(Data[1], out transformation);
                                    client.Entity.TransformationID = transformation;
                                    client.Entity.TransformationStamp = Time32.Now;
                                    client.Entity.TransformationTime = 110;
                                    SpellUse spellUse = new SpellUse(true);
                                    spellUse.Attacker = client.Entity.UID;
                                    spellUse.SpellID = 1360;
                                    spellUse.SpellLevel = 4;
                                    spellUse.X = client.Entity.X;
                                    spellUse.Y = client.Entity.Y;
                                    spellUse.Targets.Add(client.Entity.UID, (uint)0);
                                    client.Send(spellUse);
                                    client.Entity.TransformationMaxHP = 3000;
                                    double maxHP = client.Entity.MaxHitpoints;
                                    double HP = client.Entity.Hitpoints;
                                    double point = HP / maxHP;

                                    client.Entity.Hitpoints = (uint)(client.Entity.TransformationMaxHP * point);
                                    client.Entity.Update(Update.MaxHitpoints, client.Entity.TransformationMaxHP, false);
                                    break;
                                }
                            case "item":
                                {
                                    if (Data.Length > 2)
                                    {
                                        string ItemName = Data[1];
                                        Game.Enums.ItemQuality Quality = Game.Enums.ItemQuality.Fixed;
                                        switch (Data[2].ToLower())
                                        {
                                            case "fixed": Quality = Game.Enums.ItemQuality.Fixed; break;
                                            case "normal": Quality = Game.Enums.ItemQuality.Normal; break;
                                            case "normalv1": Quality = Game.Enums.ItemQuality.NormalV1; break;
                                            case "normalv2": Quality = Game.Enums.ItemQuality.NormalV2; break;
                                            case "normalv3": Quality = Game.Enums.ItemQuality.NormalV3; break;
                                            case "refined": Quality = Game.Enums.ItemQuality.Refined; break;
                                            case "unique": Quality = Game.Enums.ItemQuality.Unique; break;
                                            case "elite": Quality = Game.Enums.ItemQuality.Elite; break;
                                            case "super": Quality = Game.Enums.ItemQuality.Super; break;
                                            case "other": Quality = Game.Enums.ItemQuality.Other; break;
                                            default:
                                                {
                                                    Quality = (PhoenixProject.Game.Enums.ItemQuality)int.Parse(Data[2]);
                                                    break;
                                                }
                                        }
                                        Database.ConquerItemBaseInformation CIBI = null;
                                        foreach (Database.ConquerItemBaseInformation infos in Database.ConquerItemInformation.BaseInformations.Values)
                                        {
                                            if (infos.Name.ToLower() == ItemName.ToLower() && Quality == (Game.Enums.ItemQuality)(infos.ID % 10))
                                            {
                                                CIBI = infos;
                                            }
                                        }
                                        if (CIBI == null)
                                            break;
                                        Interfaces.IConquerItem newItem = new GamePackets.ConquerItem(true);
                                        newItem.ID = CIBI.ID;
                                        newItem.Durability = CIBI.Durability;
                                        newItem.MaximDurability = CIBI.Durability;
                                        if (Data.Length > 3)
                                        {
                                            byte plus = 0;
                                            byte.TryParse(Data[3], out plus);
                                            newItem.Plus = Math.Min((byte)12, plus);
                                            if (Data.Length > 4)
                                            {
                                                byte bless = 0;
                                                byte.TryParse(Data[4], out bless);
                                                newItem.Bless = Math.Min((byte)7, bless);
                                                if (Data.Length > 5)
                                                {
                                                    byte ench = 0;
                                                    byte.TryParse(Data[5], out ench);
                                                    newItem.Enchant = Math.Min((byte)255, ench);
                                                    if (Data.Length > 6)
                                                    {
                                                        byte soc1 = 0;
                                                        byte.TryParse(Data[6], out soc1);
                                                        if (Enum.IsDefined(typeof(Game.Enums.Gem), soc1))
                                                        {
                                                            newItem.SocketOne = (Game.Enums.Gem)soc1;
                                                        }
                                                        if (Data.Length > 7)
                                                        {
                                                            byte soc2 = 0;
                                                            byte.TryParse(Data[7], out soc2);
                                                            if (Enum.IsDefined(typeof(Game.Enums.Gem), soc2))
                                                            {
                                                                newItem.SocketTwo = (Game.Enums.Gem)soc2;
                                                            }
                                                        }
                                                        if (Data.Length > 10)
                                                        {
                                                            byte R = 0, G = 0, B = 0;
                                                            byte.TryParse(Data[8], out R);
                                                            byte.TryParse(Data[9], out G);
                                                            byte.TryParse(Data[10], out B);
                                                            newItem.SocketProgress = (uint)(B | (G << 8) | (R << 16));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        newItem.Color = (PhoenixProject.Game.Enums.Color)ServerBase.Kernel.Random.Next(4, 8);
                                        if (client.Account.State == PhoenixProject.Database.AccountTable.AccountState.GameMaster)
                                            newItem.Bound = true;
                                        client.Inventory.Add(newItem, Game.Enums.ItemUse.CreateAndAdd);
                                    }
                                    break;
                                }
                        }
                        return true;
                    }
                    #endregion

                    return true;
                }
                return false;
            }
            catch { client.Send(new Message("Impossible to handle this command. Check your syntax.", System.Drawing.Color.BurlyWood, Message.TopLeft)); return false; }
        }
        public static void WorldMessage(string message)
        {
            Message msg = new Message(message, System.Drawing.Color.MediumBlue, Message.Center);
            foreach (Client.GameState pClient in ServerBase.Kernel.GamePool.Values)
                pClient.Send(msg);
        }
        #endregion
        #region General Data
        static void Revive(Data generalData, Client.GameState client)
        {

            if (client.Entity.ContainsFlag(Update.Flags2.SoulShackle))
                return;
            if (Time32.Now >= client.Entity.DeathStamp.AddSeconds(18) && client.Entity.Dead)
            {
                client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
                client.ReviveStamp = Time32.Now;
                client.Attackable = false;

                client.Entity.TransformationID = 0;
                client.Entity.RemoveFlag(Update.Flags.Dead);
                client.Entity.RemoveFlag(Update.Flags.Ghost);
                client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                bool ReviveHere = generalData.dwParam == 1;


                if (ReviveHere && client.Entity.HeavenBlessing > 0)
                {
                    client.Entity.Teleport(client.Entity.MapID, client.Entity.X, client.Entity.Y);
                    //client.Send(new MapStatus() { BaseID = client.Map.BaseID, ID = client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });
                }
                else
                {
                    if (ServerBase.Constants.RevCheck.Contains(client.Entity.MapID))
                    {
                        if (client.Entity.MapID == 1038)
                        {
                            if (DateTime.Now.Hour >= 19 && DateTime.Now.Hour < 20 && DateTime.Now.Minute > 29 && DateTime.Now.DayOfWeek == DayOfWeek.Sunday)
                            {
                                client.Entity.Teleport(6001, 31, 74);
                            }
                            else
                            {
                                ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                                client.Entity.Teleport(Point[0], Point[1], Point[2]);
                            }
                        }
                        if (client.Entity.MapID == 3031)
                        {
                            client.Entity.Teleport(3031, 39, 35);
                        }
                        if (client.Entity.MapID == 2071)
                        {
                            client.Entity.Teleport(2071, 45, 130);
                        }
                        if (client.Entity.MapID == 1509)
                        {
                            client.Entity.Teleport(1509, 82, 119);
                        }
                        if (client.Entity.MapID == 7777)
                        {
                            client.Entity.Teleport(7777, 150, 164);
                        }
                        if (client.Entity.MapID == 2060)
                        {
                            client.Entity.Teleport(2060, 131, 136);
                        }
                        if (client.Entity.MapID == 701)
                        {
                            client.Entity.Teleport(701, 51, 51);
                        }
                        if (client.Entity.MapID == 1509)
                        {
                            client.Entity.Teleport(1509, 103, 44);
                            //client.Entity.Teleport(2071, 45, 130);
                        }
                    }
                    else
                    {
                        ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                        client.Entity.Teleport(Point[0], Point[1], Point[2]);
                    }
                }

            }
        }
        static void UsePortal(Data generalData, Client.GameState client)
        {
            client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
            client.ReviveStamp = Time32.Now;
            client.Attackable = false;
            ushort portal_X = (ushort)(generalData.dwParam & 0xFFFF);
            ushort portal_Y = (ushort)(generalData.dwParam >> 16);

            string portal_ID = portal_X.ToString() + ":" + portal_Y.ToString() + ":" + client.Map.ID.ToString();
            if (client.Account.State == Database.AccountTable.AccountState.ProjectManager || client.Account.State == PhoenixProject.Database.AccountTable.AccountState.Coder)
                client.Send(new Message("Portal ID: " + portal_ID, System.Drawing.Color.Red, Network.GamePackets.Message.TopLeft));
            if (client.Entity.MapID >= 1000000)
            {
                client.Entity.Teleport(1036, 200, 92);
                return;
            }
            foreach (Game.Portal portal in client.Map.Portals)
            {
                if (ServerBase.Kernel.GetDistance(portal.CurrentX, portal.CurrentY, client.Entity.X, client.Entity.Y) <= 4)
                {
                    client.Entity.Teleport(portal.DestinationMapID, portal.DestinationX, portal.DestinationY);
                    return;
                }
            }
            client.Entity.Teleport(1002, 429, 378);
        }
        static void ObserveEquipment(Data generalData, Client.GameState client)
        {
            if (NulledClient(client))
                return;

            Client.GameState pclient = null;

            if (Kernel.GamePool.TryGetValue(generalData.dwParam, out pclient))
            {

                byte[] array = new byte[pclient.Entity.SpawnPacket.Length];
                pclient.Entity.SpawnPacket.CopyTo(array, 0);
                array[0x6d] = 1;
                client.Send(array);
                pclient.Send(new Message(client.Entity.Name + " is observing your gear carefully.", System.Drawing.Color.Red, Message.TopLeft));

                client.Send(WindowStats(pclient));
                if (!pclient.AlternateEquipment)
                {
                    for (Byte pos = (Byte)Positions.Head; pos <= (Byte)Positions.SteedTalisman; pos++)
                    {
                        Interfaces.IConquerItem i = pclient.Equipment.TryGetItem((Byte)pos);

                        BoothItem2 view = new BoothItem2();
                        view.CostType = BoothItem2.CostTypes.ViewEquip;
                        view.Identifier = pclient.Entity.UID;
                        view.Position = (Positions)pos;
                        if (i != null)
                            view.ParseItem(i);

                        client.Send(view);
                        if (i != null)
                        {
                            i.SendExtras(client);
                        }
                    }
                }
                else
                {
                    for (Byte pos = (Byte)Positions.AttackTalisman; pos <= (Byte)Positions.AltGarment; pos++)
                    {
                        Interfaces.IConquerItem i = pclient.Equipment.TryGetItem((Byte)pos);

                        BoothItem2 view = new BoothItem2();
                        view.CostType = BoothItem2.CostTypes.ViewEquip;
                        view.Identifier = pclient.Entity.UID;
                        view.Position = (Positions)pos;
                        if (i != null)
                            view.ParseItem(i);

                        client.Send(view);
                        if (i != null)
                        {
                            i.SendExtras(client);
                        }
                    }
                }
                _String packet = new _String(true);
                packet.Type = 16;
                packet.UID = client.Entity.UID;
                packet.TextsCount = 1;
                packet.Texts = new List<string>() { pclient.Entity.Spouse };
                client.Send(packet);
                packet.Type = 10;
                client.Send(packet);

                client.Send(generalData);
                //Console.WriteLine("k i m o" + generalData.dwParam + "");
            }

        }
        static void ObserveEquipment2(Data generalData, Client.GameState client)
        {
            if (NulledClient(client))
                return;

            Client.GameState pclient = null;

            if (Kernel.GamePool.TryGetValue(generalData.dwParam, out pclient))
            {

                byte[] array = new byte[pclient.Entity.SpawnPacket.Length];
                pclient.Entity.SpawnPacket.CopyTo(array, 0);
                array[0x6d] = 0;
                client.Send(array);
                pclient.Send(new Message(client.Entity.Name + " is observing your gear carefully.", System.Drawing.Color.Red, Message.TopLeft));

                client.Send(WindowStats(pclient));
                if (!pclient.AlternateEquipment)
                {
                    for (Byte pos = (Byte)Positions.Head; pos <= (Byte)Positions.SteedTalisman; pos++)
                    {
                        Interfaces.IConquerItem i = pclient.Equipment.TryGetItem((Byte)pos);

                        BoothItem2 view = new BoothItem2();
                        view.CostType = BoothItem2.CostTypes.ViewEquip;
                        view.Identifier = pclient.Entity.UID;
                        view.Position = (Positions)pos;
                        if (i != null)
                            view.ParseItem(i);

                        client.Send(view);
                        if (i != null)
                        {
                            i.SendExtras(client);
                        }
                    }
                }
                else
                {
                    for (Byte pos = (Byte)Positions.AttackTalisman; pos <= (Byte)Positions.AltGarment; pos++)
                    {
                        Interfaces.IConquerItem i = pclient.Equipment.TryGetItem((Byte)pos);

                        BoothItem2 view = new BoothItem2();
                        view.CostType = BoothItem2.CostTypes.ViewEquip;
                        view.Identifier = pclient.Entity.UID;
                        view.Position = (Positions)pos;
                        if (i != null)
                            view.ParseItem(i);

                        client.Send(view);
                        if (i != null)
                        {
                            i.SendExtras(client);
                        }
                    }
                }
                _String packet = new _String(true);
                packet.Type = 16;
                packet.UID = client.Entity.UID;
                packet.TextsCount = 1;
                packet.Texts = new List<string>() { pclient.Entity.Spouse };
                client.Send(packet);
                packet.Type = 10;
                client.Send(packet);

                client.Send(generalData);
                //Console.WriteLine("k i m o" + generalData.dwParam + "");
            }

        }
        static void ChangeGear(Data generalData, Client.GameState client)
        {
            /* Console.WriteLine("1 " + generalData.UID+ "");
             Console.WriteLine("2 " + generalData.ID + "");
             Console.WriteLine("3 " + generalData.dwParam + "");
             Console.WriteLine("4 " + generalData.wParam1 + "");
             Console.WriteLine("5 " + generalData.wParam2 + "");
             Console.WriteLine("6 " + generalData.wParam3 + "");
             Console.WriteLine("7 " + generalData.wParam4+ "");*/

        }
        static void ChangeFace(Data generalData, Client.GameState client)
        {
            if (client.Entity.Money >= 500)
            {
                uint newface = generalData.dwParam;
                if (client.Entity.Body > 2000)
                {
                    newface = newface < 200 ? newface + 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
                else
                {
                    newface = newface > 200 ? newface - 200 : newface;
                    client.Entity.Face = (ushort)newface;
                }
            }
        }
        static void PlayerJump(Data generalData, Client.GameState client)
        {
            // Console.WriteLine("Jump Sec " + DateTime.Now.Second + " Mile " + DateTime.Now.Millisecond + "");
            //Console.WriteLine("" + generalData + "");

            client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
            client.Mining = false;
            /* #region SpeedHack Check
             if (Time32.Now > client.speedsleep.AddSeconds(60))
             {
                 client.speedHackSuspiction += 1;
                 //Console.WriteLine("SpeedHack sus "+client.speedHackSuspiction+" ");
                 if (Time32.Now > client.speedHackTime.AddSeconds(2))
                 {
                     client.speedHackTime = Time32.Now;
                     client.speedHackSuspiction = 0;
                 }
                 if (client.Entity.TransformationID == 0)
                 {
                     if (client.speedHackSuspiction > 5 && !client.Entity.OnCyclone() && !client.Entity.ContainsFlag(Update.Flags2.Oblivion) && !client.Entity.ContainsFlag(Update.Flags.Ride))
                     {
                         if (client.Entity.MapID != 6004)
                         {
                             client.HackTime += 1;
                             client.speedHackTime = Time32.Now;
                             client.speedsleep = Time32.Now;
                             client.speedHackSuspiction = 0;
                             //client.Entity.Teleport(6004, 30, 74);
                             if (client.HackTime < 3)
                             {
                                 PhoenixProject.ServerBase.Kernel.SendWorldMessage(new PhoenixProject.Network.GamePackets.Message("[GM]: " + client.Entity.Name + " is using SpeedHack, Using SpeedHack Times " + client.HackTime + " Time/s he still have " + (3 - client.HackTime) + " Warn then we will kick his/her ass Out!", System.Drawing.Color.Black, PhoenixProject.Network.GamePackets.Message.Center), PhoenixProject.ServerBase.Kernel.GamePool.Values);
                             }
                             else
                             {
                                 client.HackTime += 1;
                                 client.speedHackTime = Time32.Now;
                                 client.speedHackSuspiction = 0;
                                 client.Entity.Teleport(6004, 30, 74);
                                 PhoenixProject.ServerBase.Kernel.SendWorldMessage(new PhoenixProject.Network.GamePackets.Message("[GM]: " + client.Entity.Name + "  used SpeedHack for Three Times and sent to Botjail ,TakeCare of your account!", System.Drawing.Color.Black, PhoenixProject.Network.GamePackets.Message.Center), PhoenixProject.ServerBase.Kernel.GamePool.Values);
                             }
                         }
                     }
                 }
             }
             #endregion*/

            #region MagicDefender
            if (client.Entity.ContainsFlag3(Network.GamePackets.Update.Flags3.MagicDefender))
            {

                client.Entity.MagicDefenderTime = 0;
                client.Entity.MagicDefenderIncrease = 0;
                client.Entity.RemoveFlag3(Network.GamePackets.Update.Flags3.MagicDefender);
                SyncPacket packet = new SyncPacket
                {
                    Identifier = client.Entity.UID,
                    Count = 2,
                    Type = PhoenixProject.Network.GamePackets.SyncPacket.SyncType.StatusFlag,
                    StatusFlag1 = (ulong)client.Entity.StatusFlag,
                    StatusFlag2 = (ulong)client.Entity.StatusFlag2,
                    Unknown1 = 0x31,
                    StatusFlagOffset = 0x80,
                    Time = 0,
                    Value = 0,
                    Level = 0
                };
                client.Entity.Owner.Send((byte[])packet);
                foreach (var Client in client.MagicDef)
                {
                    if (Client.Entity.ContainsFlag2(Update.Flags2.kimo4))
                    {
                        Client.Entity.RemoveFlag2(Update.Flags2.kimo4);
                    }
                }
                client.MagicDef.Clear();
            }
            #endregion

            #region Pray
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }

            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                if (client.PrayLead != null)
                {
                    client.PrayLead.Prayers.Remove(client);
                    client.PrayLead = null;
                }
            }
            #endregion

            Time32 Now = Time32.Now;

            client.Attackable = true;
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.Dead)
            {
                if (Now > client.Entity.DeathStamp.AddSeconds(4))
                {
                    //client.Disconnect();
                    return;
                }
            }

            ushort new_X = (ushort)(generalData.dwParam & 0xFFFF);
            ushort new_Y = (ushort)(generalData.dwParam >> 16);

            if (client.lastJumpDistance == 0) goto Jump;
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
            {
                int distance = ServerBase.Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
                ushort take = (ushort)(1.5F * (distance / 2));
                if (client.Entity.Vigor >= take)
                {
                    client.Entity.Vigor -= take;
                    Network.GamePackets.Vigor vigor = new Network.GamePackets.Vigor(true);
                    vigor.VigorValue = client.Entity.Vigor;
                    vigor.Send(client);
                }
                else
                {
                }
            }
            client.LastJumpTime = (int)ServerBase.Kernel.maxJumpTime(client.lastJumpDistance);
            int a1 = Now.GetHashCode() - client.lastJumpTime.GetHashCode();
            int a2 = generalData.TimeStamp.GetHashCode() - client.lastClientJumpTime.GetHashCode();
            bool DOO = false;
            if (a2 - a1 > 1000) DOO = true;
            if (Now < client.lastJumpTime.AddMilliseconds(client.LastJumpTime))
            {
                bool doDisconnect = false;
                if (client.Entity.Transformed)
                    if (client.Entity.TransformationID != 207 && client.Entity.TransformationID != 267)
                        doDisconnect = true;
                if (client.Entity.Transformed && doDisconnect)
                {
                }
                if (client.Entity.Transformed && !doDisconnect)
                {
                    goto Jump;
                }
                if (!client.Entity.OnCyclone() && !client.Entity.ContainsFlag(Update.Flags2.Oblivion) && !client.Entity.ContainsFlag(Update.Flags.Ride) && !DOO)
                {
                }
                else if (client.Entity.ContainsFlag(Update.Flags.Ride))
                {
                    int time = (int)ServerBase.Kernel.maxJumpTime(client.lastJumpDistance);
                    int speedprc = Database.DataHolder.SteedSpeed(client.Equipment.TryGetItem(ConquerItem.Steed).Plus);
                    if (speedprc != 0)
                    {
                        if (Now < client.lastJumpTime.AddMilliseconds(time - (time * speedprc / 100)))
                        {
                        }
                    }
                    else
                    {
                    }
                }
            }
        Jump:
            client.lastJumpDistance = ServerBase.Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y);
            client.lastClientJumpTime = generalData.TimeStamp;
            client.lastJumpTime = Now;
            Game.Map Map = client.Map;
            if (Map != null)
            {
                if (Map.Floor[new_X, new_Y, Game.MapObjectType.Player, null])
                {
                    if (ServerBase.Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 20)
                    {
                        client.Entity.Action = Game.Enums.ConquerAction.Jump;
                        client.Entity.Facing = ServerBase.Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                        client.Entity.PX = client.Entity.X;
                        client.Entity.PY = client.Entity.Y;
                        client.Entity.X = new_X;
                        client.Entity.Y = new_Y;
                        client.SendScreen(generalData, true);
                        client.Screen.Reload(generalData);
                        if (client.Entity.MapID == 1005)
                        {
                            if (new_X == 42 && new_Y == 51)//stig
                            {
                                if (!client.Entity.ContainsFlag(Update.Flags.Stigma) && !client.Entity.ContainsFlag(Update.Flags.Ghost))
                                {
                                    SpellUse suse = new SpellUse(true);
                                    suse.Attacker = client.Entity.UID;
                                    suse.SpellID = 1095;
                                    suse.SpellLevel = 3;
                                    suse.X = 42;
                                    suse.Y = 51;
                                    suse.Targets.Add(client.Entity.UID, 0);
                                    client.Entity.AddFlag(Update.Flags.Stigma);
                                    client.Entity.StigmaStamp = Time32.Now;
                                    client.Entity.StigmaIncrease = 25;
                                    client.Entity.StigmaTime = 20;
                                    client.SendScreen(suse, true);
                                    if (client.Entity.EntityFlag == PhoenixProject.Game.EntityFlag.Player)
                                        client.Send(ServerBase.Constants.Stigma(25, 20));
                                }
                            }
                            else
                            {
                                if (new_X == 42 && new_Y == 48)//rev
                                {
                                    if (client.Entity.ContainsFlag(Update.Flags.Ghost))
                                    {
                                        SpellUse suse = new SpellUse(true);
                                        suse.Attacker = client.Entity.UID;
                                        suse.SpellID = 1050;
                                        suse.SpellLevel = 0;
                                        suse.X = 42;
                                        suse.Y = 48;
                                        suse.Targets.Add(client.Entity.UID, 0);
                                        client.SendScreen(suse, true);
                                        client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
                                        client.ReviveStamp = Time32.Now;
                                        client.Attackable = false;
                                        client.Entity.TransformationID = 0;
                                        client.Entity.RemoveFlag(Update.Flags.Dead);
                                        client.Entity.RemoveFlag(Update.Flags.Ghost);
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        client.Entity.Ressurect();

                                    }
                                }

                            }
                        }
                        if (client.Entity.MapID == 1002)
                        {
                            if (new_X == 436 && new_Y == 444)//stig
                            {
                                if (!client.Entity.ContainsFlag(Update.Flags.Ghost))
                                {
                                    if (client.Entity.EntityFlag == PhoenixProject.Game.EntityFlag.Player && client.Entity.MaxHitpoints != client.Entity.Hitpoints)
                                    {
                                        SpellUse suse = new SpellUse(true);
                                        suse.Attacker = client.Entity.UID;
                                        suse.SpellID = 1195;
                                        suse.SpellLevel = 0;
                                        suse.X = 436;
                                        suse.Y = 444;
                                        uint Hp = (client.Entity.MaxHitpoints - client.Entity.Hitpoints);
                                        client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                                        suse.Targets.Add(client.Entity.UID, Hp);
                                        client.SendScreen(suse, true);
                                        client.Send(new Message("Your HP Now : " + client.Entity.Hitpoints + "!", System.Drawing.Color.Red, Message.Talk));
                                    }
                                }
                            }

                        }

                        if (client.Entity.InteractionInProgress && client.Entity.InteractionSet)
                        {
                            if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                            {
                                if (ServerBase.Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                                {
                                    Client.GameState ch = ServerBase.Kernel.GamePool[client.Entity.InteractionWith];
                                    PhoenixProject.Network.GamePackets.Data general = new PhoenixProject.Network.GamePackets.Data(true);
                                    general.UID = ch.Entity.UID;
                                    general.wParam1 = new_X;
                                    general.wParam2 = new_Y;
                                    general.ID = 0x9c;
                                    ch.Send(general.ToArray());
                                    ch.Entity.Action = Game.Enums.ConquerAction.Jump;
                                    ch.Entity.X = new_X;
                                    ch.Entity.Y = new_Y;
                                    ch.Entity.Facing = ServerBase.Kernel.GetAngle(ch.Entity.X, ch.Entity.Y, new_X, new_Y);
                                    ch.SendScreen(generalData, true);
                                    ch.Screen.Reload(general);
                                    client.SendScreen(generalData, true);
                                    client.Screen.Reload(general);
                                }
                            }
                        }
                    }
                    else
                    {
                        client.Disconnect();
                    }
                }
                else
                {
                    if (client.Entity.Mode == Game.Enums.Mode.None)
                    {
                        client.Entity.Teleport(client.Map.ID, client.Entity.X, client.Entity.Y);
                    }
                }
            }
            else
            {
                if (ServerBase.Kernel.GetDistance(new_X, new_Y, client.Entity.X, client.Entity.Y) <= 20)
                {
                    client.Entity.Action = Game.Enums.ConquerAction.Jump;
                    client.Entity.Facing = ServerBase.Kernel.GetAngle(generalData.wParam1, generalData.wParam2, new_X, new_Y);
                    client.Entity.X = new_X;
                    client.Entity.Y = new_Y;
                    client.SendScreen(generalData, true);
                    client.Screen.Reload(generalData);
                }
                else
                {
                    client.Disconnect();
                }
            }
            client.Entity.MapRegion = Region.Region.FindRegion((uint)client.Map.BaseID, client.Entity.X, client.Entity.Y);
        }
        public static byte[] WindowStats(Client.GameState client)
        {
            /*Byte[] mData = new Byte[136 + 8];
            Writer.WriteUInt16((UInt16)(mData.Length - 8), 0, mData);
            Writer.WriteUInt16((UInt16)1040, 2, mData);*/
            byte[] mData = new byte[136 + 8];//132
            Writer.WriteUInt16(136, 0, mData);
            Writer.WriteUInt16(1040, 2, mData);
            Writer.WriteUInt32(client.Entity.UID, 4, mData);
            Writer.WriteUInt32(client.Entity.MaxHitpoints, 8, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MaxMana, 12, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MaxAttack, 16, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MinAttack, 20, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Defence, 24, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MagicAttack, 28, mData);
            Writer.WriteUInt32((UInt32)client.Entity.MagicDefence, 32, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Dodge, 36, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Agility, 40, mData);
            //Writer.WriteUInt32((UInt32)(client.Entity.Gems[13] * 100), 48, mData);
            Writer.WriteUInt32((UInt32)client.Entity.ItemBless, 64, mData);
            Writer.WriteUInt32((UInt32)client.Entity.CriticalStrike, 68, mData);
            Writer.WriteUInt32((UInt32)client.Entity.SkillCStrike, 72, mData);

            Writer.WriteUInt32((UInt32)client.Entity.Immunity, 76, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Penetration, 80, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Block, 84, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Breaktrough, 88, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Counteraction, 92, mData);
            Writer.WriteUInt32((UInt32)client.Entity.Detoxication, 96, mData);
            Writer.WriteUInt32((UInt32)client.Entity.PhysicalDamageIncrease, 100, mData); // Final + Atk
            Writer.WriteUInt32((UInt32)client.Entity.MagicDamageIncrease, 104, mData); // Final + MAtk
            Writer.WriteUInt32((UInt32)client.Entity.PhysicalDamageDecrease, 108, mData); // Final - Dmg
            Writer.WriteUInt32((UInt32)client.Entity.MagicDamageDecrease, 112, mData); // Final - MDmg
            Writer.WriteUInt32((UInt32)client.Entity.MetalResistance, 116, mData);
            Writer.WriteUInt32((UInt32)client.Entity.WoodResistance, 120, mData);
            Writer.WriteUInt32((UInt32)client.Entity.WaterResistance, 124, mData);
            Writer.WriteUInt32((UInt32)client.Entity.FireResistance, 128, mData);
            Writer.WriteUInt32((UInt32)client.Entity.EarthResistance, 132, mData);
            return mData;
        }
        static void PlayerGroundMovment(GroundMovement groundMovement, Client.GameState client)
        {

            client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
            client.Attackable = true;
            client.Mining = false;

            if (client.Entity.ContainsFlag3(Network.GamePackets.Update.Flags3.MagicDefender))
            {

                client.Entity.MagicDefenderTime = 0;
                client.Entity.MagicDefenderIncrease = 0;
                client.Entity.RemoveFlag3(Network.GamePackets.Update.Flags3.MagicDefender);
                SyncPacket packet = new SyncPacket
                {
                    Identifier = client.Entity.UID,
                    Count = 2,
                    Type = PhoenixProject.Network.GamePackets.SyncPacket.SyncType.StatusFlag,
                    StatusFlag1 = (ulong)client.Entity.StatusFlag,
                    StatusFlag2 = (ulong)client.Entity.StatusFlag2,
                    Unknown1 = 0x31,
                    StatusFlagOffset = 0x80,
                    Time = 0,
                    Value = 0,
                    Level = 0
                };
                client.Entity.Owner.Send((byte[])packet);
                foreach (var Client in client.MagicDef)
                {
                    if (Client.Entity.ContainsFlag2(Update.Flags2.kimo4))
                    {
                        Client.Entity.RemoveFlag2(Update.Flags2.kimo4);
                    }
                }
                client.MagicDef.Clear();
            }
            if (client.Entity.ContainsFlag(Update.Flags.CastPray))
            {
                client.Entity.RemoveFlag(Update.Flags.CastPray);
                foreach (var Client in client.Prayers)
                {
                    if (Client.Entity.ContainsFlag(Update.Flags.Praying))
                    {
                        Client.Entity.RemoveFlag(Update.Flags.Praying);
                    }
                }
                client.Prayers.Clear();
            }
            if (client.Entity.ContainsFlag(Update.Flags.Praying))
            {
                client.Entity.RemoveFlag(Update.Flags.Praying);
                if (client.PrayLead != null)
                    client.PrayLead.Prayers.Remove(client);
                client.PrayLead = null;
            }
            if (client.Entity.AttackPacket != null)
            {
                client.Entity.AttackPacket = null;
            }
            if (client.Entity.ContainsFlag(Update.Flags.Ride))
                client.Entity.Vigor -= 1;
            client.Entity.PX = client.Entity.X;
            client.Entity.PY = client.Entity.Y;


            if ((byte)groundMovement.Direction > 7)
                groundMovement.Direction = (PhoenixProject.Game.Enums.ConquerAngle)((byte)groundMovement.Direction % 8);

            client.Entity.Move(groundMovement.Direction);

            if (groundMovement.GroundMovementType == GroundMovement.TwoCoordonates)
                client.Entity.Move(groundMovement.Direction);

            client.SendScreen(groundMovement, true);
            client.Screen.Reload(groundMovement);
            if (client.Entity.MapID == 1002)
            {
                if (client.Entity.X == 436 && client.Entity.Y == 444)//stig
                {
                    if (!client.Entity.ContainsFlag(Update.Flags.Ghost))
                    {
                        if (client.Entity.EntityFlag == PhoenixProject.Game.EntityFlag.Player && client.Entity.MaxHitpoints != client.Entity.Hitpoints)
                        {
                            SpellUse suse = new SpellUse(true);
                            suse.Attacker = client.Entity.UID;
                            suse.SpellID = 1195;
                            suse.SpellLevel = 0;
                            suse.X = 436;
                            suse.Y = 444;
                            uint Hp = (client.Entity.MaxHitpoints - client.Entity.Hitpoints);
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            suse.Targets.Add(client.Entity.UID, Hp);
                            client.SendScreen(suse, true);
                            client.Send(new Message("Your HP Now : " + client.Entity.Hitpoints + "!", System.Drawing.Color.Red, Message.Talk));
                        }
                    }
                }

            }
            if (client.Entity.MapID == 1005)
            {
                if (client.Entity.X == 42 && client.Entity.Y == 51)//stig
                {
                    if (!client.Entity.ContainsFlag(Update.Flags.Stigma) && !client.Entity.ContainsFlag(Update.Flags.Ghost))
                    {
                        SpellUse suse = new SpellUse(true);
                        suse.Attacker = client.Entity.UID;
                        suse.SpellID = 1095;
                        suse.SpellLevel = 3;
                        suse.X = 42;
                        suse.Y = 51;
                        suse.Targets.Add(client.Entity.UID, 0);
                        client.Entity.AddFlag(Update.Flags.Stigma);
                        client.Entity.StigmaStamp = Time32.Now;
                        client.Entity.StigmaIncrease = 25;
                        client.Entity.StigmaTime = 20;
                        client.SendScreen(suse, true);
                        if (client.Entity.EntityFlag == PhoenixProject.Game.EntityFlag.Player)
                            client.Send(ServerBase.Constants.Stigma(25, 20));
                    }
                }
                else
                {
                    if (client.Entity.X == 42 && client.Entity.Y == 48)//rev
                    {
                        if (client.Entity.ContainsFlag(Update.Flags.Ghost))
                        {
                            SpellUse suse = new SpellUse(true);
                            suse.Attacker = client.Entity.UID;
                            suse.SpellID = 1050;
                            suse.SpellLevel = 0;
                            suse.X = 42;
                            suse.Y = 48;
                            suse.Targets.Add(client.Entity.UID, 0);
                            client.SendScreen(suse, true);
                            client.Entity.Action = PhoenixProject.Game.Enums.ConquerAction.None;
                            client.ReviveStamp = Time32.Now;
                            client.Attackable = false;
                            client.Entity.TransformationID = 0;
                            client.Entity.RemoveFlag(Update.Flags.Dead);
                            client.Entity.RemoveFlag(Update.Flags.Ghost);
                            client.Entity.Hitpoints = client.Entity.MaxHitpoints;
                            client.Entity.Ressurect();

                        }
                    }

                }
            }
            if (client.Entity.InteractionInProgress)
            {
                if (!client.Entity.InteractionSet)
                {
                    if (ServerBase.Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                    {
                        Client.GameState ch = ServerBase.Kernel.GamePool[client.Entity.InteractionWith];
                        if (ch.Entity.InteractionInProgress && ch.Entity.InteractionWith == client.Entity.UID)
                        {
                            if (client.Entity.InteractionX == client.Entity.X && client.Entity.Y == client.Entity.InteractionY)
                            {
                                if (client.Entity.X == ch.Entity.X && client.Entity.Y == ch.Entity.Y)
                                {
                                    Network.GamePackets.Attack atac = new Network.GamePackets.Attack(true);
                                    atac.Attacker = ch.Entity.UID;
                                    atac.Attacked = client.Entity.UID;
                                    atac.X = ch.Entity.X;
                                    atac.Y = ch.Entity.Y;
                                    atac.Damage = client.Entity.InteractionType;
                                    atac.AttackType = 47;
                                    ch.Send(atac);

                                    atac.AttackType = 49;
                                    atac.Attacker = client.Entity.UID;
                                    atac.Attacked = ch.Entity.UID;
                                    client.SendScreen(atac, true);

                                    atac.Attacker = ch.Entity.UID;
                                    atac.Attacked = client.Entity.UID;
                                    client.SendScreen(atac, true);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (client.Entity.Body == 1003 || client.Entity.Body == 1004)
                    {
                        if (ServerBase.Kernel.GamePool.ContainsKey(client.Entity.InteractionWith))
                        {
                            Client.GameState ch = ServerBase.Kernel.GamePool[client.Entity.InteractionWith];

                            ch.Entity.Facing = groundMovement.Direction;
                            ch.Entity.Move(groundMovement.Direction);
                            Network.GamePackets.Data general = new Network.GamePackets.Data(true);
                            general.UID = ch.Entity.UID;
                            general.wParam1 = ch.Entity.X;
                            general.wParam2 = ch.Entity.Y;
                            general.ID = 0x9c;
                            ch.Send(general.ToArray());
                            ch.Screen.Reload(null);
                        }
                    }
                }
            }
            client.Entity.MapRegion = Region.Region.FindRegion((uint)client.Map.BaseID, client.Entity.X, client.Entity.Y);
        }
        static void GetSurroundings(Client.GameState client)
        {
            client.Screen.FullWipe();
            client.Screen.Reload(null);
        }
        static void ChangeAction(Data generalData, Client.GameState client)
        {
            client.Entity.Action = (ushort)generalData.dwParam;
            if (client.Entity.ContainsFlag(Network.GamePackets.Update.Flags.CastPray))
            {
                foreach (var Client in client.Prayers)
                {
                    generalData.UID = Client.Entity.UID;
                    generalData.dwParam = (uint)client.Entity.Action;
                    generalData.wParam1 = Client.Entity.X;
                    generalData.wParam2 = Client.Entity.Y;
                    Client.Entity.Action = client.Entity.Action;
                    if (Time32.Now >= Client.CoolStamp.AddMilliseconds(1500))
                    {
                        if (Client.Equipment.IsAllSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000 + 0x1000000));
                        else if (Client.Equipment.IsArmorSuper())
                            generalData.dwParam = (uint)(generalData.dwParam | (uint)(Client.Entity.Class * 0x10000));
                        Client.SendScreen(generalData, true);
                        Client.CoolStamp = Time32.Now;
                    }
                    else
                        Client.SendScreen(generalData, false);
                }
            }
            generalData.UID = client.Entity.UID;
            generalData.dwParam = (uint)client.Entity.Action;
            if (client.Entity.Action == PhoenixProject.Game.Enums.ConquerAction.Cool)
            {
                if (Time32.Now >= client.CoolStamp.AddMilliseconds(1500))
                {
                    if (client.Equipment.IsAllSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000 + 0x1000000));
                    else if (client.Equipment.IsArmorSuper())
                        generalData.dwParam = (uint)(generalData.dwParam | (uint)(client.Entity.Class * 0x10000));
                    client.SendScreen(generalData, true);
                    client.CoolStamp = Time32.Now;
                }
                else
                    client.SendScreen(generalData, false);
            }
            else
                client.SendScreen(generalData, false);
        }
        static void ChangeDirection(Data generalData, Client.GameState client)
        {
            client.Entity.Facing = (Game.Enums.ConquerAngle)generalData.Facing;
            client.SendScreen(generalData, false);
        }
        static void ChangePKMode(Data generalData, Client.GameState client)
        {
            client.Entity.AttackPacket = null;
            client.Entity.PKMode = (Game.Enums.PKMode)(byte)generalData.dwParam;
            client.Send(generalData);

            if (client.Entity.PKMode == Game.Enums.PKMode.PK)
            {

                client.Send(new Message("Free PK mode. You can attack monster and all players.", System.Drawing.Color.Red, Message.Talk));
                return;
            }

            if (client.Entity.PKMode == Game.Enums.PKMode.Capture)
            {

                client.Send(new Message("Capture PK mode. You can only attack monsters, black-name and blue-name players.", System.Drawing.Color.Red, Message.Talk));
                return;
            }

            if (client.Entity.PKMode == Game.Enums.PKMode.Peace)
            {

                client.Send(new Message("Peace mode. You can only attack monsters.", System.Drawing.Color.Red, Message.Talk));
                return;
            }

            if (client.Entity.PKMode == Game.Enums.PKMode.Team)
            {

                client.Send(new Message("Team PK mode. You can attack monster and all players except your teammates.", System.Drawing.Color.Red, Message.Talk));
                return;
            }
        }
        static void SetLocation(Data generalData, Client.GameState client)
        {
            if (!client.Entity.FullyLoaded) client.Disconnect();

            if (client.Guild != null)
                client.Guild.SendGuild(client);
            foreach (Game.ConquerStructures.Society.Guild guild in ServerBase.Kernel.Guilds.Values)
            {
                guild.SendName(client);
                guild.SendName(client);
            }
            Game.Clans clan = client.Entity.Myclan;
            if (clan != null)
            {
                //clan.Build(client, Game.Clan_Typ.Info);
                //client.Send(clan);

                client.Entity.ClanName = clan.ClanName;

                client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Allies));
                client.Send(new ClanRelations(clan, ClanRelations.RelationTypes.Enemies));
            }



            if (client.Entity.EnlightmentTime > 0)
            {
                Enlight enlight = new Enlight(true);
                enlight.Enlighted = client.Entity.UID;
                enlight.Enlighter = 0;

                if (client.Entity.EnlightmentTime > 80)
                    client.Entity.EnlightmentTime = 100;
                else if (client.Entity.EnlightmentTime > 60)
                    client.Entity.EnlightmentTime = 80;
                else if (client.Entity.EnlightmentTime > 40)
                    client.Entity.EnlightmentTime = 60;
                else if (client.Entity.EnlightmentTime > 20)
                    client.Entity.EnlightmentTime = 40;
                else if (client.Entity.EnlightmentTime > 0)
                    client.Entity.EnlightmentTime = 20;
                for (int count = 0; count < client.Entity.EnlightmentTime; count += 20)
                {
                    client.Send(enlight);
                }
            }

            if (client.Entity.Hitpoints != 0)
            {
                if (client.Map.ID == 1036 || client.Map.ID == 1039)
                {
                    if (client.Entity.PreviousMapID == 0)
                        client.Entity.SetLocation(1002, 430, 378);
                    else
                    {
                        switch (client.Entity.PreviousMapID)
                        {
                            default:
                                {
                                    client.Entity.SetLocation(1002, 429, 378);
                                    break;
                                }
                            case 1000:
                                {
                                    client.Entity.SetLocation(1000, 500, 650);
                                    break;
                                }
                            case 1020:
                                {
                                    client.Entity.SetLocation(1020, 565, 562);
                                    break;
                                }
                            case 1011:
                                {
                                    client.Entity.SetLocation(1011, 188, 264);
                                    break;
                                }
                            case 1015:
                                {
                                    client.Entity.SetLocation(1015, 717, 571);
                                    break;
                                }
                        }
                    }
                }
            }
            else
            {
                ushort[] Point = Database.DataHolder.FindReviveSpot(client.Map.ID);
                client.Entity.SetLocation(Point[0], Point[1], Point[2]);
            }
            generalData.dwParam = (uint)client.Map.BaseID;
            generalData.wParam1 = client.Entity.X;
            generalData.wParam2 = client.Entity.Y;
            client.Send(generalData);
        }
        static void AppendConnect(Connect appendConnect, Client.GameState client)
        {
            if (client.LoggedIn)
                return;
            Database.AccountTable Account = null;
            if (client.JustCreated)
            {

                string Message = "NEW_ROLE";
                if (client.Account.EntityID != 0)
                    Message = "ANSWER_OK";
                if (client.Account.State == Database.AccountTable.AccountState.Banned)
                    Message = "You are banned.";
                if (client.Account.State == Database.AccountTable.AccountState.Banned)
                    Message = "You are banned.";
                if (client.Account.State == Database.AccountTable.AccountState.Aimbot)
                    Message = "You are banned.";
                if (client.Account.State == Database.AccountTable.AccountState.BadWords)
                    Message = "You are banned.";
                if (client.Account.State == Database.AccountTable.AccountState.Cheat)
                    Message = "You are banned.";
                if (client.Account.State == Database.AccountTable.AccountState.NotActivated)
                {
                    Message = "You cannot login until your account is activated.";
                }
                if (Message == "ANSWER_OK")
                {
                    if (ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID))
                    {
                        Client.GameState aClient = null;
                        ServerBase.Kernel.GamePool.TryGetValue(client.Account.EntityID, out aClient);
                        if (aClient != null)
                        {

                            aClient.DoSetOffline = false;
                            aClient.Disconnect();
                        }
                        else
                        {
                            if (ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID))
                            {
                                ServerBase.Kernel.GamePool.Remove(client.Account.EntityID);
                            }
                            if (ServerBase.Kernel.WasInGamePool.ContainsKey(client.Account.EntityID))
                            {
                                ServerBase.Kernel.WasInGamePool.Remove(client.Account.EntityID);
                            }
                        }
                    }

                    client.JustCreated = false;
                    client.ItemGive = true;
                    DoLogin(client);
                    /*if (ServerBase.Kernel.AwaitingPool.ContainsKey(appendConnect.Identifier))
                    {
                        ServerBase.Kernel.AwaitingPool.Remove(appendConnect.Identifier);
                    }*/
                    return;
                }
                else if (Message == "NEW_ROLE")
                {

                    client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                    return;
                }

                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));


            }

            if (ServerBase.Kernel.AwaitingPool.ContainsKey(appendConnect.Identifier))
            {
                ServerBase.Kernel.AwaitingPool.TryGetValue(appendConnect.Identifier, out Account);
                ServerBase.Kernel.AwaitingPool.Remove(appendConnect.Identifier);
                if (Account != null)
                {
                    client.Account = Account;
                    string Message = "NEW_ROLE";
                    if (client.Account.EntityID != 0)
                        Message = "ANSWER_OK";

                    if (Account.State == Database.AccountTable.AccountState.Banned)
                        Message = "You are banned.";
                    if (Account.State == Database.AccountTable.AccountState.Aimbot)
                        Message = "You are banned for 2 days for using Aimbot-SpeedHack.";
                    if (Account.State == Database.AccountTable.AccountState.BadWords)
                        Message = "You are banned for 2 days for BadWords in (BroadCast) .";
                    if (Account.State == Database.AccountTable.AccountState.Spam)
                        Message = "You are banned for 1 days for Spam .";
                    if (Account.State == Database.AccountTable.AccountState.NotActivated)
                    {
                        Message = "You cannot login until your account is activated.";
                    }
                    if (Account.State == Database.AccountTable.AccountState.Cheat)
                    {
                        Message = "You are idoit thats why you got banned CheatEngine not allowed here [Kimo]!";
                    }
                    if (Message == "ANSWER_OK")
                    {
                        if (ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID))
                        {
                            Client.GameState aClient = null;
                            ServerBase.Kernel.GamePool.TryGetValue(client.Account.EntityID, out aClient);
                            if (aClient != null)
                            {

                                aClient.DoSetOffline = false;
                                aClient.Disconnect();
                            }
                            else
                            {
                                if (ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID))
                                {
                                    ServerBase.Kernel.GamePool.Remove(client.Account.EntityID);
                                }
                                if (ServerBase.Kernel.WasInGamePool.ContainsKey(client.Account.EntityID))
                                {
                                    ServerBase.Kernel.WasInGamePool.Remove(client.Account.EntityID);
                                }
                            }
                        }

                        client.SocketDisposed = false;
                        DoLogin(client);

                        return;
                    }
                    else if (Message == "NEW_ROLE")
                    {

                        client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                        return;
                    }

                    client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                }
            }
        }

        static void DoLogin(object _client)
        {
            Client.GameState client = _client as Client.GameState;
            client.SocketDisposed = false;
            client.ReadyToPlay();
            string Message = "ANSWER_OK";
            Database.EntityTable.LoadEntity(client);
            if (client.Entity != null)
            {
                if (client.Entity.FullyLoaded)
                {
                    PhoenixProject.Database.ConquerItemTable.LoadItems(client);
                    PhoenixProject.Database.FlowerSystemTable.Flowers(client);
                    PhoenixProject.Database.ClaimItemTable.LoadClaimableItems(client);
                    PhoenixProject.Database.DetainedItemTable.LoadDetainedItems(client);
                    Database.SubClassTable.Load(client.Entity);
                    Game.Tournaments.EliteTournament.LoginClient(client);
                    // Database.EntityTable.LoadDonation(client);
                    PhoenixProject.Database.SkillTable.LoadProficiencies(client);
                    PhoenixProject.Database.SkillTable.LoadSpells(client);
                    PhoenixProject.Database.KnownPersons.LoadPartner(client);
                    PhoenixProject.Database.KnownPersons.LoadEnemy(client);
                    PhoenixProject.Database.KnownPersons.LoaderFriends(client);
                    PhoenixProject.Database.KnownPersons.LoadMentor(client);
                    Database.ReincarnationTable.Load(client);
                    // PhoenixProject.Database.PkExpelTable.Load(client);



                    #region Game Updates
                    client.Send(new GameUpdates(GameUpdates.Header, "" + Database.GameUpdatess.Header + "" + DateTime.Now.ToString()));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "Game Coded By:" + PhoenixProject.Database.rates.coder + " ,Patch 5679"));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body1 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body2 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body3 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body4 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body5 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Body, "" + Database.GameUpdatess.Body6 + ""));
                    client.Send(new GameUpdates(GameUpdates.Body, ""));
                    client.Send(new GameUpdates(GameUpdates.Footer, "Enjoy Playing " + PhoenixProject.Database.rates.servername + " with us and invite friends! Coded By:" + PhoenixProject.Database.rates.coder + ""));
                    #endregion
                }
            }
            else
            {
                Message = "Your character has been deleted";
                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                return;
            }


            if (client.Entity == null || client.Entity.Name == null)
            {
                Message = "There is something wrong. You may not login.";
                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                return;
            }

            if (ServerBase.Kernel.GamePool.Count >= Program.PlayerCap)
            {
                Message = "Player limit exceeded. (Online players: " + ServerBase.Kernel.GamePool + "/" + Program.PlayerCap + ")";
                client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                return;
            }



            client.Logger = new Logger(client.Entity.Name);
            if (ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID) || ServerBase.Kernel.WasInGamePool.ContainsKey(client.Account.EntityID))
            {
                //ServerBase.Kernel.GamePool.Remove(client.Account.EntityID);
                // client.Disconnect6();
                //client.Account.State = Database.AccountTable.AccountState.Banned;
                //client.Account.Savekimo();
                Console.WriteLine(client.Entity.Name + " New role  by " + PhoenixProject.Database.rates.servername + " account hack multi Done{" + client.Account.IP + "} Ass Hole");
                client.Disconnect();
                //client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
                return;
            }
            client.Send(new Message(Message, "ALLUSERS", System.Drawing.Color.Orange, GamePackets.Message.Dialog));
            client.Logger = new Logger(client.Entity.Name);
            if (!ServerBase.Kernel.GamePool.ContainsKey(client.Account.EntityID))
                ServerBase.Kernel.GamePool.Add(client.Entity.UID, client);

            if (!ServerBase.Kernel.WasInGamePool.ContainsKey(client.Account.EntityID))
                ServerBase.Kernel.WasInGamePool.Add(client.Entity.UID, client);


            Database.EntityTable.UpdateOnlineStatus(client, true);

            client.Send(new GamePackets.CharacterInfo(client));

            string IP = client.Socket.RemoteEndPoint.ToString().Split(':')[0].ToString();
            client.Account.OldIP = client.Account.IP;
            client.Account.IP = IP;
            client.Account.Save();
            if (ServerBase.Kernel.AwaitingPool.ContainsKey(client.Entity.UID))
            {
                ServerBase.Kernel.AwaitingPool.Remove(client.Entity.UID);
            }
            if (!client.LoggedIn)
            {
                client.LoggedIn = true;
                client.Action = 2;
                Console.WriteLine(client.Entity.Name + " has logged on! Ip:[" + client.Account.IP + "]");
                if (ServerBase.Kernel.GamePool.Count > Program.MaxOn)
                {
                    Program.MaxOn = ServerBase.Kernel.GamePool.Count;
                }
                Console.Title = "[" + Database.rates.servername + "]Conquer TQ. Start time: " + Program.StartDate.ToString("dd MM yyyy hh:mm") + ". Players online: " + ServerBase.Kernel.GamePool.Count + "/" + Program.PlayerCap + " Max Online: " + Program.MaxOn + "";
                PhoenixProject.ServerBase.Kernel.SendWorldMessage(new PhoenixProject.Network.GamePackets.Message("Player : " + client.Entity.Name + " CPS " + client.Entity.ConquerPoints + "Vip level " + client.Entity.VIPLevel + " has log in Welcome To [Conquer TQ 2.0]:OnlinePlayers :  " + ServerBase.Kernel.GamePool.Count + "", System.Drawing.Color.Brown, 2012), PhoenixProject.ServerBase.Kernel.GamePool.Values);

            }

        }

        static void LoginMessages(Client.GameState client)
        {
            if (client.WentToComplete)
                return;
            Data datas = new Data(true);
            datas.UID = client.Entity.UID;
            datas.ID = 116;
            datas.dwParam = 1197;
            client.Send(datas);
            client.SocketDisposed = false;

            // client.Send(Unknown2078Packet.Create(0x4f999eba));
            // client.TimeStamps.LoggedInTime = DateTime.Now;
            client.Send(new byte[] { 8, 0, 0x1f, 8, 0, 0, 0, 0, 0x54, 0x51, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72 });


            client.Send(new byte[] { 
                    0x1c, 1, 0x25, 4, 0, 0, 0x22, 0, 0x7a, 3, 0, 0, 0, 0, 0, 0, 
                    0xb2, 2, 0, 0, 0xff, 0xff, 0xff, 0xff, 0x8a, 2, 0, 0, 0, 0, 0, 0, 
                    0x5b, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 90, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 
                    0x59, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 0x58, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 
                    0x57, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 0x56, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 
                    0x55, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 0x54, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 
                    0x53, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 0x52, 3, 0, 0, 0xff, 0xff, 0xff, 0xff, 
                    0x57, 2, 0, 0, 0, 0, 0, 0, 0x56, 2, 0, 0, 0, 0, 0, 0, 
                    0x55, 2, 0, 0, 0, 0, 0, 0, 0x54, 2, 0, 0, 0, 0, 0, 0, 
                    0x53, 2, 0, 0, 0, 0, 0, 0, 0x52, 2, 0, 0, 0, 0, 0, 0, 
                    0x51, 2, 0, 0, 0, 0, 0, 0, 80, 2, 0, 0, 0, 0, 0, 0, 
                    0x4f, 2, 0, 0, 0, 0, 0, 0, 0x4e, 2, 0, 0, 0, 0, 0, 0, 
                    0xf3, 1, 0, 0, 0, 0, 0, 0, 0xf2, 1, 0, 0, 0, 0, 0, 0, 
                    0xf1, 1, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 0, 0, 
                    0xef, 1, 0, 0, 0, 0, 0, 0, 0xee, 1, 0, 0, 0, 0, 0, 0, 
                    0xed, 1, 0, 0, 0, 0, 0, 0, 0xec, 1, 0, 0, 0, 0, 0, 0, 
                    0xeb, 1, 0, 0, 0, 0, 0, 0, 0xea, 1, 0, 0, 0, 0, 0, 0, 
                    210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x54, 0x51, 0x53, 0x65, 
                    0x72, 0x76, 0x65, 0x72
                 });
            client.Send(new byte[] { 
                    60, 0, 0x7e, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x54, 0x51, 0x53, 0x65, 
                    0x72, 0x76, 0x65, 0x72
                 });
            client.Send(new byte[] { 
                    60, 0, 0x7e, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x54, 0x51, 0x53, 0x65, 
                    0x72, 0x76, 0x65, 0x72
                 });
            client.Send(new byte[] { 
                    0x54, 0, 0x20, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0x54, 0x51, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72
                 });




            DateTime time2 = new DateTime(0x7b2, 1, 1);
            TimeSpan span = (TimeSpan)(client.Entity.LastLogin - time2.ToLocalTime());
            uint num = (uint)span.TotalSeconds - 3600;
            // uint num = (uint)client.Entity.LastLogin.ToFileTime();
            if (num == 0)
            {
                DateTime time3 = new DateTime(0x7b2, 1, 1);
                TimeSpan span3 = (TimeSpan)(DateTime.Now - time3.ToLocalTime());

                num = (uint)span3.TotalSeconds - 3600;
            }
            LastLogin login = new LastLogin
            {
                TotalSeconds = num,
                Type = ((client.Account.IP != string.Empty) && (client.Account.IP != client.Account.OldIP)) ? PhoenixProject.Network.GamePackets.LastLogin.LastLoginTypes.DifferentCity : PhoenixProject.Network.GamePackets.LastLogin.LastLoginTypes.LastLogin,
                Unknown = 1
            };
            client.Send((byte[])login);


            if (client.Spells.ContainsKey(3050))
            {
                if (client.Entity.SecondRebornClass == 15 && client.Entity.FirstRebornClass == 15)
                {
                    // client.AddSpell(new Spell(true) { ID = 3050 });
                }
                else
                {
                    if (client.Entity.SecondRebornClass == 15 && client.Entity.Class >= 10 && client.Entity.Class <= 15)
                    {
                        // client.AddSpell(new Spell(true) { ID = 3050 });
                    }
                    else
                    {
                        if (client.Entity.FirstRebornClass == 15 && client.Entity.Class >= 10 && client.Entity.Class <= 15)
                        {
                            // client.AddSpell(new Spell(true) { ID = 3050 });
                        }
                        else
                        {
                            client.RemoveSpell(new Spell(true) { ID = 3050 });
                        }
                    }
                }
            }

            if (client.Spells.ContainsKey(11100))
            {
                if (client.Entity.SecondRebornClass == 75 && client.Entity.FirstRebornClass == 75)
                {
                    // client.AddSpell(new Spell(true) { ID = 3050 });
                }
                else
                {
                    if (client.Entity.SecondRebornClass == 75 && client.Entity.Class >= 70 && client.Entity.Class <= 75)
                    {
                        // client.AddSpell(new Spell(true) { ID = 3050 });
                    }
                    else
                    {
                        if (client.Entity.FirstRebornClass == 75 && client.Entity.Class >= 70 && client.Entity.Class <= 75)
                        {
                            // client.AddSpell(new Spell(true) { ID = 3050 });
                        }
                        else
                        {
                            client.RemoveSpell(new Spell(true) { ID = 11100 });
                        }
                    }
                }
            }


            if (client.Spells.ContainsKey(11050))
            {
                if (client.Spells[11050].Level > 0)
                {
                    client.RemoveSpell(new Spell(true) { ID = 11050 });
                    client.AddSpell(new Spell(true) { ID = 11050 });
                }
            }

            if (client.Entity.Class >= 50 && client.Entity.Class <= 55)
            {
                if (!client.Spells.ContainsKey(11230))
                {
                    client.AddSpell(new Spell(true) { ID = 11230 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(11230))
                {
                    client.RemoveSpell(new Spell(true) { ID = 11230 });
                }

            }

            if (client.Entity.Class >= 142 && client.Entity.Class <= 145 && client.Entity.FirstRebornClass == 145 && client.Entity.SecondRebornClass == 145)
            {
                if (!client.Spells.ContainsKey(10310))
                {
                    client.AddSpell(new Spell(true) { ID = 10310 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(10310))
                {
                    client.RemoveSpell(new Spell(true) { ID = 10310 });
                }

            }

            if (client.Entity.Class >= 132 && client.Entity.Class <= 135 && client.Entity.FirstRebornClass == 135 && client.Entity.SecondRebornClass == 135)
            {
                if (!client.Spells.ContainsKey(30000))
                {
                    client.AddSpell(new Spell(true) { ID = 30000 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(30000))
                {
                    client.RemoveSpell(new Spell(true) { ID = 30000 });
                }

            }

            if (client.Entity.Class >= 70 && client.Entity.Class <= 75 && client.Entity.FirstRebornClass == 75 && client.Entity.SecondRebornClass == 75)
            {
                if (!client.Spells.ContainsKey(11040))
                {
                    client.AddSpell(new Spell(true) { ID = 11040 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(11040))
                {
                    client.RemoveSpell(new Spell(true) { ID = 11040 });
                }

            }

            if (client.Entity.Class >= 50 && client.Entity.Class <= 55 && client.Entity.FirstRebornClass <= 55 && client.Entity.FirstRebornClass >= 50 && client.Entity.SecondRebornClass <= 55 && client.Entity.SecondRebornClass >= 50)
            {
                if (!client.Spells.ContainsKey(6003))
                {
                    client.AddSpell(new Spell(true) { ID = 6003 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(6003))
                {
                    client.RemoveSpell(new Spell(true) { ID = 6003 });
                }

            }
            if (client.Entity.Class >= 60 && client.Entity.Class <= 65 && client.Entity.FirstRebornClass <= 65 && client.Entity.FirstRebornClass >= 60 && client.Entity.SecondRebornClass <= 65 && client.Entity.SecondRebornClass >= 60)
            {
                if (!client.Spells.ContainsKey(10405))
                {
                    client.AddSpell(new Spell(true) { ID = 10405 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(10405))
                {
                    client.RemoveSpell(new Spell(true) { ID = 10405 });
                }

            }

            if (client.Entity.Class >= 40 && client.Entity.Class <= 45 && client.Entity.FirstRebornClass <= 45 && client.Entity.FirstRebornClass >= 40 && client.Entity.SecondRebornClass <= 45 && client.Entity.SecondRebornClass >= 40)
            {
                if (!client.Spells.ContainsKey(10313))
                {
                    client.AddSpell(new Spell(true) { ID = 10313 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(10313))
                {
                    client.RemoveSpell(new Spell(true) { ID = 10313 });
                }

            }
            if (client.Entity.Class >= 20 && client.Entity.Class <= 25 && client.Entity.FirstRebornClass <= 25 && client.Entity.FirstRebornClass >= 20 && client.Entity.SecondRebornClass <= 25 && client.Entity.SecondRebornClass >= 20)
            {
                if (!client.Spells.ContainsKey(10311))
                {
                    client.AddSpell(new Spell(true) { ID = 10311 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(10311))
                {
                    client.RemoveSpell(new Spell(true) { ID = 10311 });
                }

            }

            if (client.Entity.Class >= 10 && client.Entity.Class <= 15 && client.Entity.FirstRebornClass <= 15 && client.Entity.FirstRebornClass >= 10 && client.Entity.SecondRebornClass <= 15 && client.Entity.SecondRebornClass >= 10)
            {
                if (!client.Spells.ContainsKey(10315))
                {
                    client.AddSpell(new Spell(true) { ID = 10315 });
                }
            }
            else
            {
                if (client.Spells.ContainsKey(10315))
                {
                    client.RemoveSpell(new Spell(true) { ID = 10315 });
                }

            }



            if (client.Entity.Class >= 40 && client.Entity.Class <= 45)
            {
                if (client.Spells.ContainsKey(1025))
                {
                    client.RemoveSpell(new Spell(true) { ID = 1025 });//SuperMan
                }
            }
            if (client.Entity.Class >= 142 && client.Entity.Class <= 145)
            {
                if (client.Spells.ContainsKey(6002))
                {
                    client.RemoveSpell(new Spell(true) { ID = 6002 });//PiosnStar
                }
            }
            client.WentToComplete = true;
            client.Entity.SendUpdates = true;
            foreach (Interfaces.IConquerItem item in client.Inventory.Objects)
            {
                item.Send(client);
            }
            foreach (Interfaces.IConquerItem item in client.Equipment.Objects)
                if (item != null)
                {
                    if (Database.ConquerItemInformation.BaseInformations.ContainsKey(item.ID))
                    {
                        item.Send(client);
                        ItemUsage usage = new ItemUsage(true) { ID = ItemUsage.EquipItem };
                        usage.UID = item.UID;
                        usage.dwParam = item.Position;
                        client.Send(usage);
                        client.LoadItemStats(client.Entity);
                        client.CalculateStatBonus();
                        client.CalculateHPBonus();
                    }
                    else
                    {
                        client.Equipment.DestroyArrow(item.Position);
                    }
                }

            client.LoadItemStats(client.Entity);
            client.CalculateStatBonus();
            client.CalculateHPBonus();
            client.Equipment.UpdateEntityPacket();
            ClientEquip equips = new ClientEquip();
            equips.DoEquips(client);
            client.Send(equips);
            foreach (var Guild in ServerBase.Kernel.Guilds.Values)
            {
                Guild.SendName(client);
            }
            if (client.Entity.ClanId != 0 && client.Entity.ClanRank != 0 && client.Entity.ClanName != "")
            {
                if (client.Entity.Myclan != null)
                {
                    Network.GamePackets.Clan cl = new PhoenixProject.Network.GamePackets.Clan(client, 1);
                    client.Send(cl.ToArray());
                }
            }
            ServerTime time = new ServerTime();
            time.Year = (uint)DateTime.Now.Year;
            time.Month = (uint)DateTime.Now.Month;
            time.DayOfYear = (uint)DateTime.Now.DayOfYear;
            time.DayOfMonth = (uint)DateTime.Now.Day;
            time.Hour = (uint)DateTime.Now.Hour;
            time.Minute = (uint)DateTime.Now.Minute;
            time.Second = (uint)DateTime.Now.Second;
            client.Send(time);

            client.Entity.DoubleExperienceTime = (ushort)(client.Entity.DoubleExperienceTime + (1 - 1));
            client.Entity.HeavenBlessing = (ushort)(client.Entity.HeavenBlessing + (1 - 1));

            if (client.Mentor != null)
            {
                if (client.Mentor.IsOnline)
                {
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = client.Mentor.Client.Entity.UID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = client.Mentor.EnroleDate;
                    Information.Mentor_Level = client.Mentor.Client.Entity.Level;
                    Information.Mentor_Class = client.Mentor.Client.Entity.Class;
                    Information.Mentor_PkPoints = client.Mentor.Client.Entity.PKPoints;
                    Information.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    Information.Mentor_Online = true;
                    Information.Shared_Battle_Power = (uint)(((client.Mentor.Client.Entity.BattlePower - client.Mentor.Client.Entity.ExtraBattlePower) - (client.Entity.BattlePower - client.Entity.ExtraBattlePower)) / 3.3F);
                    Information.String_Count = 3;
                    Information.Mentor_Name = client.Mentor.Client.Entity.Name;
                    Information.Apprentice_Name = client.Entity.Name;
                    Information.Mentor_Spouse_Name = client.Mentor.Client.Entity.Spouse;
                    client.ReviewMentor();
                    client.Send(Information);

                    ApprenticeInformation AppInfo = new ApprenticeInformation();
                    AppInfo.Apprentice_ID = client.Entity.UID;
                    AppInfo.Apprentice_Level = client.Entity.Level;
                    AppInfo.Apprentice_Class = client.Entity.Class;
                    AppInfo.Apprentice_PkPoints = client.Entity.PKPoints;
                    AppInfo.Apprentice_Experience = client.AsApprentice.Actual_Experience;
                    AppInfo.Apprentice_Composing = client.AsApprentice.Actual_Plus;
                    AppInfo.Apprentice_Blessing = client.AsApprentice.Actual_HeavenBlessing;
                    AppInfo.Apprentice_Name = client.Entity.Name;
                    AppInfo.Apprentice_Online = true;
                    AppInfo.Apprentice_Spouse_Name = client.Entity.Spouse;
                    AppInfo.Enrole_date = client.Mentor.EnroleDate;
                    AppInfo.Mentor_ID = client.Mentor.ID;
                    AppInfo.Mentor_Mesh = client.Mentor.Client.Entity.Mesh;
                    AppInfo.Mentor_Name = client.Mentor.Name;
                    AppInfo.Type = 2;
                    client.Mentor.Client.Send(AppInfo);
                }
                else
                {
                    MentorInformation Information = new MentorInformation(true);
                    Information.Mentor_Type = 1;
                    Information.Mentor_ID = client.Mentor.ID;
                    Information.Apprentice_ID = client.Entity.UID;
                    Information.Enrole_Date = client.Mentor.EnroleDate;
                    Information.Mentor_Online = false;
                    Information.String_Count = 2;
                    Information.Mentor_Name = client.Mentor.Name;
                    Information.Apprentice_Name = client.Entity.Name;

                    client.Send(Information);
                }
            }
            NobilityInfo update = new NobilityInfo(true);
            update.Type = NobilityInfo.Icon;
            update.dwParam = client.NobilityInformation.EntityUID;
            update.UpdateString(client.NobilityInformation);
            client.Send(update);
            client.Entity.Update(Update.Merchant, 255, false);

            foreach (Interfaces.IConquerItem item in client.Inventory.Objects)
                item.Send(client);

            foreach (Interfaces.IConquerItem item in client.Equipment.Objects)
                if (item != null)
                {
                    if (Database.ConquerItemInformation.BaseInformations.ContainsKey(item.ID))
                    {
                        item.Send(client);
                        //kimoSystem.Threading.Thread.Sleep(1);
                        // item.Send(client);

                    }
                    else
                    {
                        client.Equipment.DestroyArrow(item.Position);
                        Console.WriteLine("Announcement: Item have been removed because of invalid info. UID: " + item.UID + ". OWNER: " + client.Entity.Name);
                    }
                }
            client.LoadItemStats(client.Entity);
            client.CalculateStatBonus();
            client.CalculateHPBonus();
            if (!client.Equipment.Free(5))
            {
                if (IsArrow(client.Equipment.TryGetItem(5).ID))
                {
                    if (client.Equipment.Free(4))
                        client.Equipment.DestroyArrow(5);
                    else
                    {
                        client.Equipment.Remove(5);
                    }
                }
            }
            client.GemAlgorithm();
            client.CalculateStatBonus();
            client.CalculateHPBonus();
            client.Entity.Stamina = 100;

            client.Send(new Message(String.Format(
             "Welcome in " + PhoenixProject.Database.rates.servername + " - Legends Return Season III", client.Entity.Name,
             client.Entity.LastLogin.ToLongDateString().Replace('-', ' '),
             client.Entity.LastLogin.ToLongTimeString()), System.Drawing.Color.Red,
             Message.Service));
            client.Entity.UpdateEffects(true);

            // client.Send(new Message("Welcome in "+Database.rates.servername+"", System.Drawing.Color.Red, Message.Middle));

            if (client.Entity.VIPLevel > 0)
            {
                Network.GamePackets.VipStatus vip = new Network.GamePackets.VipStatus();
                client.Send(vip.ToArray());
            }
            client.Send(new MapStatus() { BaseID = (ushort)client.Map.BaseID, ID = (uint)client.Map.ID, Status = Database.MapsTable.MapInformations[client.Map.ID].Status, Weather = Database.MapsTable.MapInformations[client.Map.ID].Weather });

            if (client.Entity.Hitpoints == 0)
                client.Entity.Hitpoints = 1;
            client.Entity.VIPLevel = (byte)(client.Entity.VIPLevel + 0);
            client.Entity.HandleTiming = true;
            if (client.Entity.GuildSharedBp != 0)
                client.Entity.Update(Network.GamePackets.Update.GuildShareBP, client.Entity.GuildSharedBp, false);

            if (client.Entity.ExtraBattlePower != 0)
                client.Entity.Update(Network.GamePackets.Update.ExtraBattlePower, client.Entity.ExtraBattlePower, false);
            if (client.Guild != null)
                client.Guild.SendAllyAndEnemy(client);
            if (Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityID > 2)
                client.Send(new Network.GamePackets.Message(Game.ConquerStructures.Broadcast.CurrentBroadcast.Message, "ALLUSERS", Game.ConquerStructures.Broadcast.CurrentBroadcast.EntityName, System.Drawing.Color.Red, Network.GamePackets.Message.BroadcastMessage));
            client.Entity.Update(Network.GamePackets.Update.LuckyTimeTimer, (byte)client.BlessTime, false);
            if (client.Entity.HeavenBlessing != 0)
                client.Entity.Update(Network.GamePackets.Update.OnlineTraining, client.OnlineTrainingPoints, false);
            if (client.ClaimableItem.Count > 0)
                foreach (var item in client.ClaimableItem.Values)
                    item.Send(client);
            if (client.DeatinedItem.Count > 0)
                foreach (var item in client.DeatinedItem.Values)
                    item.Send(client);
            if (client.ItemGive == true)
            {
                client.Inventory.Add(1001010, 0, 5);
                if (client.Entity.Class != 70)
                {
                    client.Inventory.AddandWear(132008, 0, 1, client);

                }
                else
                {
                    client.Inventory.AddandWear(132008, 0, 1, client);
                }
                if (client.Entity.Class == 10 || client.Entity.Class == 20)
                {
                    client.Inventory.AddandWear(410301, 0, 1, client);

                }
                if (client.Entity.Class >= 100)
                {
                    client.Inventory.AddandWear(421301, 0, 1, client);

                }
                if (client.Entity.Class == 70)
                {
                    client.Inventory.AddandWear(611301, 0, 1, client);

                }
                if (client.Entity.Class == 60)
                {
                    client.Inventory.AddandWear(610301, 0, 1, client);

                }
                if (client.Entity.Class == 50)
                {
                    client.Inventory.AddandWear(601301, 0, 1, client);

                }
                if (client.Entity.Class == 40)
                {
                    client.Inventory.AddandWear(500301, 0, 1, client);

                }
                client.ItemGive = false;
            }
            client.Entity.RacePoints = client.Entity.RacePoints;
            send1136(client);
            client.Equipment.UpdateEntityPacket();


        }
        #endregion
        #region Team
        public static void AcceptInviteToJoinTeam(Team team, Client.GameState client)
        {
            if (client.Team == null && !client.Entity.Dead)
            {
                Client.GameState Leader;
                if (ServerBase.Kernel.GamePool.TryGetValue(team.UID, out Leader))
                {
                    if (Leader.Team != null)
                    {
                        if (Leader.Team.Full || Leader.Team.ForbidJoin)
                            return;

                        client.Team = new PhoenixProject.Game.ConquerStructures.Team();

                        AddToTeam AddYou = new AddToTeam();
                        AddToTeam AddMe = new AddToTeam();
                        AddMe.Name = client.Entity.Name;
                        AddMe.MaxHitpoints = (ushort)client.Entity.MaxHitpoints;
                        AddMe.Hitpoints = (ushort)client.Entity.Hitpoints;
                        AddMe.Mesh = client.Entity.Mesh;
                        AddMe.UID = client.Entity.UID;
                        foreach (Client.GameState Teammate in Leader.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                Teammate.Send(AddMe);
                                client.Team.Add(Teammate);
                                AddYou.Name = Teammate.Entity.Name;
                                AddYou.MaxHitpoints = (ushort)Teammate.Entity.MaxHitpoints;
                                AddYou.Hitpoints = (ushort)Teammate.Entity.Hitpoints;
                                AddYou.Mesh = Teammate.Entity.Mesh;
                                AddYou.UID = Teammate.Entity.UID;
                                client.Send(AddYou);
                                if (Teammate.Entity.UID != Leader.Entity.UID)
                                    Teammate.Team.Add(client);
                            }
                        }
                        Leader.Team.Add(client);
                        client.Team.Add(client);
                        client.Team.Active = true;
                        client.Team.TeamLeader = false;
                        client.Send(AddMe);
                    }
                }
            }
        }
        public static void SendInviteToJoinTeam(Team team, Client.GameState client)
        {
            if (client.Team != null)
            {
                if (!client.Team.Full && client.Team.TeamLeader)
                {
                    Client.GameState Invitee;
                    if (ServerBase.Kernel.GamePool.TryGetValue(team.UID, out Invitee))
                    {
                        if (Invitee.Team == null)
                        {
                            team.UID = client.Entity.UID;
                            PopupLevelBP request = new PopupLevelBP();
                            request.Requester = client.Entity.UID;
                            request.Receiver = Invitee.Entity.UID;
                            request.Level = client.Entity.Level;
                            request.BattlePower = (uint)client.Entity.BattlePower;
                            Invitee.Send(request);
                            Invitee.Send(team);
                            Invitee.Send(request);

                        }
                        else
                        {
                            client.Send(new Message(Invitee.Entity.Name + " is already in a team.", System.Drawing.Color.Purple, Message.TopLeft));
                        }
                    }
                }
            }
        }
        public static void AcceptRequestToJoinTeam(Team team, Client.GameState client)
        {
            if (client.Team != null && !client.Entity.Dead)
            {
                if (!client.Team.Full && client.Team.TeamLeader && !client.Team.ForbidJoin)
                {
                    Client.GameState NewTeammate;
                    if (ServerBase.Kernel.GamePool.TryGetValue(team.UID, out NewTeammate))
                    {
                        if (NewTeammate.Team != null)
                            return;

                        NewTeammate.Team = new PhoenixProject.Game.ConquerStructures.Team();

                        AddToTeam AddMe = new AddToTeam();
                        AddToTeam AddYou = new AddToTeam();
                        AddYou.Name = NewTeammate.Entity.Name;
                        AddYou.MaxHitpoints = (ushort)NewTeammate.Entity.MaxHitpoints;
                        AddYou.Hitpoints = (ushort)NewTeammate.Entity.Hitpoints;
                        AddYou.Mesh = NewTeammate.Entity.Mesh;
                        AddYou.UID = NewTeammate.Entity.UID;
                        //lock (client.Team.Teammates)
                        {
                            foreach (Client.GameState Teammate in client.Team.Teammates)
                            {
                                if (Teammate != null)
                                {
                                    Teammate.Send(AddYou);
                                    NewTeammate.Team.Add(Teammate);
                                    AddMe.Name = Teammate.Entity.Name;
                                    AddMe.MaxHitpoints = (ushort)Teammate.Entity.MaxHitpoints;
                                    AddMe.Hitpoints = (ushort)Teammate.Entity.Hitpoints;
                                    AddMe.Mesh = Teammate.Entity.Mesh;
                                    AddMe.UID = Teammate.Entity.UID;
                                    NewTeammate.Send(AddMe);
                                    if (Teammate.Entity.UID != client.Entity.UID)
                                        Teammate.Team.Add(NewTeammate);
                                }
                            }

                            client.Team.Add(NewTeammate);
                            NewTeammate.Team.Add(NewTeammate);
                            NewTeammate.Team.Active = true;
                            NewTeammate.Team.TeamLeader = false;
                            client.Send(AddYou);
                            NewTeammate.Send(AddYou);
                        }
                    }
                }
            }
        }
        public static void SendRequestJoinToTeam(Team team, Client.GameState client)
        {
            if (client.Team == null && !client.Entity.Dead)
            {
                Client.GameState Leader;
                if (ServerBase.Kernel.GamePool.TryGetValue(team.UID, out Leader))
                {
                    if (Leader.Team != null)
                    {
                        if (Leader.Team.TeamLeader && !Leader.Team.Full)
                        {
                            team.UID = client.Entity.UID;
                            PopupLevelBP request = new PopupLevelBP();
                            request.Requester = client.Entity.UID;
                            request.Receiver = Leader.Entity.UID;
                            request.Level = client.Entity.Level;
                            request.BattlePower = (uint)client.Entity.BattlePower;
                            Leader.Send(request);
                            Leader.Send(team);
                            Leader.Send(request);

                        }
                        else
                        {
                            client.Send(new Message(Leader.Entity.Name + "'s team is already full.", System.Drawing.Color.Peru, Message.TopLeft));
                        }
                    }
                    else
                    {
                        client.Send(new Message(Leader.Entity.Name + "'s doesn't have a team.", System.Drawing.Color.Red, Message.TopLeft));
                    }
                }
            }
        }
        public static void LeaveTeam(Team team, Client.GameState client)
        {
            if (client.Team != null)
            {
                if (!client.Team.TeamLeader)
                {
                    lock (client.Team.Teammates)
                    {
                        foreach (Client.GameState Teammate in client.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                if (Teammate.Entity.UID != client.Entity.UID)
                                {
                                    Teammate.Send(team);
                                    Teammate.Team.Remove(client.Entity.UID);
                                }
                            }
                        }
                    }
                    client.Send(team);
                    client.Team = null;
                }
            }
        }
        public static void KickFromTeam(Team team, Client.GameState client)
        {
            if (client.Team != null)
            {
                if (client.Team.TeamLeader)
                {
                    Client.GameState Teammate; // The guy we're kicking out
                    if (ServerBase.Kernel.GamePool.TryGetValue(team.UID, out Teammate))
                    {
                        if (Teammate.Team != null)
                        {
                            if (Teammate.Team.IsTeammate(client.Entity.UID))
                            {
                                LeaveTeam(team, Teammate);
                            }
                        }
                    }
                }
            }
        }
        public static void DismissTeam(Team team, Client.GameState client)
        {
            if (client.Team != null)
            {
                if (!client.Entity.Dead && client.Team.TeamLeader)
                {
                    Leadership lship = new Leadership();
                    lship.Type = 1;
                    lock (client.Team.Teammates)
                    {
                        foreach (Client.GameState Teammate in client.Team.Teammates)
                        {
                            if (Teammate != null)
                            {
                                if (Teammate.Entity.UID != client.Entity.UID)
                                {
                                    lship.UID = Teammate.Entity.UID;
                                    Teammate.Send(lship);
                                    Teammate.Send(team);
                                    Teammate.Team = null;
                                }
                            }
                        }
                    }
                    lship.UID = client.Entity.UID;
                    client.Send(lship);
                    client.Send(team);
                    client.Team = null;

                    client.Entity.RemoveFlag(Update.Flags.TeamLeader);
                }
            }
        }
        public static void CreateTeam(Team team, Client.GameState client)
        {
            if (!client.Entity.Dead && client.Team == null)
            {
                Leadership lship = new Leadership();
                lship.Type = 1;
                lship.UID = client.Entity.UID;
                lship.LeaderUID = client.Entity.UID;
                lship.IsLeader = 1;
                client.Send(lship);
                client.Entity.AddFlag(Update.Flags.TeamLeader);
                client.Team = new PhoenixProject.Game.ConquerStructures.Team();
                client.Team.Active = true;
                client.Team.TeamLeader = true;
                client.Team.Add(client);
                client.Send(team);
            }
        }
        #endregion
        #region Flower

        public static void AddFlowers(Client.GameState client, byte[] packet)
        {
            int subtype = packet[4];

            //string UID = (string)client.Entity.UID;
            if (subtype == 1)
            {
                // PrintPacket(packet);
                //Console.WriteLine("Kima");
                // client.Send(new GamePackets.FlowerRank(client.Entity.UID).ThePacket());
            }
            if (subtype == 2)
            {
                if (client.Entity.Body == 2001 || client.Entity.Body == 2002)
                {
                    if (client.Entity.Flowers != null)
                    {
                        Game.Features.Flowers.Flowers F = client.Entity.Flowers;
                        //string ToSend = " " + F.RedRoses.ToString() + " " + F.RedRoses2day.ToString() + " " + F.Lilies.ToString() + " " + F.Lilies2day.ToString() + " ";
                        //ToSend += F.Orchads.ToString() + " " + F.Orchads2day.ToString() + " " + F.Tulips.ToString() + " " + F.Tulips2day.ToString();


                        int mybestcount = 0;
                        if (F.Lilies > mybestcount)
                            mybestcount = (int)F.Lilies;
                        if (F.Orchads > mybestcount)
                            mybestcount = (int)F.Orchads;
                        if (F.RedRoses > mybestcount)
                            mybestcount = (int)F.RedRoses;
                        if (F.Tulips > mybestcount)
                            mybestcount = (int)F.Tulips;


                        if (F.Lilies == mybestcount)
                        {
                            if (mybestcount >= ServerBase.Kernel.MaxLilies)
                            {
                                client.Entity.ActualMyTypeFlower = 30010102;
                                client.Entity.Flowers.Lilies++;
                                client.Entity.Flowers.Lilies2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Lilies.ToString(), client.Entity.UID.ToString(), 30000102);
                                client.Send(fl.ThePacket());
                                ServerBase.Kernel.MaxLilies = (uint)mybestcount;
                            }
                        }
                        if (F.Orchads == mybestcount)
                        {
                            if (mybestcount >= ServerBase.Kernel.MaxOrchads)
                            {
                                client.Entity.ActualMyTypeFlower = 30010202;
                                client.Entity.Flowers.Orchads++;
                                client.Entity.Flowers.Orchads2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Orchads.ToString(), client.Entity.UID.ToString(), 30000202);
                                client.Send(fl.ThePacket());
                                ServerBase.Kernel.MaxOrchads = (uint)mybestcount;
                            }
                        }
                        if (F.RedRoses == mybestcount)
                        {
                            if (mybestcount >= ServerBase.Kernel.MaxRoses)
                            {
                                client.Entity.ActualMyTypeFlower = 30010002;
                                client.Entity.Flowers.RedRoses++;
                                client.Entity.Flowers.RedRoses2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.RedRoses.ToString(), client.Entity.UID.ToString(), 30000002);
                                client.Send(fl.ThePacket());
                                ServerBase.Kernel.MaxRoses = (uint)mybestcount;
                            }
                        }
                        if (F.Tulips == mybestcount)
                        {
                            if (mybestcount >= ServerBase.Kernel.MaxTulips)
                            {
                                client.Entity.ActualMyTypeFlower = 30010302;
                                client.Entity.Flowers.Tulips++;
                                client.Entity.Flowers.Tulips2day++;
                                FlowerSpawn fl = new FlowerSpawn("1", client.Entity.Name, F.Tulips.ToString(), client.Entity.UID.ToString(), 30000302);
                                client.Send(fl.ThePacket());
                            } ServerBase.Kernel.MaxTulips = (uint)mybestcount;
                        }
                        //Database.Flowers.SaveFlowerRank(client);

                    }
                    else
                    {
                        client.Entity.Flowers = new PhoenixProject.Game.Features.Flowers.Flowers();
                        Game.Features.Flowers.Flowers F = client.Entity.Flowers;
                        //Database.Flowers.SaveFlowerRank(client);
                    }
                    byte[] packe2nd = new byte[24]
                                {
                                    16, 0 , 127 , 4 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0   
                                   , 84 , 81 , 83 , 101 , 114 , 118 , 101 , 114                  
                                };
                    client.Send(packe2nd);
                    //client.Send(new GamePackets.FlowerRank(client.Entity.UID).ThePacket());
                }
            }
        }

        #endregion
        public static bool NulledClient(Client.GameState client)
        {
            if (client == null)
                return true;
            if (client != null && client.Entity == null)
                return true;

            return false;
        }

        public static GameState current { get; set; }
    }
}
